
karman-avionics.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a2  00802000  000054ce  00005562  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000883  008022a2  008022a2  00005806  2**2
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005804  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005860  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e8  00000000  00000000  000058a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000184e8  00000000  00000000  00006288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006dc8  00000000  00000000  0001e770  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010419  00000000  00000000  00025538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002d18  00000000  00000000  00035954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00039c85  00000000  00000000  0003866c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009353  00000000  00000000  000722f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000848  00000000  00000000  0007b644  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000f1b0  00000000  00000000  0007be8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f7 c2       	rjmp	.+1518   	; 0x5f0 <__ctors_end>
       2:	00 00       	nop
       4:	16 c3       	rjmp	.+1580   	; 0x632 <__bad_interrupt>
       6:	00 00       	nop
       8:	14 c3       	rjmp	.+1576   	; 0x632 <__bad_interrupt>
       a:	00 00       	nop
       c:	12 c3       	rjmp	.+1572   	; 0x632 <__bad_interrupt>
       e:	00 00       	nop
      10:	10 c3       	rjmp	.+1568   	; 0x632 <__bad_interrupt>
      12:	00 00       	nop
      14:	0e c3       	rjmp	.+1564   	; 0x632 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__vector_6>
      1c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_7>
      20:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_8>
      24:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__vector_9>
      28:	04 c3       	rjmp	.+1544   	; 0x632 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	02 c3       	rjmp	.+1540   	; 0x632 <__bad_interrupt>
      2e:	00 00       	nop
      30:	00 c3       	rjmp	.+1536   	; 0x632 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 60 14 	jmp	0x28c0	; 0x28c0 <__vector_13>
      38:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_14>
      3c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_15>
      40:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__vector_16>
      44:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__vector_17>
      48:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_18>
      4c:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_19>
      50:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_20>
      54:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_21>
      58:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_22>
      5c:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__vector_23>
      60:	e8 c2       	rjmp	.+1488   	; 0x632 <__bad_interrupt>
      62:	00 00       	nop
      64:	e6 c2       	rjmp	.+1484   	; 0x632 <__bad_interrupt>
      66:	00 00       	nop
      68:	e4 c2       	rjmp	.+1480   	; 0x632 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e2 c2       	rjmp	.+1476   	; 0x632 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c 94 ca 21 	jmp	0x4394	; 0x4394 <__vector_28>
      74:	de c2       	rjmp	.+1468   	; 0x632 <__bad_interrupt>
      76:	00 00       	nop
      78:	dc c2       	rjmp	.+1464   	; 0x632 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	da c2       	rjmp	.+1460   	; 0x632 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d8 c2       	rjmp	.+1456   	; 0x632 <__bad_interrupt>
      82:	00 00       	nop
      84:	d6 c2       	rjmp	.+1452   	; 0x632 <__bad_interrupt>
      86:	00 00       	nop
      88:	d4 c2       	rjmp	.+1448   	; 0x632 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d2 c2       	rjmp	.+1444   	; 0x632 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d0 c2       	rjmp	.+1440   	; 0x632 <__bad_interrupt>
      92:	00 00       	nop
      94:	ce c2       	rjmp	.+1436   	; 0x632 <__bad_interrupt>
      96:	00 00       	nop
      98:	cc c2       	rjmp	.+1432   	; 0x632 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ca c2       	rjmp	.+1428   	; 0x632 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c8 c2       	rjmp	.+1424   	; 0x632 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c6 c2       	rjmp	.+1420   	; 0x632 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c4 c2       	rjmp	.+1416   	; 0x632 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c2 c2       	rjmp	.+1412   	; 0x632 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c0 c2       	rjmp	.+1408   	; 0x632 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	be c2       	rjmp	.+1404   	; 0x632 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0c 94 87 14 	jmp	0x290e	; 0x290e <__vector_46>
      bc:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_47>
      c0:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_48>
      c4:	0c 94 8f 10 	jmp	0x211e	; 0x211e <__vector_49>
      c8:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__vector_50>
      cc:	0c 94 e9 10 	jmp	0x21d2	; 0x21d2 <__vector_51>
      d0:	0c 94 16 11 	jmp	0x222c	; 0x222c <__vector_52>
      d4:	0c 94 43 11 	jmp	0x2286	; 0x2286 <__vector_53>
      d8:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_54>
      dc:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__vector_55>
      e0:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__vector_56>
      e4:	a6 c2       	rjmp	.+1356   	; 0x632 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a4 c2       	rjmp	.+1352   	; 0x632 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a2 c2       	rjmp	.+1348   	; 0x632 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a0 c2       	rjmp	.+1344   	; 0x632 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__vector_61>
      f8:	9c c2       	rjmp	.+1336   	; 0x632 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9a c2       	rjmp	.+1332   	; 0x632 <__bad_interrupt>
      fe:	00 00       	nop
     100:	22 c3       	rjmp	.+1604   	; 0x746 <__vector_64>
     102:	00 00       	nop
     104:	96 c2       	rjmp	.+1324   	; 0x632 <__bad_interrupt>
     106:	00 00       	nop
     108:	94 c2       	rjmp	.+1320   	; 0x632 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	92 c2       	rjmp	.+1316   	; 0x632 <__bad_interrupt>
     10e:	00 00       	nop
     110:	90 c2       	rjmp	.+1312   	; 0x632 <__bad_interrupt>
     112:	00 00       	nop
     114:	8e c2       	rjmp	.+1308   	; 0x632 <__bad_interrupt>
     116:	00 00       	nop
     118:	8c c2       	rjmp	.+1304   	; 0x632 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8a c2       	rjmp	.+1300   	; 0x632 <__bad_interrupt>
     11e:	00 00       	nop
     120:	88 c2       	rjmp	.+1296   	; 0x632 <__bad_interrupt>
     122:	00 00       	nop
     124:	86 c2       	rjmp	.+1292   	; 0x632 <__bad_interrupt>
     126:	00 00       	nop
     128:	84 c2       	rjmp	.+1288   	; 0x632 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	82 c2       	rjmp	.+1284   	; 0x632 <__bad_interrupt>
     12e:	00 00       	nop
     130:	80 c2       	rjmp	.+1280   	; 0x632 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_77>
     138:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__vector_78>
     13c:	0c 94 cd 0e 	jmp	0x1d9a	; 0x1d9a <__vector_79>
     140:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_80>
     144:	0c 94 27 0f 	jmp	0x1e4e	; 0x1e4e <__vector_81>
     148:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_82>
     14c:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_83>
     150:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_84>
     154:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__vector_85>
     158:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__vector_86>
     15c:	6a c2       	rjmp	.+1236   	; 0x632 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__vector_88>
     164:	66 c2       	rjmp	.+1228   	; 0x632 <__bad_interrupt>
     166:	00 00       	nop
     168:	64 c2       	rjmp	.+1224   	; 0x632 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	62 c2       	rjmp	.+1220   	; 0x632 <__bad_interrupt>
     16e:	00 00       	nop
     170:	60 c2       	rjmp	.+1216   	; 0x632 <__bad_interrupt>
     172:	00 00       	nop
     174:	5e c2       	rjmp	.+1212   	; 0x632 <__bad_interrupt>
     176:	00 00       	nop
     178:	5c c2       	rjmp	.+1208   	; 0x632 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5a c2       	rjmp	.+1204   	; 0x632 <__bad_interrupt>
     17e:	00 00       	nop
     180:	58 c2       	rjmp	.+1200   	; 0x632 <__bad_interrupt>
     182:	00 00       	nop
     184:	56 c2       	rjmp	.+1196   	; 0x632 <__bad_interrupt>
     186:	00 00       	nop
     188:	54 c2       	rjmp	.+1192   	; 0x632 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	52 c2       	rjmp	.+1188   	; 0x632 <__bad_interrupt>
     18e:	00 00       	nop
     190:	50 c2       	rjmp	.+1184   	; 0x632 <__bad_interrupt>
     192:	00 00       	nop
     194:	4e c2       	rjmp	.+1180   	; 0x632 <__bad_interrupt>
     196:	00 00       	nop
     198:	4c c2       	rjmp	.+1176   	; 0x632 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4a c2       	rjmp	.+1172   	; 0x632 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	48 c2       	rjmp	.+1168   	; 0x632 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	46 c2       	rjmp	.+1164   	; 0x632 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	44 c2       	rjmp	.+1160   	; 0x632 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	42 c2       	rjmp	.+1156   	; 0x632 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__vector_108>
     1b4:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__vector_109>
     1b8:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__vector_110>
     1bc:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__vector_111>
     1c0:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_112>
     1c4:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__vector_113>
     1c8:	34 c2       	rjmp	.+1128   	; 0x632 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	32 c2       	rjmp	.+1124   	; 0x632 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	30 c2       	rjmp	.+1120   	; 0x632 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2e c2       	rjmp	.+1116   	; 0x632 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2c c2       	rjmp	.+1112   	; 0x632 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2a c2       	rjmp	.+1108   	; 0x632 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	28 c2       	rjmp	.+1104   	; 0x632 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	26 c2       	rjmp	.+1100   	; 0x632 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	24 c2       	rjmp	.+1096   	; 0x632 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	22 c2       	rjmp	.+1092   	; 0x632 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	20 c2       	rjmp	.+1088   	; 0x632 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_125>
     1f8:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__vector_126>
     1fc:	78 15       	cp	r23, r8
     1fe:	66 15       	cp	r22, r6
     200:	69 15       	cp	r22, r9
     202:	6c 15       	cp	r22, r12
     204:	6f 15       	cp	r22, r15
     206:	72 15       	cp	r23, r2
     208:	75 15       	cp	r23, r5
     20a:	f0 20       	and	r15, r0
     20c:	f5 20       	and	r15, r5
     20e:	08 21       	and	r16, r8
     210:	22 21       	and	r18, r2
     212:	48 21       	and	r20, r8
     214:	4e 21       	and	r20, r14
     216:	61 21       	and	r22, r1
     218:	7a 21       	and	r23, r10

0000021a <__trampolines_end>:
     21a:	41 73       	andi	r20, 0x31	; 49
     21c:	73 65       	ori	r23, 0x53	; 83
     21e:	72 74       	andi	r23, 0x42	; 66
     220:	69 6f       	ori	r22, 0xF9	; 249
     222:	6e 20       	and	r6, r14
     224:	27 25       	eor	r18, r7
     226:	73 27       	eor	r23, r19
     228:	20 66       	ori	r18, 0x60	; 96
     22a:	61 69       	ori	r22, 0x91	; 145
     22c:	6c 65       	ori	r22, 0x5C	; 92
     22e:	64 20       	and	r6, r4
     230:	61 74       	andi	r22, 0x41	; 65
     232:	20 25       	eor	r18, r0
     234:	73 3a       	cpi	r23, 0xA3	; 163
     236:	25 64       	ori	r18, 0x45	; 69
     238:	0d 0a       	sbc	r0, r29
	...

0000023b <_fmtstr.5099>:
     23b:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     24b:	3a 20 25 73 25 73 00                                : %s%s.

00000252 <__c.5201>:
     252:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     262:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000273 <_fmtstr.5200>:
     273:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     283:	3a 20 25 73 25 73 00                                : %s%s.

0000028a <__c.5193>:
     28a:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     29a:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000002ab <_fmtstr.5192>:
     2ab:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     2bb:	3a 20 25 73 25 73 00                                : %s%s.

000002c2 <__c.4590>:
     2c2:	54 65 73 74 20 27 25 73 27 20 66 61 69 6c 65 64     Test '%s' failed
     2d2:	20 61 74 20 25 73 3a 25 75 3a 0d 0a 09 00            at %s:%u:....

000002e0 <__c.5905>:
     2e0:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     2f0:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000301 <_fmtstr.5904>:
     301:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     311:	3a 20 25 73 25 73 00                                : %s%s.

00000318 <__c.5847>:
     318:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     328:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000339 <_fmtstr.5846>:
     339:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     349:	3a 20 25 73 25 73 00                                : %s%s.

00000350 <__c.5843>:
     350:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     360:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000371 <_fmtstr.5842>:
     371:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     381:	3a 20 25 73 25 73 00                                : %s%s.

00000388 <__c.5839>:
     388:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     398:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000003a9 <_fmtstr.5838>:
     3a9:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     3b9:	3a 20 25 73 25 73 00                                : %s%s.

000003c0 <__c.5897>:
     3c0:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     3d0:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000003e1 <_fmtstr.5896>:
     3e1:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     3f1:	3a 20 25 73 25 73 00                                : %s%s.

000003f8 <__c.5933>:
     3f8:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     408:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000419 <_fmtstr.5932>:
     419:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     429:	3a 20 25 73 25 73 00                                : %s%s.

00000430 <__c.5802>:
     430:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     440:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000451 <_fmtstr.5801>:
     451:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     461:	3a 20 25 73 25 73 00                                : %s%s.

00000468 <__c.5793>:
     468:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     478:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000489 <_fmtstr.5792>:
     489:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     499:	3a 20 25 73 25 73 00                                : %s%s.

000004a0 <__c.5779>:
     4a0:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     4b0:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000004c1 <_fmtstr.5778>:
     4c1:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     4d1:	3a 20 25 73 25 73 00                                : %s%s.

000004d8 <__c.5770>:
     4d8:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     4e8:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000004f9 <_fmtstr.5769>:
     4f9:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     509:	3a 20 25 73 25 73 00                                : %s%s.

00000510 <__c.5762>:
     510:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     520:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000531 <_fmtstr.5761>:
     531:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     541:	3a 20 25 73 25 73 00                                : %s%s.

00000548 <__c.5754>:
     548:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     558:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

00000569 <_fmtstr.5753>:
     569:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     579:	3a 20 25 73 25 73 00                                : %s%s.

00000580 <__c.5870>:
     580:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     590:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000005a1 <_fmtstr.5869>:
     5a1:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     5b1:	3a 20 25 73 25 73 00                                : %s%s.

000005b8 <__c.5746>:
     5b8:	41 73 73 65 72 74 69 6f 6e 20 27 25 73 27 20 66     Assertion '%s' f
     5c8:	61 69 6c 65 64 20 61 74 20 25 73 3a 25 64 0d 0a     ailed at %s:%d..
	...

000005d9 <_fmtstr.5745>:
     5d9:	41 73 73 65 72 74 69 6f 6e 20 66 61 69 6c 65 64     Assertion failed
     5e9:	3a 20 25 73 25 73 00                                : %s%s.

000005f0 <__ctors_end>:
     5f0:	11 24       	eor	r1, r1
     5f2:	1f be       	out	0x3f, r1	; 63
     5f4:	cf ef       	ldi	r28, 0xFF	; 255
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df e5       	ldi	r29, 0x5F	; 95
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	00 e0       	ldi	r16, 0x00	; 0
     5fe:	0c bf       	out	0x3c, r16	; 60

00000600 <__do_copy_data>:
     600:	12 e2       	ldi	r17, 0x22	; 34
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e2       	ldi	r27, 0x20	; 32
     606:	ee ec       	ldi	r30, 0xCE	; 206
     608:	f4 e5       	ldi	r31, 0x54	; 84
     60a:	00 e0       	ldi	r16, 0x00	; 0
     60c:	0b bf       	out	0x3b, r16	; 59
     60e:	02 c0       	rjmp	.+4      	; 0x614 <__do_copy_data+0x14>
     610:	07 90       	elpm	r0, Z+
     612:	0d 92       	st	X+, r0
     614:	a2 3a       	cpi	r26, 0xA2	; 162
     616:	b1 07       	cpc	r27, r17
     618:	d9 f7       	brne	.-10     	; 0x610 <__do_copy_data+0x10>

0000061a <__do_clear_bss>:
     61a:	2b e2       	ldi	r18, 0x2B	; 43
     61c:	a2 ea       	ldi	r26, 0xA2	; 162
     61e:	b2 e2       	ldi	r27, 0x22	; 34
     620:	01 c0       	rjmp	.+2      	; 0x624 <.do_clear_bss_start>

00000622 <.do_clear_bss_loop>:
     622:	1d 92       	st	X+, r1

00000624 <.do_clear_bss_start>:
     624:	a5 32       	cpi	r26, 0x25	; 37
     626:	b2 07       	cpc	r27, r18
     628:	e1 f7       	brne	.-8      	; 0x622 <.do_clear_bss_loop>
     62a:	0e 94 10 23 	call	0x4620	; 0x4620 <main>
     62e:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <_exit>

00000632 <__bad_interrupt>:
     632:	e6 cc       	rjmp	.-1588   	; 0x0 <__vectors>

00000634 <board_init>:
#include "RadioTask.h"
#include "FlashMem.h"
#include "USBUtils.h"

void board_init(void)
{
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ff 92       	push	r15
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29

    /* setup Pin directions on all GPIO pins */
    /* FOR DIRECTION: 0 = input, 1 = output */
    /* SET --> OUTPUT, CLEAR --> INPUT */

    RADIO_GPIO_PORT.DIRCLR = RADIO_CTS | RADIO_ATTEN;
     642:	c0 ea       	ldi	r28, 0xA0	; 160
     644:	d6 e0       	ldi	r29, 0x06	; 6
     646:	80 e9       	ldi	r24, 0x90	; 144
     648:	8a 83       	std	Y+2, r24	; 0x02
    RADIO_GPIO_PORT.DIRSET = RADIO_RTS | RADIO_CS;
     64a:	80 e6       	ldi	r24, 0x60	; 96
     64c:	89 83       	std	Y+1, r24	; 0x01
    RADIO_SPI_PORT.DIRCLR = RADIO_MISO;
     64e:	e0 e8       	ldi	r30, 0x80	; 128
     650:	f6 e0       	ldi	r31, 0x06	; 6
     652:	80 e4       	ldi	r24, 0x40	; 64
     654:	82 83       	std	Z+2, r24	; 0x02
    RADIO_SPI_PORT.DIRSET = RADIO_MOSI | RADIO_SCLK;
     656:	90 ea       	ldi	r25, 0xA0	; 160
     658:	91 83       	std	Z+1, r25	; 0x01

    FLASH_PORT.DIRCLR = FLASH_MISO;
     65a:	0f 2e       	mov	r0, r31
     65c:	f0 e4       	ldi	r31, 0x40	; 64
     65e:	cf 2e       	mov	r12, r31
     660:	f6 e0       	ldi	r31, 0x06	; 6
     662:	df 2e       	mov	r13, r31
     664:	f0 2d       	mov	r31, r0
     666:	d6 01       	movw	r26, r12
     668:	12 96       	adiw	r26, 0x02	; 2
     66a:	8c 93       	st	X, r24
     66c:	12 97       	sbiw	r26, 0x02	; 2
    FLASH_PORT.DIRSET = FLASH_MOSI | FLASH_SCLK | FLASH_CS;
     66e:	81 ea       	ldi	r24, 0xA1	; 161
     670:	11 96       	adiw	r26, 0x01	; 1
     672:	8c 93       	st	X, r24

    SENSOR_SPI_PORT.DIRCLR = SENSOR_MISO;
     674:	80 e6       	ldi	r24, 0x60	; 96
     676:	96 e0       	ldi	r25, 0x06	; 6
     678:	64 e0       	ldi	r22, 0x04	; 4
     67a:	dc 01       	movw	r26, r24
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	6c 93       	st	X, r22
     680:	12 97       	sbiw	r26, 0x02	; 2
    SENSOR_SPI_PORT.DIRSET = SENSOR_MOSI | SENSOR_SCLK;
     682:	2a e0       	ldi	r18, 0x0A	; 10
     684:	11 96       	adiw	r26, 0x01	; 1
     686:	2c 93       	st	X, r18
     688:	11 97       	sbiw	r26, 0x01	; 1

    USB_PORT.DIRCLR = USB_SENSE;
     68a:	70 e2       	ldi	r23, 0x20	; 32
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	7c 93       	st	X, r23

    HIGHG_ACC1_PORT.DIRCLR = HIGHG_ACC1_INT;
     690:	28 e0       	ldi	r18, 0x08	; 8
     692:	d6 01       	movw	r26, r12
     694:	12 96       	adiw	r26, 0x02	; 2
     696:	2c 93       	st	X, r18
     698:	12 97       	sbiw	r26, 0x02	; 2
    HIGHG_ACC1_PORT.DIRSET = HIGHG_ACC1_CS;
     69a:	50 e1       	ldi	r21, 0x10	; 16
     69c:	11 96       	adiw	r26, 0x01	; 1
     69e:	5c 93       	st	X, r21
     6a0:	11 97       	sbiw	r26, 0x01	; 1

    HIGHG_ACC2_PORT.DIRCLR = HIGHG_ACC2_INT;
     6a2:	62 83       	std	Z+2, r22	; 0x02
    HIGHG_ACC2_PORT.DIRSET = HIGHG_ACC2_CS;
     6a4:	21 83       	std	Z+1, r18	; 0x01

    GPS_PORT.DIRCLR = GPS_INT;
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	6c 93       	st	X, r22
     6aa:	12 97       	sbiw	r26, 0x02	; 2
    GPS_PORT.DIRSET = GPS_CS;
     6ac:	42 e0       	ldi	r20, 0x02	; 2
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	4c 93       	st	X, r20

    IMU_ACC1_INT_PORT.DIRCLR = IMU_ACC1_INT;
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	32 83       	std	Z+2, r19	; 0x02
    IMU_ACC1_CS_PORT.DIRSET = IMU_ACC1_CS;
     6b6:	dc 01       	movw	r26, r24
     6b8:	11 96       	adiw	r26, 0x01	; 1
     6ba:	5c 93       	st	X, r21
     6bc:	11 97       	sbiw	r26, 0x01	; 1

    IMU_ACC2_PORT.DIRCLR = IMU_ACC2_INT;
     6be:	6a 83       	std	Y+2, r22	; 0x02
    IMU_ACC2_PORT.DIRSET = IMU_ACC2_CS;
     6c0:	49 83       	std	Y+1, r20	; 0x01

    IMU_GYRO1_PORT.DIRSET = IMU_GYRO1_CS;
     6c2:	11 96       	adiw	r26, 0x01	; 1
     6c4:	3c 93       	st	X, r19

    IMU_GYRO2_PORT.DIRSET = IMU_GYRO2_CS;
     6c6:	51 83       	std	Z+1, r21	; 0x01

    IMU_MAG1_PORT.DIRSET = IMU_MAG1_CS;
     6c8:	41 83       	std	Z+1, r20	; 0x01

    IMU_MAG2_PORT.DIRSET = IMU_MAG2_CS;
     6ca:	29 83       	std	Y+1, r18	; 0x01

    ALTIMETER_PORT.DIRSET = ALTIMETER_CS;
     6cc:	39 83       	std	Y+1, r19	; 0x01

    PYRO_12_PORT.DIRCLR = PYRO_SENSE2B | PYRO_SENSE2A | PYRO_SENSE1B | PYRO_SENSE1A;
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	16 e0       	ldi	r17, 0x06	; 6
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f9 e9       	ldi	r31, 0x99	; 153
     6d6:	ff 2e       	mov	r15, r31
     6d8:	f0 2d       	mov	r31, r0
     6da:	d8 01       	movw	r26, r16
     6dc:	12 96       	adiw	r26, 0x02	; 2
     6de:	fc 92       	st	X, r15
     6e0:	12 97       	sbiw	r26, 0x02	; 2
    PYRO_12_PORT.DIRSET = PYRO_2A | PYRO_2B | PYRO_1A | PYRO_1B;
     6e2:	66 e6       	ldi	r22, 0x66	; 102
     6e4:	11 96       	adiw	r26, 0x01	; 1
     6e6:	6c 93       	st	X, r22

    PYRO_34_PORT.DIRCLR = PYRO_SENSE4B | PYRO_SENSE4A | PYRO_SENSE3B | PYRO_SENSE3A;
     6e8:	00 e2       	ldi	r16, 0x20	; 32
     6ea:	16 e0       	ldi	r17, 0x06	; 6
     6ec:	d8 01       	movw	r26, r16
     6ee:	12 96       	adiw	r26, 0x02	; 2
     6f0:	fc 92       	st	X, r15
     6f2:	12 97       	sbiw	r26, 0x02	; 2
    PYRO_34_PORT.DIRSET = PYRO_4A | PYRO_4B | PYRO_3A | PYRO_3B;
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	6c 93       	st	X, r22

    /* Pull all CS pins high */
    /* Radio and flash memory */
    RADIO_GPIO_PORT.OUTSET = RADIO_CS;
     6f8:	7d 83       	std	Y+5, r23	; 0x05
    FLASH_PORT.OUTSET = FLASH_CS;
     6fa:	d6 01       	movw	r26, r12
     6fc:	15 96       	adiw	r26, 0x05	; 5
     6fe:	3c 93       	st	X, r19
     700:	15 97       	sbiw	r26, 0x05	; 5
    /* Sensors */
    HIGHG_ACC1_PORT.OUTSET = HIGHG_ACC1_CS;
     702:	15 96       	adiw	r26, 0x05	; 5
     704:	5c 93       	st	X, r21
     706:	15 97       	sbiw	r26, 0x05	; 5
    HIGHG_ACC2_PORT.OUTSET = HIGHG_ACC2_CS;
     708:	25 83       	std	Z+5, r18	; 0x05
    GPS_PORT.OUTSET = GPS_CS;
     70a:	15 96       	adiw	r26, 0x05	; 5
     70c:	4c 93       	st	X, r20
    IMU_ACC1_CS_PORT.OUTSET = IMU_ACC1_CS;
     70e:	dc 01       	movw	r26, r24
     710:	15 96       	adiw	r26, 0x05	; 5
     712:	5c 93       	st	X, r21
     714:	15 97       	sbiw	r26, 0x05	; 5
    IMU_ACC2_PORT.OUTSET = IMU_ACC2_CS;
     716:	4d 83       	std	Y+5, r20	; 0x05
    IMU_GYRO1_PORT.OUTSET = IMU_GYRO1_CS;
     718:	15 96       	adiw	r26, 0x05	; 5
     71a:	3c 93       	st	X, r19
     71c:	15 97       	sbiw	r26, 0x05	; 5
    IMU_GYRO2_PORT.OUTSET = IMU_GYRO2_CS;
     71e:	55 83       	std	Z+5, r21	; 0x05
    IMU_MAG1_PORT.OUTSET = IMU_MAG1_CS;
     720:	45 83       	std	Z+5, r20	; 0x05
    IMU_MAG2_PORT.OUTSET = IMU_MAG2_CS;
     722:	2d 83       	std	Y+5, r18	; 0x05
    ALTIMETER_PORT.OUTSET = ALTIMETER_CS;
     724:	3d 83       	std	Y+5, r19	; 0x05

    /* Pull all txd pins high */
    RADIO_SPI_PORT.OUTSET = RADIO_MOSI;
     726:	30 e8       	ldi	r19, 0x80	; 128
     728:	35 83       	std	Z+5, r19	; 0x05
    SENSOR_SPI_PORT.OUTSET = SENSOR_MOSI;
     72a:	15 96       	adiw	r26, 0x05	; 5
     72c:	2c 93       	st	X, r18
    FLASH_PORT.OUTSET = FLASH_MOSI;
     72e:	f6 01       	movw	r30, r12
     730:	35 83       	std	Z+5, r19	; 0x05


    /* Initializes SPI for sensors, and sets up CS pins for all sensors */
    init_sensor_task();
     732:	0e 94 92 23 	call	0x4724	; 0x4724 <init_sensor_task>
    /* Initializes SPI for External Flash Memory, sets up CS pin for it */
    //init_flashmem();

    /* Initializes the USB CDC interface */
    //init_usb();
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	08 95       	ret

00000746 <__vector_64>:
 * Debounced in the USB task.
 *
 * Ref http://www.microchip.com/forums/m616629.aspx
*/
ISR(PORTD_INT0_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0b b6       	in	r0, 0x3b	; 59
     752:	0f 92       	push	r0
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
    uint8_t pinval = USB_PORT.IN & USB_SENSE;
     76c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    /* pinval will be 0x20 if bit 5 is set or 0 if it is not. */

    if(pinval)
     770:	85 ff       	sbrs	r24, 5
     772:	0e c0       	rjmp	.+28     	; 0x790 <__vector_64+0x4a>
    {
        gIsUSBConnected = true;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <__data_end>
        gUSBConnectTime = get_timer_count();
     77a:	0e 94 b4 22 	call	0x4568	; 0x4568 <get_timer_count>
     77e:	60 93 78 26 	sts	0x2678, r22	; 0x802678 <gUSBConnectTime>
     782:	70 93 79 26 	sts	0x2679, r23	; 0x802679 <gUSBConnectTime+0x1>
     786:	80 93 7a 26 	sts	0x267A, r24	; 0x80267a <gUSBConnectTime+0x2>
     78a:	90 93 7b 26 	sts	0x267B, r25	; 0x80267b <gUSBConnectTime+0x3>
     78e:	02 c0       	rjmp	.+4      	; 0x794 <__vector_64+0x4e>
    }
    else
    {
        gIsUSBConnected = false;
     790:	10 92 a2 22 	sts	0x22A2, r1	; 0x8022a2 <__data_end>
    }
}
     794:	ff 91       	pop	r31
     796:	ef 91       	pop	r30
     798:	bf 91       	pop	r27
     79a:	af 91       	pop	r26
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	7f 91       	pop	r23
     7a2:	6f 91       	pop	r22
     7a4:	5f 91       	pop	r21
     7a6:	4f 91       	pop	r20
     7a8:	3f 91       	pop	r19
     7aa:	2f 91       	pop	r18
     7ac:	0f 90       	pop	r0
     7ae:	0b be       	out	0x3b, r0	; 59
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <usb_utils_cdc_enabled>:
 * Called once udc_attach is finished. Initializes state machine and
 * Confirms that USB is ready for communication.
 */
bool usb_utils_cdc_enabled(uint8_t port)
{
    gIsUSBActive= true;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 7e 26 	sts	0x267E, r24	; 0x80267e <gIsUSBActive>
    gUsbUtilsState = USB_STATE_INITIAL;
     7c0:	10 92 7c 26 	sts	0x267C, r1	; 0x80267c <gUsbUtilsState>
    return true;
}
     7c4:	08 95       	ret

000007c6 <usb_utils_cdc_disabled>:
 * Called once udc_detach is finished. Informs USB thread that
 * USB is fully detached.
 */
void usb_utils_cdc_disabled(uint8_t port)
{
    gIsUSBActive = false;
     7c6:	10 92 7e 26 	sts	0x267E, r1	; 0x80267e <gIsUSBActive>
     7ca:	08 95       	ret

000007cc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	1f 92       	push	r1
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     7d8:	80 e0       	ldi	r24, 0x00	; 0
#endif


void sysclk_init(void)
{
	uint8_t *reg = (uint8_t *)&PR.PRGEN;
     7da:	e0 e7       	ldi	r30, 0x70	; 112
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <sysclk_init+0x1c>
		*(reg++) = 0xff;
     7e0:	9f ef       	ldi	r25, 0xFF	; 255
     7e2:	90 83       	st	Z, r25
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
		*(reg++) = 0xff;
     7e6:	31 96       	adiw	r30, 0x01	; 1
	UNUSED(cal);
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
     7e8:	87 30       	cpi	r24, 0x07	; 7
     7ea:	d0 f3       	brcs	.-12     	; 0x7e0 <sysclk_init+0x14>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7ec:	8f b7       	in	r24, 0x3f	; 63
     7ee:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     7f0:	f8 94       	cli
	return flags;
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     7f4:	e0 e5       	ldi	r30, 0x50	; 80
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	82 60       	ori	r24, 0x02	; 2
     7fc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7fe:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     800:	90 91 51 00 	lds	r25, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	91 ff       	sbrs	r25, 1
     808:	80 e0       	ldi	r24, 0x00	; 0
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     80a:	88 23       	and	r24, r24
     80c:	c9 f3       	breq	.-14     	; 0x800 <sysclk_init+0x34>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	80 e4       	ldi	r24, 0x40	; 64
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	9e d7       	rcall	.+3900   	; 0x1752 <ccp_write_io>
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
	return test_case_ptr;
     816:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
     81a:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
		Assert(CLK.CTRL == CONFIG_SYSCLK_SOURCE);
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	01 f1       	breq	.+64     	; 0x862 <sysclk_init+0x96>
     822:	20 91 40 00 	lds	r18, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     826:	21 30       	cpi	r18, 0x01	; 1
     828:	a1 f1       	breq	.+104    	; 0x892 <sysclk_init+0xc6>
     82a:	2f e5       	ldi	r18, 0x5F	; 95
     82c:	32 e2       	ldi	r19, 0x22	; 34
     82e:	3f 93       	push	r19
     830:	2f 93       	push	r18
     832:	22 ed       	ldi	r18, 0xD2	; 210
     834:	30 e2       	ldi	r19, 0x20	; 32
     836:	3f 93       	push	r19
     838:	2f 93       	push	r18
     83a:	2b e3       	ldi	r18, 0x3B	; 59
     83c:	32 e0       	ldi	r19, 0x02	; 2
     83e:	3f 93       	push	r19
     840:	2f 93       	push	r18
     842:	1f 92       	push	r1
     844:	23 e9       	ldi	r18, 0x93	; 147
     846:	2f 93       	push	r18
     848:	23 ef       	ldi	r18, 0xF3	; 243
     84a:	30 e2       	ldi	r19, 0x20	; 32
     84c:	3f 93       	push	r19
     84e:	2f 93       	push	r18
     850:	1f 92       	push	r1
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	2f 93       	push	r18
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	43 d7       	rcall	.+3718   	; 0x16e2 <test_case_fail>
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	de bf       	out	0x3e, r29	; 62
     860:	18 c0       	rjmp	.+48     	; 0x892 <sysclk_init+0xc6>
     862:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	a1 f0       	breq	.+40     	; 0x892 <sysclk_init+0xc6>
     86a:	1f 92       	push	r1
     86c:	83 e9       	ldi	r24, 0x93	; 147
     86e:	8f 93       	push	r24
     870:	83 ef       	ldi	r24, 0xF3	; 243
     872:	90 e2       	ldi	r25, 0x20	; 32
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	82 ed       	ldi	r24, 0xD2	; 210
     87a:	90 e2       	ldi	r25, 0x20	; 32
     87c:	9f 93       	push	r25
     87e:	8f 93       	push	r24
     880:	8a e1       	ldi	r24, 0x1A	; 26
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	de bf       	out	0x3e, r29	; 62
     890:	ff cf       	rjmp	.-2      	; 0x890 <sysclk_init+0xc4>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     892:	8f b7       	in	r24, 0x3f	; 63
     894:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     896:	f8 94       	cli
	return flags;
     898:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     89a:	e0 e5       	ldi	r30, 0x50	; 80
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8e 7f       	andi	r24, 0xFE	; 254
     8a2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8a4:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	1f 92       	push	r1
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8ba:	9f b7       	in	r25, 0x3f	; 63
     8bc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8be:	f8 94       	cli
	return flags;
     8c0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8c2:	e8 2f       	mov	r30, r24
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	e0 59       	subi	r30, 0x90	; 144
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	60 95       	com	r22
     8cc:	80 81       	ld	r24, Z
     8ce:	68 23       	and	r22, r24
     8d0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8d2:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8d4:	0f 90       	pop	r0
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <udi_cdc_data_setup>:
}

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
}
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret

000008e0 <udi_cdc_getsetting>:
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	08 95       	ret

000008e4 <udi_cdc_setup_to_port>:
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <udi_cdc_comm_setup>:
     8e8:	fd df       	rcall	.-6      	; 0x8e4 <udi_cdc_setup_to_port>
     8ea:	90 91 8d 26 	lds	r25, 0x268D	; 0x80268d <udd_g_ctrlreq>
     8ee:	29 2f       	mov	r18, r25
     8f0:	99 23       	and	r25, r25
     8f2:	44 f5       	brge	.+80     	; 0x944 <udi_cdc_comm_setup+0x5c>
     8f4:	39 2f       	mov	r19, r25
     8f6:	30 76       	andi	r19, 0x60	; 96
     8f8:	30 32       	cpi	r19, 0x20	; 32
     8fa:	21 f5       	brne	.+72     	; 0x944 <udi_cdc_comm_setup+0x5c>
     8fc:	30 91 8e 26 	lds	r19, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
     900:	31 32       	cpi	r19, 0x21	; 33
     902:	01 f5       	brne	.+64     	; 0x944 <udi_cdc_comm_setup+0x5c>
     904:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
     908:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
     90c:	27 30       	cpi	r18, 0x07	; 7
     90e:	31 05       	cpc	r19, r1
     910:	09 f0       	breq	.+2      	; 0x914 <udi_cdc_comm_setup+0x2c>
     912:	48 c0       	rjmp	.+144    	; 0x9a4 <udi_cdc_comm_setup+0xbc>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9c 01       	movw	r18, r24
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	a9 01       	movw	r20, r18
     926:	48 1b       	sub	r20, r24
     928:	59 0b       	sbc	r21, r25
     92a:	ca 01       	movw	r24, r20
     92c:	8a 53       	subi	r24, 0x3A	; 58
     92e:	9c 4d       	sbci	r25, 0xDC	; 220
     930:	ed e8       	ldi	r30, 0x8D	; 141
     932:	f6 e2       	ldi	r31, 0x26	; 38
     934:	80 87       	std	Z+8, r24	; 0x08
     936:	91 87       	std	Z+9, r25	; 0x09
     938:	87 e0       	ldi	r24, 0x07	; 7
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	82 87       	std	Z+10, r24	; 0x0a
     93e:	93 87       	std	Z+11, r25	; 0x0b
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	08 95       	ret
     944:	22 23       	and	r18, r18
     946:	84 f1       	brlt	.+96     	; 0x9a8 <udi_cdc_comm_setup+0xc0>
     948:	90 76       	andi	r25, 0x60	; 96
     94a:	90 32       	cpi	r25, 0x20	; 32
     94c:	79 f5       	brne	.+94     	; 0x9ac <udi_cdc_comm_setup+0xc4>
     94e:	90 91 8e 26 	lds	r25, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
     952:	90 32       	cpi	r25, 0x20	; 32
     954:	21 f0       	breq	.+8      	; 0x95e <udi_cdc_comm_setup+0x76>
     956:	92 32       	cpi	r25, 0x22	; 34
     958:	59 f5       	brne	.+86     	; 0x9b0 <udi_cdc_comm_setup+0xc8>
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	08 95       	ret
     95e:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
     962:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
     966:	27 30       	cpi	r18, 0x07	; 7
     968:	31 05       	cpc	r19, r1
     96a:	21 f5       	brne	.+72     	; 0x9b4 <udi_cdc_comm_setup+0xcc>
     96c:	ed e8       	ldi	r30, 0x8D	; 141
     96e:	f6 e2       	ldi	r31, 0x26	; 38
     970:	2c ed       	ldi	r18, 0xDC	; 220
     972:	34 e0       	ldi	r19, 0x04	; 4
     974:	24 87       	std	Z+12, r18	; 0x0c
     976:	35 87       	std	Z+13, r19	; 0x0d
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9c 01       	movw	r18, r24
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	22 0f       	add	r18, r18
     982:	33 1f       	adc	r19, r19
     984:	22 0f       	add	r18, r18
     986:	33 1f       	adc	r19, r19
     988:	a9 01       	movw	r20, r18
     98a:	48 1b       	sub	r20, r24
     98c:	59 0b       	sbc	r21, r25
     98e:	ca 01       	movw	r24, r20
     990:	8a 53       	subi	r24, 0x3A	; 58
     992:	9c 4d       	sbci	r25, 0xDC	; 220
     994:	80 87       	std	Z+8, r24	; 0x08
     996:	91 87       	std	Z+9, r25	; 0x09
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	82 87       	std	Z+10, r24	; 0x0a
     99e:	93 87       	std	Z+11, r25	; 0x0b
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	08 95       	ret
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	08 95       	ret
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	08 95       	ret
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	08 95       	ret
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	08 95       	ret

000009b8 <udi_cdc_line_coding_received>:
     9b8:	08 95       	ret

000009ba <udi_cdc_comm_enable>:
     9ba:	10 92 b8 23 	sts	0x23B8, r1	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     9be:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <udi_cdc_state>
     9c2:	10 92 c5 23 	sts	0x23C5, r1	; 0x8023c5 <udi_cdc_state+0x1>
     9c6:	ea eb       	ldi	r30, 0xBA	; 186
     9c8:	f3 e2       	ldi	r31, 0x23	; 35
     9ca:	81 ea       	ldi	r24, 0xA1	; 161
     9cc:	80 83       	st	Z, r24
     9ce:	80 e2       	ldi	r24, 0x20	; 32
     9d0:	81 83       	std	Z+1, r24	; 0x01
     9d2:	12 82       	std	Z+2, r1	; 0x02
     9d4:	13 82       	std	Z+3, r1	; 0x03
     9d6:	14 82       	std	Z+4, r1	; 0x04
     9d8:	15 82       	std	Z+5, r1	; 0x05
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	86 83       	std	Z+6, r24	; 0x06
     9e0:	97 83       	std	Z+7, r25	; 0x07
     9e2:	10 86       	std	Z+8, r1	; 0x08
     9e4:	11 86       	std	Z+9, r1	; 0x09
     9e6:	e6 ec       	ldi	r30, 0xC6	; 198
     9e8:	f3 e2       	ldi	r31, 0x23	; 35
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	92 ec       	ldi	r25, 0xC2	; 194
     9ee:	a1 e0       	ldi	r26, 0x01	; 1
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	80 83       	st	Z, r24
     9f4:	91 83       	std	Z+1, r25	; 0x01
     9f6:	a2 83       	std	Z+2, r26	; 0x02
     9f8:	b3 83       	std	Z+3, r27	; 0x03
     9fa:	14 82       	std	Z+4, r1	; 0x04
     9fc:	15 82       	std	Z+5, r1	; 0x05
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	86 83       	std	Z+6, r24	; 0x06
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	da de       	rcall	.-588    	; 0x7ba <usb_utils_cdc_enabled>
     a06:	88 23       	and	r24, r24
     a08:	29 f0       	breq	.+10     	; 0xa14 <udi_cdc_comm_enable+0x5a>
     a0a:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     a0e:	9f 5f       	subi	r25, 0xFF	; 255
     a10:	90 93 b8 23 	sts	0x23B8, r25	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     a14:	08 95       	ret

00000a16 <udi_cdc_tx_send>:
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	1f 92       	push	r1
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udi_cdc_tx_trans_ongoing>
     a2a:	81 11       	cpse	r24, r1
     a2c:	9f c0       	rjmp	.+318    	; 0xb6c <udi_cdc_tx_send+0x156>
     a2e:	0e 94 a8 19 	call	0x3350	; 0x3350 <udd_is_high_speed>
     a32:	88 23       	and	r24, r24
     a34:	51 f0       	breq	.+20     	; 0xa4a <udi_cdc_tx_send+0x34>
     a36:	00 91 a7 22 	lds	r16, 0x22A7	; 0x8022a7 <udi_cdc_tx_sof_num>
     a3a:	10 91 a8 22 	lds	r17, 0x22A8	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     a3e:	0e 94 b5 19 	call	0x336a	; 0x336a <udd_get_micro_frame_number>
     a42:	08 17       	cp	r16, r24
     a44:	19 07       	cpc	r17, r25
     a46:	59 f4       	brne	.+22     	; 0xa5e <udi_cdc_tx_send+0x48>
     a48:	91 c0       	rjmp	.+290    	; 0xb6c <udi_cdc_tx_send+0x156>
     a4a:	00 91 a7 22 	lds	r16, 0x22A7	; 0x8022a7 <udi_cdc_tx_sof_num>
     a4e:	10 91 a8 22 	lds	r17, 0x22A8	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     a52:	0e 94 b0 19 	call	0x3360	; 0x3360 <udd_get_frame_number>
     a56:	08 17       	cp	r16, r24
     a58:	19 07       	cpc	r17, r25
     a5a:	09 f4       	brne	.+2      	; 0xa5e <udi_cdc_tx_send+0x48>
     a5c:	87 c0       	rjmp	.+270    	; 0xb6c <udi_cdc_tx_send+0x156>
     a5e:	8f b7       	in	r24, 0x3f	; 63
     a60:	89 83       	std	Y+1, r24	; 0x01
     a62:	f8 94       	cli
     a64:	19 81       	ldd	r17, Y+1	; 0x01
     a66:	00 91 a9 22 	lds	r16, 0x22A9	; 0x8022a9 <udi_cdc_tx_buf_sel>
     a6a:	e0 2f       	mov	r30, r16
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	e6 55       	subi	r30, 0x56	; 86
     a74:	fd 4d       	sbci	r31, 0xDD	; 221
     a76:	80 81       	ld	r24, Z
     a78:	91 81       	ldd	r25, Z+1	; 0x01
     a7a:	89 2b       	or	r24, r25
     a7c:	09 f5       	brne	.+66     	; 0xac0 <udi_cdc_tx_send+0xaa>
     a7e:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <sof_zlp_counter.5290>
     a82:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <sof_zlp_counter.5290+0x1>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	80 93 a3 22 	sts	0x22A3, r24	; 0x8022a3 <sof_zlp_counter.5290>
     a8c:	90 93 a4 22 	sts	0x22A4, r25	; 0x8022a4 <sof_zlp_counter.5290+0x1>
     a90:	0e 94 a8 19 	call	0x3350	; 0x3350 <udd_is_high_speed>
     a94:	81 11       	cpse	r24, r1
     a96:	07 c0       	rjmp	.+14     	; 0xaa6 <udi_cdc_tx_send+0x90>
     a98:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <sof_zlp_counter.5290>
     a9c:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <sof_zlp_counter.5290+0x1>
     aa0:	84 36       	cpi	r24, 0x64	; 100
     aa2:	91 05       	cpc	r25, r1
     aa4:	58 f0       	brcs	.+22     	; 0xabc <udi_cdc_tx_send+0xa6>
     aa6:	0e 94 a8 19 	call	0x3350	; 0x3350 <udd_is_high_speed>
     aaa:	88 23       	and	r24, r24
     aac:	49 f0       	breq	.+18     	; 0xac0 <udi_cdc_tx_send+0xaa>
     aae:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <sof_zlp_counter.5290>
     ab2:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <sof_zlp_counter.5290+0x1>
     ab6:	80 32       	cpi	r24, 0x20	; 32
     ab8:	93 40       	sbci	r25, 0x03	; 3
     aba:	10 f4       	brcc	.+4      	; 0xac0 <udi_cdc_tx_send+0xaa>
     abc:	1f bf       	out	0x3f, r17	; 63
     abe:	56 c0       	rjmp	.+172    	; 0xb6c <udi_cdc_tx_send+0x156>
     ac0:	10 92 a3 22 	sts	0x22A3, r1	; 0x8022a3 <sof_zlp_counter.5290>
     ac4:	10 92 a4 22 	sts	0x22A4, r1	; 0x8022a4 <sof_zlp_counter.5290+0x1>
     ac8:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udi_cdc_tx_both_buf_to_send>
     acc:	81 11       	cpse	r24, r1
     ace:	06 c0       	rjmp	.+12     	; 0xadc <udi_cdc_tx_send+0xc6>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	01 11       	cpse	r16, r1
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <udi_cdc_tx_buf_sel>
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <udi_cdc_tx_send+0xce>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	01 11       	cpse	r16, r1
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 2f       	mov	r16, r24
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 a6 22 	sts	0x22A6, r24	; 0x8022a6 <udi_cdc_tx_trans_ongoing>
     aea:	1f bf       	out	0x3f, r17	; 63
     aec:	10 e0       	ldi	r17, 0x00	; 0
     aee:	f8 01       	movw	r30, r16
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	e6 55       	subi	r30, 0x56	; 86
     af6:	fd 4d       	sbci	r31, 0xDD	; 221
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	ff 24       	eor	r15, r15
     afe:	f3 94       	inc	r15
     b00:	80 34       	cpi	r24, 0x40	; 64
     b02:	91 05       	cpc	r25, r1
     b04:	09 f4       	brne	.+2      	; 0xb08 <udi_cdc_tx_send+0xf2>
     b06:	f1 2c       	mov	r15, r1
     b08:	80 34       	cpi	r24, 0x40	; 64
     b0a:	91 05       	cpc	r25, r1
     b0c:	91 f0       	breq	.+36     	; 0xb32 <udi_cdc_tx_send+0x11c>
     b0e:	0e 94 a8 19 	call	0x3350	; 0x3350 <udd_is_high_speed>
     b12:	88 23       	and	r24, r24
     b14:	39 f0       	breq	.+14     	; 0xb24 <udi_cdc_tx_send+0x10e>
     b16:	0e 94 b5 19 	call	0x336a	; 0x336a <udd_get_micro_frame_number>
     b1a:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <udi_cdc_tx_sof_num>
     b1e:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <udi_cdc_tx_send+0x124>
     b24:	0e 94 b0 19 	call	0x3360	; 0x3360 <udd_get_frame_number>
     b28:	80 93 a7 22 	sts	0x22A7, r24	; 0x8022a7 <udi_cdc_tx_sof_num>
     b2c:	90 93 a8 22 	sts	0x22A8, r25	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <udi_cdc_tx_send+0x124>
     b32:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udi_cdc_tx_sof_num>
     b36:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     b3a:	a8 01       	movw	r20, r16
     b3c:	00 24       	eor	r0, r0
     b3e:	56 95       	lsr	r21
     b40:	47 95       	ror	r20
     b42:	07 94       	ror	r0
     b44:	56 95       	lsr	r21
     b46:	47 95       	ror	r20
     b48:	07 94       	ror	r0
     b4a:	54 2f       	mov	r21, r20
     b4c:	40 2d       	mov	r20, r0
     b4e:	42 55       	subi	r20, 0x52	; 82
     b50:	5d 4d       	sbci	r21, 0xDD	; 221
     b52:	00 0f       	add	r16, r16
     b54:	11 1f       	adc	r17, r17
     b56:	f8 01       	movw	r30, r16
     b58:	e6 55       	subi	r30, 0x56	; 86
     b5a:	fd 4d       	sbci	r31, 0xDD	; 221
     b5c:	20 81       	ld	r18, Z
     b5e:	31 81       	ldd	r19, Z+1	; 0x01
     b60:	0d eb       	ldi	r16, 0xBD	; 189
     b62:	15 e0       	ldi	r17, 0x05	; 5
     b64:	6f 2d       	mov	r22, r15
     b66:	81 e8       	ldi	r24, 0x81	; 129
     b68:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <udd_ep_run>
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	08 95       	ret

00000b7a <udi_cdc_data_sent>:
     b7a:	81 11       	cpse	r24, r1
     b7c:	15 c0       	rjmp	.+42     	; 0xba8 <udi_cdc_data_sent+0x2e>
     b7e:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <udi_cdc_tx_buf_sel>
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	22 23       	and	r18, r18
     b88:	11 f0       	breq	.+4      	; 0xb8e <udi_cdc_data_sent+0x14>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	88 0f       	add	r24, r24
     b90:	99 1f       	adc	r25, r25
     b92:	fc 01       	movw	r30, r24
     b94:	e6 55       	subi	r30, 0x56	; 86
     b96:	fd 4d       	sbci	r31, 0xDD	; 221
     b98:	10 82       	st	Z, r1
     b9a:	11 82       	std	Z+1, r1	; 0x01
     b9c:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <udi_cdc_tx_both_buf_to_send>
     ba0:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udi_cdc_tx_trans_ongoing>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	37 cf       	rjmp	.-402    	; 0xa16 <udi_cdc_tx_send>
     ba8:	08 95       	ret

00000baa <udi_cdc_data_sof_notify>:
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	34 cf       	rjmp	.-408    	; 0xa16 <udi_cdc_tx_send>
     bae:	08 95       	ret

00000bb0 <udi_cdc_comm_disable>:
     bb0:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
     bb4:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	19 f1       	breq	.+70     	; 0xc02 <udi_cdc_comm_disable+0x52>
     bbc:	20 91 b8 23 	lds	r18, 0x23B8	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     bc0:	21 11       	cpse	r18, r1
     bc2:	3b c0       	rjmp	.+118    	; 0xc3a <udi_cdc_comm_disable+0x8a>
     bc4:	2f e5       	ldi	r18, 0x5F	; 95
     bc6:	32 e2       	ldi	r19, 0x22	; 34
     bc8:	3f 93       	push	r19
     bca:	2f 93       	push	r18
     bcc:	29 e4       	ldi	r18, 0x49	; 73
     bce:	31 e2       	ldi	r19, 0x21	; 33
     bd0:	3f 93       	push	r19
     bd2:	2f 93       	push	r18
     bd4:	2b ea       	ldi	r18, 0xAB	; 171
     bd6:	32 e0       	ldi	r19, 0x02	; 2
     bd8:	3f 93       	push	r19
     bda:	2f 93       	push	r18
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	2f 93       	push	r18
     be0:	3b e6       	ldi	r19, 0x6B	; 107
     be2:	3f 93       	push	r19
     be4:	46 e6       	ldi	r20, 0x66	; 102
     be6:	51 e2       	ldi	r21, 0x21	; 33
     be8:	5f 93       	push	r21
     bea:	4f 93       	push	r20
     bec:	1f 92       	push	r1
     bee:	2f 93       	push	r18
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	76 d5       	rcall	.+2796   	; 0x16e2 <test_case_fail>
     bf6:	8d b7       	in	r24, 0x3d	; 61
     bf8:	9e b7       	in	r25, 0x3e	; 62
     bfa:	0e 96       	adiw	r24, 0x0e	; 14
     bfc:	8d bf       	out	0x3d, r24	; 61
     bfe:	9e bf       	out	0x3e, r25	; 62
     c00:	1c c0       	rjmp	.+56     	; 0xc3a <udi_cdc_comm_disable+0x8a>
     c02:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     c06:	81 11       	cpse	r24, r1
     c08:	18 c0       	rjmp	.+48     	; 0xc3a <udi_cdc_comm_disable+0x8a>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	8f 93       	push	r24
     c0e:	8b e6       	ldi	r24, 0x6B	; 107
     c10:	8f 93       	push	r24
     c12:	86 e6       	ldi	r24, 0x66	; 102
     c14:	91 e2       	ldi	r25, 0x21	; 33
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	89 e4       	ldi	r24, 0x49	; 73
     c1c:	91 e2       	ldi	r25, 0x21	; 33
     c1e:	9f 93       	push	r25
     c20:	8f 93       	push	r24
     c22:	8a e8       	ldi	r24, 0x8A	; 138
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
     c2e:	8d b7       	in	r24, 0x3d	; 61
     c30:	9e b7       	in	r25, 0x3e	; 62
     c32:	08 96       	adiw	r24, 0x08	; 8
     c34:	8d bf       	out	0x3d, r24	; 61
     c36:	9e bf       	out	0x3e, r25	; 62
     c38:	ff cf       	rjmp	.-2      	; 0xc38 <udi_cdc_comm_disable+0x88>
     c3a:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     c3e:	81 50       	subi	r24, 0x01	; 1
     c40:	80 93 b8 23 	sts	0x23B8, r24	; 0x8023b8 <udi_cdc_nb_comm_enabled>
     c44:	08 95       	ret

00000c46 <udi_cdc_data_disable>:
     c46:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
     c4a:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	19 f1       	breq	.+70     	; 0xc98 <udi_cdc_data_disable+0x52>
     c52:	20 91 b7 23 	lds	r18, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     c56:	21 11       	cpse	r18, r1
     c58:	3b c0       	rjmp	.+118    	; 0xcd0 <udi_cdc_data_disable+0x8a>
     c5a:	2f e5       	ldi	r18, 0x5F	; 95
     c5c:	32 e2       	ldi	r19, 0x22	; 34
     c5e:	3f 93       	push	r19
     c60:	2f 93       	push	r18
     c62:	20 ea       	ldi	r18, 0xA0	; 160
     c64:	31 e2       	ldi	r19, 0x21	; 33
     c66:	3f 93       	push	r19
     c68:	2f 93       	push	r18
     c6a:	23 e7       	ldi	r18, 0x73	; 115
     c6c:	32 e0       	ldi	r19, 0x02	; 2
     c6e:	3f 93       	push	r19
     c70:	2f 93       	push	r18
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	2f 93       	push	r18
     c76:	33 e7       	ldi	r19, 0x73	; 115
     c78:	3f 93       	push	r19
     c7a:	46 e6       	ldi	r20, 0x66	; 102
     c7c:	51 e2       	ldi	r21, 0x21	; 33
     c7e:	5f 93       	push	r21
     c80:	4f 93       	push	r20
     c82:	1f 92       	push	r1
     c84:	2f 93       	push	r18
     c86:	9f 93       	push	r25
     c88:	8f 93       	push	r24
     c8a:	2b d5       	rcall	.+2646   	; 0x16e2 <test_case_fail>
     c8c:	8d b7       	in	r24, 0x3d	; 61
     c8e:	9e b7       	in	r25, 0x3e	; 62
     c90:	0e 96       	adiw	r24, 0x0e	; 14
     c92:	8d bf       	out	0x3d, r24	; 61
     c94:	9e bf       	out	0x3e, r25	; 62
     c96:	1c c0       	rjmp	.+56     	; 0xcd0 <udi_cdc_data_disable+0x8a>
     c98:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     c9c:	81 11       	cpse	r24, r1
     c9e:	18 c0       	rjmp	.+48     	; 0xcd0 <udi_cdc_data_disable+0x8a>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	8f 93       	push	r24
     ca4:	83 e7       	ldi	r24, 0x73	; 115
     ca6:	8f 93       	push	r24
     ca8:	86 e6       	ldi	r24, 0x66	; 102
     caa:	91 e2       	ldi	r25, 0x21	; 33
     cac:	9f 93       	push	r25
     cae:	8f 93       	push	r24
     cb0:	80 ea       	ldi	r24, 0xA0	; 160
     cb2:	91 e2       	ldi	r25, 0x21	; 33
     cb4:	9f 93       	push	r25
     cb6:	8f 93       	push	r24
     cb8:	82 e5       	ldi	r24, 0x52	; 82
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	9f 93       	push	r25
     cbe:	8f 93       	push	r24
     cc0:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
     cc4:	8d b7       	in	r24, 0x3d	; 61
     cc6:	9e b7       	in	r25, 0x3e	; 62
     cc8:	08 96       	adiw	r24, 0x08	; 8
     cca:	8d bf       	out	0x3d, r24	; 61
     ccc:	9e bf       	out	0x3e, r25	; 62
     cce:	ff cf       	rjmp	.-2      	; 0xcce <udi_cdc_data_disable+0x88>
     cd0:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     cd4:	81 50       	subi	r24, 0x01	; 1
     cd6:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <udi_cdc_nb_data_enabled>
     cda:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     cde:	73 dd       	rcall	.-1306   	; 0x7c6 <usb_utils_cdc_disabled>
     ce0:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <udi_cdc_data_running>
     ce4:	08 95       	ret

00000ce6 <udi_cdc_multi_get_nb_received_data>:
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	8f b7       	in	r24, 0x3f	; 63
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	f8 94       	cli
     cf6:	29 81       	ldd	r18, Y+1	; 0x01
     cf8:	40 91 2f 23 	lds	r20, 0x232F	; 0x80232f <udi_cdc_rx_pos>
     cfc:	50 91 30 23 	lds	r21, 0x2330	; 0x802330 <udi_cdc_rx_pos+0x1>
     d00:	e0 91 31 23 	lds	r30, 0x2331	; 0x802331 <udi_cdc_rx_buf_sel>
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	ee 5c       	subi	r30, 0xCE	; 206
     d0c:	fc 4d       	sbci	r31, 0xDC	; 220
     d0e:	80 81       	ld	r24, Z
     d10:	91 81       	ldd	r25, Z+1	; 0x01
     d12:	84 1b       	sub	r24, r20
     d14:	95 0b       	sbc	r25, r21
     d16:	2f bf       	out	0x3f, r18	; 63
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     d20:	e2 df       	rcall	.-60     	; 0xce6 <udi_cdc_multi_get_nb_received_data>
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	89 2b       	or	r24, r25
     d26:	09 f4       	brne	.+2      	; 0xd2a <udi_cdc_multi_is_rx_ready+0xa>
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	82 2f       	mov	r24, r18
     d2c:	08 95       	ret

00000d2e <udi_cdc_rx_start>:
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	1f 92       	push	r1
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	8f b7       	in	r24, 0x3f	; 63
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	f8 94       	cli
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	20 91 31 23 	lds	r18, 0x2331	; 0x802331 <udi_cdc_rx_buf_sel>
     d48:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udi_cdc_rx_trans_ongoing>
     d4c:	81 11       	cpse	r24, r1
     d4e:	10 c0       	rjmp	.+32     	; 0xd70 <udi_cdc_rx_start+0x42>
     d50:	60 91 2f 23 	lds	r22, 0x232F	; 0x80232f <udi_cdc_rx_pos>
     d54:	70 91 30 23 	lds	r23, 0x2330	; 0x802330 <udi_cdc_rx_pos+0x1>
     d58:	02 2f       	mov	r16, r18
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	f8 01       	movw	r30, r16
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	ee 5c       	subi	r30, 0xCE	; 206
     d64:	fc 4d       	sbci	r31, 0xDC	; 220
     d66:	40 81       	ld	r20, Z
     d68:	51 81       	ldd	r21, Z+1	; 0x01
     d6a:	64 17       	cp	r22, r20
     d6c:	75 07       	cpc	r23, r21
     d6e:	18 f4       	brcc	.+6      	; 0xd76 <udi_cdc_rx_start+0x48>
     d70:	9f bf       	out	0x3f, r25	; 63
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	23 c0       	rjmp	.+70     	; 0xdbc <udi_cdc_rx_start+0x8e>
     d76:	10 92 2f 23 	sts	0x232F, r1	; 0x80232f <udi_cdc_rx_pos>
     d7a:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udi_cdc_rx_pos+0x1>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	21 11       	cpse	r18, r1
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	80 93 31 23 	sts	0x2331, r24	; 0x802331 <udi_cdc_rx_buf_sel>
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 2e 23 	sts	0x232E, r24	; 0x80232e <udi_cdc_rx_trans_ongoing>
     d8e:	9f bf       	out	0x3f, r25	; 63
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	c6 df       	rcall	.-116    	; 0xd20 <udi_cdc_multi_is_rx_ready>
     d94:	a8 01       	movw	r20, r16
     d96:	00 24       	eor	r0, r0
     d98:	56 95       	lsr	r21
     d9a:	47 95       	ror	r20
     d9c:	07 94       	ror	r0
     d9e:	56 95       	lsr	r21
     da0:	47 95       	ror	r20
     da2:	07 94       	ror	r0
     da4:	54 2f       	mov	r21, r20
     da6:	40 2d       	mov	r20, r0
     da8:	4a 5c       	subi	r20, 0xCA	; 202
     daa:	5c 4d       	sbci	r21, 0xDC	; 220
     dac:	06 e1       	ldi	r16, 0x16	; 22
     dae:	17 e0       	ldi	r17, 0x07	; 7
     db0:	20 e4       	ldi	r18, 0x40	; 64
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	82 e0       	ldi	r24, 0x02	; 2
     db8:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <udd_ep_run>
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <udi_cdc_data_enable>:
     dc8:	10 92 b7 23 	sts	0x23B7, r1	; 0x8023b7 <udi_cdc_nb_data_enabled>
     dcc:	10 92 a6 22 	sts	0x22A6, r1	; 0x8022a6 <udi_cdc_tx_trans_ongoing>
     dd0:	10 92 a5 22 	sts	0x22A5, r1	; 0x8022a5 <udi_cdc_tx_both_buf_to_send>
     dd4:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <udi_cdc_tx_buf_sel>
     dd8:	ea ea       	ldi	r30, 0xAA	; 170
     dda:	f2 e2       	ldi	r31, 0x22	; 34
     ddc:	10 82       	st	Z, r1
     dde:	11 82       	std	Z+1, r1	; 0x01
     de0:	12 82       	std	Z+2, r1	; 0x02
     de2:	13 82       	std	Z+3, r1	; 0x03
     de4:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udi_cdc_tx_sof_num>
     de8:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udi_cdc_tx_sof_num+0x1>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	13 de       	rcall	.-986    	; 0xa16 <udi_cdc_tx_send>
     df0:	10 92 2e 23 	sts	0x232E, r1	; 0x80232e <udi_cdc_rx_trans_ongoing>
     df4:	10 92 31 23 	sts	0x2331, r1	; 0x802331 <udi_cdc_rx_buf_sel>
     df8:	e2 e3       	ldi	r30, 0x32	; 50
     dfa:	f3 e2       	ldi	r31, 0x23	; 35
     dfc:	10 82       	st	Z, r1
     dfe:	11 82       	std	Z+1, r1	; 0x01
     e00:	12 82       	std	Z+2, r1	; 0x02
     e02:	13 82       	std	Z+3, r1	; 0x03
     e04:	10 92 2f 23 	sts	0x232F, r1	; 0x80232f <udi_cdc_rx_pos>
     e08:	10 92 30 23 	sts	0x2330, r1	; 0x802330 <udi_cdc_rx_pos+0x1>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	8f df       	rcall	.-226    	; 0xd2e <udi_cdc_rx_start>
     e10:	88 23       	and	r24, r24
     e12:	59 f0       	breq	.+22     	; 0xe2a <udi_cdc_data_enable+0x62>
     e14:	90 91 b7 23 	lds	r25, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     e18:	9f 5f       	subi	r25, 0xFF	; 255
     e1a:	90 93 b7 23 	sts	0x23B7, r25	; 0x8023b7 <udi_cdc_nb_data_enabled>
     e1e:	90 91 b7 23 	lds	r25, 0x23B7	; 0x8023b7 <udi_cdc_nb_data_enabled>
     e22:	91 30       	cpi	r25, 0x01	; 1
     e24:	11 f4       	brne	.+4      	; 0xe2a <udi_cdc_data_enable+0x62>
     e26:	90 93 b6 23 	sts	0x23B6, r25	; 0x8023b6 <udi_cdc_data_running>
     e2a:	08 95       	ret

00000e2c <udi_cdc_data_received>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	81 11       	cpse	r24, r1
     e32:	29 c0       	rjmp	.+82     	; 0xe86 <udi_cdc_data_received+0x5a>
     e34:	80 91 31 23 	lds	r24, 0x2331	; 0x802331 <udi_cdc_rx_buf_sel>
     e38:	e1 e0       	ldi	r30, 0x01	; 1
     e3a:	81 11       	cpse	r24, r1
     e3c:	e0 e0       	ldi	r30, 0x00	; 0
     e3e:	84 2f       	mov	r24, r20
     e40:	61 15       	cp	r22, r1
     e42:	71 05       	cpc	r23, r1
     e44:	a9 f4       	brne	.+42     	; 0xe70 <udi_cdc_data_received+0x44>
     e46:	4e 2f       	mov	r20, r30
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	00 24       	eor	r0, r0
     e4c:	56 95       	lsr	r21
     e4e:	47 95       	ror	r20
     e50:	07 94       	ror	r0
     e52:	56 95       	lsr	r21
     e54:	47 95       	ror	r20
     e56:	07 94       	ror	r0
     e58:	54 2f       	mov	r21, r20
     e5a:	40 2d       	mov	r20, r0
     e5c:	4a 5c       	subi	r20, 0xCA	; 202
     e5e:	5c 4d       	sbci	r21, 0xDC	; 220
     e60:	06 e1       	ldi	r16, 0x16	; 22
     e62:	17 e0       	ldi	r17, 0x07	; 7
     e64:	20 e4       	ldi	r18, 0x40	; 64
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <udd_ep_run>
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <udi_cdc_data_received+0x5a>
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	ee 5c       	subi	r30, 0xCE	; 206
     e78:	fc 4d       	sbci	r31, 0xDC	; 220
     e7a:	60 83       	st	Z, r22
     e7c:	71 83       	std	Z+1, r23	; 0x01
     e7e:	10 92 2e 23 	sts	0x232E, r1	; 0x80232e <udi_cdc_rx_trans_ongoing>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	54 df       	rcall	.-344    	; 0xd2e <udi_cdc_rx_start>
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	08 95       	ret

00000e8c <udc_get_string_serial_name>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     e8c:	8d eb       	ldi	r24, 0xBD	; 189
     e8e:	91 e2       	ldi	r25, 0x21	; 33
     e90:	08 95       	ret

00000e92 <udc_get_eof_conf>:
     e92:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
     e96:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
     e9a:	01 90       	ld	r0, Z+
     e9c:	f0 81       	ld	r31, Z
     e9e:	e0 2d       	mov	r30, r0
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	8e 0f       	add	r24, r30
     ea6:	9f 1f       	adc	r25, r31
     ea8:	08 95       	ret

00000eaa <udc_next_desc_in_iface>:
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	16 2f       	mov	r17, r22
     eb4:	ee df       	rcall	.-36     	; 0xe92 <udc_get_eof_conf>
     eb6:	9c 01       	movw	r18, r24
     eb8:	88 81       	ld	r24, Y
     eba:	fe 01       	movw	r30, r28
     ebc:	e8 0f       	add	r30, r24
     ebe:	f1 1d       	adc	r31, r1
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <udc_next_desc_in_iface+0x28>
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	94 30       	cpi	r25, 0x04	; 4
     ec6:	59 f0       	breq	.+22     	; 0xede <udc_next_desc_in_iface+0x34>
     ec8:	91 17       	cp	r25, r17
     eca:	61 f0       	breq	.+24     	; 0xee4 <udc_next_desc_in_iface+0x3a>
     ecc:	90 81       	ld	r25, Z
     ece:	e9 0f       	add	r30, r25
     ed0:	f1 1d       	adc	r31, r1
     ed2:	e2 17       	cp	r30, r18
     ed4:	f3 07       	cpc	r31, r19
     ed6:	a8 f3       	brcs	.-22     	; 0xec2 <udc_next_desc_in_iface+0x18>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <udc_next_desc_in_iface+0x3e>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <udc_next_desc_in_iface+0x3e>
     ee4:	8e 2f       	mov	r24, r30
     ee6:	9f 2f       	mov	r25, r31
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	08 95       	ret

00000ef0 <udc_update_iface_desc>:
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udc_num_configuration>
     ef8:	99 23       	and	r25, r25
     efa:	61 f1       	breq	.+88     	; 0xf54 <udc_update_iface_desc+0x64>
     efc:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
     f00:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
     f04:	01 90       	ld	r0, Z+
     f06:	f0 81       	ld	r31, Z
     f08:	e0 2d       	mov	r30, r0
     f0a:	94 81       	ldd	r25, Z+4	; 0x04
     f0c:	89 17       	cp	r24, r25
     f0e:	20 f5       	brcc	.+72     	; 0xf58 <udc_update_iface_desc+0x68>
     f10:	d6 2f       	mov	r29, r22
     f12:	c8 2f       	mov	r28, r24
     f14:	e0 93 d0 23 	sts	0x23D0, r30	; 0x8023d0 <udc_ptr_iface>
     f18:	f0 93 d1 23 	sts	0x23D1, r31	; 0x8023d1 <udc_ptr_iface+0x1>
     f1c:	ba df       	rcall	.-140    	; 0xe92 <udc_get_eof_conf>
     f1e:	9c 01       	movw	r18, r24
     f20:	10 c0       	rjmp	.+32     	; 0xf42 <udc_update_iface_desc+0x52>
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	94 30       	cpi	r25, 0x04	; 4
     f26:	31 f4       	brne	.+12     	; 0xf34 <udc_update_iface_desc+0x44>
     f28:	82 81       	ldd	r24, Z+2	; 0x02
     f2a:	c8 13       	cpse	r28, r24
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <udc_update_iface_desc+0x44>
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	8d 17       	cp	r24, r29
     f32:	a1 f0       	breq	.+40     	; 0xf5c <udc_update_iface_desc+0x6c>
     f34:	90 81       	ld	r25, Z
     f36:	e9 0f       	add	r30, r25
     f38:	f1 1d       	adc	r31, r1
     f3a:	e0 93 d0 23 	sts	0x23D0, r30	; 0x8023d0 <udc_ptr_iface>
     f3e:	f0 93 d1 23 	sts	0x23D1, r31	; 0x8023d1 <udc_ptr_iface+0x1>
     f42:	e0 91 d0 23 	lds	r30, 0x23D0	; 0x8023d0 <udc_ptr_iface>
     f46:	f0 91 d1 23 	lds	r31, 0x23D1	; 0x8023d1 <udc_ptr_iface+0x1>
     f4a:	e2 17       	cp	r30, r18
     f4c:	f3 07       	cpc	r31, r19
     f4e:	48 f3       	brcs	.-46     	; 0xf22 <udc_update_iface_desc+0x32>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <udc_update_iface_desc+0x6e>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <udc_update_iface_desc+0x6e>
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <udc_update_iface_desc+0x6e>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <udc_req_std_dev_clear_feature>:
     f64:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
     f68:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
     f6c:	89 2b       	or	r24, r25
     f6e:	89 f4       	brne	.+34     	; 0xf92 <udc_req_std_dev_clear_feature+0x2e>
     f70:	80 91 8f 26 	lds	r24, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
     f74:	90 91 90 26 	lds	r25, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	69 f4       	brne	.+26     	; 0xf96 <udc_req_std_dev_clear_feature+0x32>
     f7c:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <udc_device_status>
     f80:	90 91 d9 23 	lds	r25, 0x23D9	; 0x8023d9 <udc_device_status+0x1>
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udc_device_status>
     f8a:	90 93 d9 23 	sts	0x23D9, r25	; 0x8023d9 <udc_device_status+0x1>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	08 95       	ret
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	08 95       	ret
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	08 95       	ret

00000f9a <udc_req_std_dev_set_feature>:
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret

00000f9e <udc_req_std_dev_set_address>:
     f9e:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
     fa2:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
     fa6:	89 2b       	or	r24, r25
     fa8:	41 f4       	brne	.+16     	; 0xfba <udc_req_std_dev_set_address+0x1c>
     faa:	8a ec       	ldi	r24, 0xCA	; 202
     fac:	99 e0       	ldi	r25, 0x09	; 9
     fae:	80 93 99 26 	sts	0x2699, r24	; 0x802699 <udd_g_ctrlreq+0xc>
     fb2:	90 93 9a 26 	sts	0x269A, r25	; 0x80269a <udd_g_ctrlreq+0xd>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <udc_req_iface>:
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
     fca:	88 23       	and	r24, r24
     fcc:	99 f1       	breq	.+102    	; 0x1034 <udc_req_iface+0x76>
     fce:	c0 91 91 26 	lds	r28, 0x2691	; 0x802691 <udd_g_ctrlreq+0x4>
     fd2:	d0 91 92 26 	lds	r29, 0x2692	; 0x802692 <udd_g_ctrlreq+0x5>
     fd6:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
     fda:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
     fde:	01 90       	ld	r0, Z+
     fe0:	f0 81       	ld	r31, Z
     fe2:	e0 2d       	mov	r30, r0
     fe4:	84 81       	ldd	r24, Z+4	; 0x04
     fe6:	c8 17       	cp	r28, r24
     fe8:	38 f5       	brcc	.+78     	; 0x1038 <udc_req_iface+0x7a>
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	8c 2f       	mov	r24, r28
     fee:	80 df       	rcall	.-256    	; 0xef0 <udc_update_iface_desc>
     ff0:	88 23       	and	r24, r24
     ff2:	19 f1       	breq	.+70     	; 0x103a <udc_req_iface+0x7c>
     ff4:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
     ff8:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	fe 01       	movw	r30, r28
    1002:	ff 27       	eor	r31, r31
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	e8 0f       	add	r30, r24
    100a:	f9 1f       	adc	r31, r25
    100c:	00 81       	ld	r16, Z
    100e:	11 81       	ldd	r17, Z+1	; 0x01
    1010:	d8 01       	movw	r26, r16
    1012:	16 96       	adiw	r26, 0x06	; 6
    1014:	ed 91       	ld	r30, X+
    1016:	fc 91       	ld	r31, X
    1018:	17 97       	sbiw	r26, 0x07	; 7
    101a:	19 95       	eicall
    101c:	68 2f       	mov	r22, r24
    101e:	8c 2f       	mov	r24, r28
    1020:	67 df       	rcall	.-306    	; 0xef0 <udc_update_iface_desc>
    1022:	88 23       	and	r24, r24
    1024:	51 f0       	breq	.+20     	; 0x103a <udc_req_iface+0x7c>
    1026:	d8 01       	movw	r26, r16
    1028:	14 96       	adiw	r26, 0x04	; 4
    102a:	ed 91       	ld	r30, X+
    102c:	fc 91       	ld	r31, X
    102e:	15 97       	sbiw	r26, 0x05	; 5
    1030:	19 95       	eicall
    1032:	03 c0       	rjmp	.+6      	; 0x103a <udc_req_iface+0x7c>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	01 c0       	rjmp	.+2      	; 0x103a <udc_req_iface+0x7c>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <udc_req_ep>:
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
    104e:	88 23       	and	r24, r24
    1050:	61 f1       	breq	.+88     	; 0x10aa <udc_req_ep+0x66>
    1052:	c0 e0       	ldi	r28, 0x00	; 0
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <udc_req_ep+0x4e>
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	ec 2f       	mov	r30, r28
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ee 0f       	add	r30, r30
    1060:	ff 1f       	adc	r31, r31
    1062:	e8 0f       	add	r30, r24
    1064:	f9 1f       	adc	r31, r25
    1066:	00 81       	ld	r16, Z
    1068:	11 81       	ldd	r17, Z+1	; 0x01
    106a:	d8 01       	movw	r26, r16
    106c:	16 96       	adiw	r26, 0x06	; 6
    106e:	ed 91       	ld	r30, X+
    1070:	fc 91       	ld	r31, X
    1072:	17 97       	sbiw	r26, 0x07	; 7
    1074:	19 95       	eicall
    1076:	68 2f       	mov	r22, r24
    1078:	8c 2f       	mov	r24, r28
    107a:	3a df       	rcall	.-396    	; 0xef0 <udc_update_iface_desc>
    107c:	88 23       	and	r24, r24
    107e:	b1 f0       	breq	.+44     	; 0x10ac <udc_req_ep+0x68>
    1080:	d8 01       	movw	r26, r16
    1082:	14 96       	adiw	r26, 0x04	; 4
    1084:	ed 91       	ld	r30, X+
    1086:	fc 91       	ld	r31, X
    1088:	15 97       	sbiw	r26, 0x05	; 5
    108a:	19 95       	eicall
    108c:	81 11       	cpse	r24, r1
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <udc_req_ep+0x68>
    1090:	cf 5f       	subi	r28, 0xFF	; 255
    1092:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    1096:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    109a:	a0 81       	ld	r26, Z
    109c:	b1 81       	ldd	r27, Z+1	; 0x01
    109e:	14 96       	adiw	r26, 0x04	; 4
    10a0:	8c 91       	ld	r24, X
    10a2:	c8 17       	cp	r28, r24
    10a4:	c0 f2       	brcs	.-80     	; 0x1056 <udc_req_ep+0x12>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	01 c0       	rjmp	.+2      	; 0x10ac <udc_req_ep+0x68>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	08 95       	ret

000010b4 <udc_iface_disable>:
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	c8 2f       	mov	r28, r24
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	16 df       	rcall	.-468    	; 0xef0 <udc_update_iface_desc>
    10c4:	18 2f       	mov	r17, r24
    10c6:	88 23       	and	r24, r24
    10c8:	71 f1       	breq	.+92     	; 0x1126 <udc_iface_disable+0x72>
    10ca:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    10ce:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	93 81       	ldd	r25, Z+3	; 0x03
    10d6:	ec 2f       	mov	r30, r28
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	e8 0f       	add	r30, r24
    10e0:	f9 1f       	adc	r31, r25
    10e2:	e0 80       	ld	r14, Z
    10e4:	f1 80       	ldd	r15, Z+1	; 0x01
    10e6:	d7 01       	movw	r26, r14
    10e8:	16 96       	adiw	r26, 0x06	; 6
    10ea:	ed 91       	ld	r30, X+
    10ec:	fc 91       	ld	r31, X
    10ee:	17 97       	sbiw	r26, 0x07	; 7
    10f0:	19 95       	eicall
    10f2:	68 2f       	mov	r22, r24
    10f4:	8c 2f       	mov	r24, r28
    10f6:	fc de       	rcall	.-520    	; 0xef0 <udc_update_iface_desc>
    10f8:	18 2f       	mov	r17, r24
    10fa:	88 23       	and	r24, r24
    10fc:	a1 f0       	breq	.+40     	; 0x1126 <udc_iface_disable+0x72>
    10fe:	c0 91 d0 23 	lds	r28, 0x23D0	; 0x8023d0 <udc_ptr_iface>
    1102:	d0 91 d1 23 	lds	r29, 0x23D1	; 0x8023d1 <udc_ptr_iface+0x1>
    1106:	65 e0       	ldi	r22, 0x05	; 5
    1108:	ce 01       	movw	r24, r28
    110a:	cf de       	rcall	.-610    	; 0xeaa <udc_next_desc_in_iface>
    110c:	ec 01       	movw	r28, r24
    110e:	89 2b       	or	r24, r25
    1110:	21 f0       	breq	.+8      	; 0x111a <udc_iface_disable+0x66>
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	0e 94 9a 1c 	call	0x3934	; 0x3934 <udd_ep_free>
    1118:	f6 cf       	rjmp	.-20     	; 0x1106 <udc_iface_disable+0x52>
    111a:	d7 01       	movw	r26, r14
    111c:	12 96       	adiw	r26, 0x02	; 2
    111e:	ed 91       	ld	r30, X+
    1120:	fc 91       	ld	r31, X
    1122:	13 97       	sbiw	r26, 0x03	; 3
    1124:	19 95       	eicall
    1126:	81 2f       	mov	r24, r17
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	1f 91       	pop	r17
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	08 95       	ret

00001134 <udc_req_std_dev_get_status>:
    1134:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    1138:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    113c:	02 97       	sbiw	r24, 0x02	; 2
    113e:	41 f4       	brne	.+16     	; 0x1150 <udc_req_std_dev_get_status+0x1c>
    1140:	62 e0       	ldi	r22, 0x02	; 2
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	88 ed       	ldi	r24, 0xD8	; 216
    1146:	93 e2       	ldi	r25, 0x23	; 35
    1148:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <udc_req_std_dev_get_str_desc>:
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	80 91 8f 26 	lds	r24, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    115c:	90 91 90 26 	lds	r25, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
    1160:	99 27       	eor	r25, r25
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	39 f0       	breq	.+14     	; 0x1176 <udc_req_std_dev_get_str_desc+0x22>
    1168:	50 f0       	brcs	.+20     	; 0x117e <udc_req_std_dev_get_str_desc+0x2a>
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	99 f0       	breq	.+38     	; 0x1196 <udc_req_std_dev_get_str_desc+0x42>
    1170:	03 97       	sbiw	r24, 0x03	; 3
    1172:	69 f0       	breq	.+26     	; 0x118e <udc_req_std_dev_get_str_desc+0x3a>
    1174:	38 c0       	rjmp	.+112    	; 0x11e6 <udc_req_std_dev_get_str_desc+0x92>
    1176:	61 e1       	ldi	r22, 0x11	; 17
    1178:	cb ea       	ldi	r28, 0xAB	; 171
    117a:	d0 e2       	ldi	r29, 0x20	; 32
    117c:	0f c0       	rjmp	.+30     	; 0x119c <udc_req_std_dev_get_str_desc+0x48>
    117e:	64 e0       	ldi	r22, 0x04	; 4
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	8e eb       	ldi	r24, 0xBE	; 190
    1184:	90 e2       	ldi	r25, 0x20	; 32
    1186:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	07 c0       	rjmp	.+14     	; 0x119c <udc_req_std_dev_get_str_desc+0x48>
    118e:	7e de       	rcall	.-772    	; 0xe8c <udc_get_string_serial_name>
    1190:	ec 01       	movw	r28, r24
    1192:	67 e0       	ldi	r22, 0x07	; 7
    1194:	03 c0       	rjmp	.+6      	; 0x119c <udc_req_std_dev_get_str_desc+0x48>
    1196:	6e e0       	ldi	r22, 0x0E	; 14
    1198:	cc e9       	ldi	r28, 0x9C	; 156
    119a:	d0 e2       	ldi	r29, 0x20	; 32
    119c:	61 11       	cpse	r22, r1
    119e:	13 c0       	rjmp	.+38     	; 0x11c6 <udc_req_std_dev_get_str_desc+0x72>
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	22 c0       	rjmp	.+68     	; 0x11e8 <udc_req_std_dev_get_str_desc+0x94>
    11a4:	82 2f       	mov	r24, r18
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fe 01       	movw	r30, r28
    11aa:	e8 0f       	add	r30, r24
    11ac:	f9 1f       	adc	r31, r25
    11ae:	40 81       	ld	r20, Z
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	31 96       	adiw	r30, 0x01	; 1
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	e8 58       	subi	r30, 0x88	; 136
    11bc:	ff 4d       	sbci	r31, 0xDF	; 223
    11be:	40 83       	st	Z, r20
    11c0:	51 83       	std	Z+1, r21	; 0x01
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <udc_req_std_dev_get_str_desc+0x74>
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	26 17       	cp	r18, r22
    11ca:	60 f3       	brcs	.-40     	; 0x11a4 <udc_req_std_dev_get_str_desc+0x50>
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	6f 5f       	subi	r22, 0xFF	; 255
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255
    11d2:	66 0f       	add	r22, r22
    11d4:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <udc_string_desc>
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	88 e7       	ldi	r24, 0x78	; 120
    11dc:	90 e2       	ldi	r25, 0x20	; 32
    11de:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	01 c0       	rjmp	.+2      	; 0x11e8 <udc_req_std_dev_get_str_desc+0x94>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <udc_req_std_dev_get_descriptor>:
    11ee:	20 91 8f 26 	lds	r18, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    11f2:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
    11f6:	83 2f       	mov	r24, r19
    11f8:	99 27       	eor	r25, r25
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	91 05       	cpc	r25, r1
    11fe:	a1 f0       	breq	.+40     	; 0x1228 <udc_req_std_dev_get_descriptor+0x3a>
    1200:	18 f4       	brcc	.+6      	; 0x1208 <udc_req_std_dev_get_descriptor+0x1a>
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	39 f0       	breq	.+14     	; 0x1214 <udc_req_std_dev_get_descriptor+0x26>
    1206:	4e c0       	rjmp	.+156    	; 0x12a4 <udc_req_std_dev_get_descriptor+0xb6>
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	c9 f1       	breq	.+114    	; 0x1280 <udc_req_std_dev_get_descriptor+0x92>
    120e:	0f 97       	sbiw	r24, 0x0f	; 15
    1210:	59 f1       	breq	.+86     	; 0x1268 <udc_req_std_dev_get_descriptor+0x7a>
    1212:	48 c0       	rjmp	.+144    	; 0x12a4 <udc_req_std_dev_get_descriptor+0xb6>
    1214:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <udc_config>
    1218:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <udc_config+0x1>
    121c:	fc 01       	movw	r30, r24
    121e:	60 81       	ld	r22, Z
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    1226:	2f c0       	rjmp	.+94     	; 0x1286 <udc_req_std_dev_get_descriptor+0x98>
    1228:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    122c:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    1230:	81 89       	ldd	r24, Z+17	; 0x11
    1232:	28 17       	cp	r18, r24
    1234:	c8 f5       	brcc	.+114    	; 0x12a8 <udc_req_std_dev_get_descriptor+0xba>
    1236:	e0 91 16 20 	lds	r30, 0x2016	; 0x802016 <udc_config+0x2>
    123a:	f0 91 17 20 	lds	r31, 0x2017	; 0x802017 <udc_config+0x3>
    123e:	33 27       	eor	r19, r19
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	22 0f       	add	r18, r18
    1246:	33 1f       	adc	r19, r19
    1248:	e2 0f       	add	r30, r18
    124a:	f3 1f       	adc	r31, r19
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	fc 01       	movw	r30, r24
    1252:	62 81       	ldd	r22, Z+2	; 0x02
    1254:	73 81       	ldd	r23, Z+3	; 0x03
    1256:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    125a:	e0 91 95 26 	lds	r30, 0x2695	; 0x802695 <udd_g_ctrlreq+0x8>
    125e:	f0 91 96 26 	lds	r31, 0x2696	; 0x802696 <udd_g_ctrlreq+0x9>
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	81 83       	std	Z+1, r24	; 0x01
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <udc_req_std_dev_get_descriptor+0x98>
    1268:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <udc_config+0x4>
    126c:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <udc_config+0x5>
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	e1 f0       	breq	.+56     	; 0x12ac <udc_req_std_dev_get_descriptor+0xbe>
    1274:	fc 01       	movw	r30, r24
    1276:	62 81       	ldd	r22, Z+2	; 0x02
    1278:	73 81       	ldd	r23, Z+3	; 0x03
    127a:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <udc_req_std_dev_get_descriptor+0x98>
    1280:	69 df       	rcall	.-302    	; 0x1154 <udc_req_std_dev_get_str_desc>
    1282:	88 23       	and	r24, r24
    1284:	b1 f0       	breq	.+44     	; 0x12b2 <udc_req_std_dev_get_descriptor+0xc4>
    1286:	ed e8       	ldi	r30, 0x8D	; 141
    1288:	f6 e2       	ldi	r31, 0x26	; 38
    128a:	86 81       	ldd	r24, Z+6	; 0x06
    128c:	97 81       	ldd	r25, Z+7	; 0x07
    128e:	22 85       	ldd	r18, Z+10	; 0x0a
    1290:	33 85       	ldd	r19, Z+11	; 0x0b
    1292:	82 17       	cp	r24, r18
    1294:	93 07       	cpc	r25, r19
    1296:	60 f4       	brcc	.+24     	; 0x12b0 <udc_req_std_dev_get_descriptor+0xc2>
    1298:	80 93 97 26 	sts	0x2697, r24	; 0x802697 <udd_g_ctrlreq+0xa>
    129c:	90 93 98 26 	sts	0x2698, r25	; 0x802698 <udd_g_ctrlreq+0xb>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	08 95       	ret
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	08 95       	ret
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	08 95       	ret

000012b4 <udc_req_std_dev_get_configuration>:
    12b4:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    12b8:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	41 f4       	brne	.+16     	; 0x12d0 <udc_req_std_dev_get_configuration+0x1c>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	84 ed       	ldi	r24, 0xD4	; 212
    12c6:	93 e2       	ldi	r25, 0x23	; 35
    12c8:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	08 95       	ret
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	08 95       	ret

000012d4 <udc_req_std_iface_get_setting>:
    12d4:	0f 93       	push	r16
    12d6:	1f 93       	push	r17
    12d8:	cf 93       	push	r28
    12da:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    12de:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	a1 f5       	brne	.+104    	; 0x134e <udc_req_std_iface_get_setting+0x7a>
    12e6:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
    12ea:	88 23       	and	r24, r24
    12ec:	91 f1       	breq	.+100    	; 0x1352 <udc_req_std_iface_get_setting+0x7e>
    12ee:	00 91 91 26 	lds	r16, 0x2691	; 0x802691 <udd_g_ctrlreq+0x4>
    12f2:	10 91 92 26 	lds	r17, 0x2692	; 0x802692 <udd_g_ctrlreq+0x5>
    12f6:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    12fa:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    12fe:	01 90       	ld	r0, Z+
    1300:	f0 81       	ld	r31, Z
    1302:	e0 2d       	mov	r30, r0
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	08 17       	cp	r16, r24
    1308:	30 f5       	brcc	.+76     	; 0x1356 <udc_req_std_iface_get_setting+0x82>
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	80 2f       	mov	r24, r16
    130e:	f0 dd       	rcall	.-1056   	; 0xef0 <udc_update_iface_desc>
    1310:	c8 2f       	mov	r28, r24
    1312:	88 23       	and	r24, r24
    1314:	09 f1       	breq	.+66     	; 0x1358 <udc_req_std_iface_get_setting+0x84>
    1316:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    131a:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    131e:	02 80       	ldd	r0, Z+2	; 0x02
    1320:	f3 81       	ldd	r31, Z+3	; 0x03
    1322:	e0 2d       	mov	r30, r0
    1324:	11 27       	eor	r17, r17
    1326:	00 0f       	add	r16, r16
    1328:	11 1f       	adc	r17, r17
    132a:	e0 0f       	add	r30, r16
    132c:	f1 1f       	adc	r31, r17
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	06 80       	ldd	r0, Z+6	; 0x06
    1336:	f7 81       	ldd	r31, Z+7	; 0x07
    1338:	e0 2d       	mov	r30, r0
    133a:	19 95       	eicall
    133c:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <udc_iface_setting>
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	86 ed       	ldi	r24, 0xD6	; 214
    1346:	93 e2       	ldi	r25, 0x23	; 35
    1348:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <udc_req_std_iface_get_setting+0x84>
    134e:	c0 e0       	ldi	r28, 0x00	; 0
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <udc_req_std_iface_get_setting+0x84>
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <udc_req_std_iface_get_setting+0x84>
    1356:	c0 e0       	ldi	r28, 0x00	; 0
    1358:	8c 2f       	mov	r24, r28
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <udc_req_std_ep_get_status>:
    1362:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    1366:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    136a:	02 97       	sbiw	r24, 0x02	; 2
    136c:	89 f4       	brne	.+34     	; 0x1390 <udc_req_std_ep_get_status+0x2e>
    136e:	80 91 91 26 	lds	r24, 0x2691	; 0x802691 <udd_g_ctrlreq+0x4>
    1372:	0e 94 38 1a 	call	0x3470	; 0x3470 <udd_ep_is_halted>
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	80 93 ce 23 	sts	0x23CE, r24	; 0x8023ce <udc_ep_status.4980>
    137c:	90 93 cf 23 	sts	0x23CF, r25	; 0x8023cf <udc_ep_status.4980+0x1>
    1380:	62 e0       	ldi	r22, 0x02	; 2
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	8e ec       	ldi	r24, 0xCE	; 206
    1386:	93 e2       	ldi	r25, 0x23	; 35
    1388:	0e 94 b8 19 	call	0x3370	; 0x3370 <udd_set_setup_payload>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	08 95       	ret
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret

00001394 <udc_valid_address>:
    1394:	80 91 8f 26 	lds	r24, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    1398:	8f 77       	andi	r24, 0x7F	; 127
    139a:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <udd_set_address>
    139e:	08 95       	ret

000013a0 <udc_iface_enable>:
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	18 2f       	mov	r17, r24
    13a8:	a3 dd       	rcall	.-1210   	; 0xef0 <udc_update_iface_desc>
    13aa:	88 23       	and	r24, r24
    13ac:	31 f1       	breq	.+76     	; 0x13fa <udc_iface_enable+0x5a>
    13ae:	c0 91 d0 23 	lds	r28, 0x23D0	; 0x8023d0 <udc_ptr_iface>
    13b2:	d0 91 d1 23 	lds	r29, 0x23D1	; 0x8023d1 <udc_ptr_iface+0x1>
    13b6:	65 e0       	ldi	r22, 0x05	; 5
    13b8:	ce 01       	movw	r24, r28
    13ba:	77 dd       	rcall	.-1298   	; 0xeaa <udc_next_desc_in_iface>
    13bc:	ec 01       	movw	r28, r24
    13be:	89 2b       	or	r24, r25
    13c0:	49 f0       	breq	.+18     	; 0x13d4 <udc_iface_enable+0x34>
    13c2:	4c 81       	ldd	r20, Y+4	; 0x04
    13c4:	5d 81       	ldd	r21, Y+5	; 0x05
    13c6:	6b 81       	ldd	r22, Y+3	; 0x03
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	0e 94 c9 19 	call	0x3392	; 0x3392 <udd_ep_alloc>
    13ce:	81 11       	cpse	r24, r1
    13d0:	f2 cf       	rjmp	.-28     	; 0x13b6 <udc_iface_enable+0x16>
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <udc_iface_enable+0x5a>
    13d4:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    13d8:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	e1 2f       	mov	r30, r17
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e8 0f       	add	r30, r24
    13ea:	f9 1f       	adc	r31, r25
    13ec:	01 90       	ld	r0, Z+
    13ee:	f0 81       	ld	r31, Z
    13f0:	e0 2d       	mov	r30, r0
    13f2:	01 90       	ld	r0, Z+
    13f4:	f0 81       	ld	r31, Z
    13f6:	e0 2d       	mov	r30, r0
    13f8:	19 95       	eicall
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	08 95       	ret

00001402 <udc_req_std_iface_set_setting>:
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    140a:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    140e:	89 2b       	or	r24, r25
    1410:	81 f4       	brne	.+32     	; 0x1432 <udc_req_std_iface_set_setting+0x30>
    1412:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
    1416:	88 23       	and	r24, r24
    1418:	71 f0       	breq	.+28     	; 0x1436 <udc_req_std_iface_set_setting+0x34>
    141a:	ed e8       	ldi	r30, 0x8D	; 141
    141c:	f6 e2       	ldi	r31, 0x26	; 38
    141e:	c4 81       	ldd	r28, Z+4	; 0x04
    1420:	d2 81       	ldd	r29, Z+2	; 0x02
    1422:	8c 2f       	mov	r24, r28
    1424:	47 de       	rcall	.-882    	; 0x10b4 <udc_iface_disable>
    1426:	88 23       	and	r24, r24
    1428:	39 f0       	breq	.+14     	; 0x1438 <udc_req_std_iface_set_setting+0x36>
    142a:	6d 2f       	mov	r22, r29
    142c:	8c 2f       	mov	r24, r28
    142e:	b8 df       	rcall	.-144    	; 0x13a0 <udc_iface_enable>
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <udc_req_std_iface_set_setting+0x36>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <udc_req_std_iface_set_setting+0x36>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <udc_req_std_ep_clear_feature>:
    143e:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    1442:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    1446:	89 2b       	or	r24, r25
    1448:	59 f4       	brne	.+22     	; 0x1460 <udc_req_std_ep_clear_feature+0x22>
    144a:	80 91 8f 26 	lds	r24, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    144e:	90 91 90 26 	lds	r25, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
    1452:	89 2b       	or	r24, r25
    1454:	39 f4       	brne	.+14     	; 0x1464 <udc_req_std_ep_clear_feature+0x26>
    1456:	80 91 91 26 	lds	r24, 0x2691	; 0x802691 <udd_g_ctrlreq+0x4>
    145a:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <udd_ep_clear_halt>
    145e:	08 95       	ret
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	08 95       	ret
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	08 95       	ret

00001468 <udc_req_std_ep_set_feature>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    1470:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    1474:	89 2b       	or	r24, r25
    1476:	79 f4       	brne	.+30     	; 0x1496 <udc_req_std_ep_set_feature+0x2e>
    1478:	80 91 8f 26 	lds	r24, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    147c:	90 91 90 26 	lds	r25, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
    1480:	89 2b       	or	r24, r25
    1482:	59 f4       	brne	.+22     	; 0x149a <udc_req_std_ep_set_feature+0x32>
    1484:	cd e8       	ldi	r28, 0x8D	; 141
    1486:	d6 e2       	ldi	r29, 0x26	; 38
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	0e 94 b7 1b 	call	0x376e	; 0x376e <udd_ep_abort>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	0e 94 ef 1c 	call	0x39de	; 0x39de <udd_ep_set_halt>
    1494:	03 c0       	rjmp	.+6      	; 0x149c <udc_req_std_ep_set_feature+0x34>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	01 c0       	rjmp	.+2      	; 0x149c <udc_req_std_ep_set_feature+0x34>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <udc_reset>:
    14a2:	cf 93       	push	r28
    14a4:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
    14a8:	81 11       	cpse	r24, r1
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <udc_reset+0x14>
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <udc_reset+0x2a>
    14ae:	8c 2f       	mov	r24, r28
    14b0:	01 de       	rcall	.-1022   	; 0x10b4 <udc_iface_disable>
    14b2:	cf 5f       	subi	r28, 0xFF	; 255
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <udc_reset+0x16>
    14b6:	c0 e0       	ldi	r28, 0x00	; 0
    14b8:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    14bc:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	84 81       	ldd	r24, Z+4	; 0x04
    14c8:	c8 17       	cp	r28, r24
    14ca:	88 f3       	brcs	.-30     	; 0x14ae <udc_reset+0xc>
    14cc:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udc_num_configuration>
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <udc_device_status>
    14d8:	90 93 d9 23 	sts	0x23D9, r25	; 0x8023d9 <udc_device_status+0x1>
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    14e0:	cf 93       	push	r28
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    14e2:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    14e6:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    14ea:	89 2b       	or	r24, r25
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <udc_req_std_dev_set_configuration+0x10>
    14ee:	40 c0       	rjmp	.+128    	; 0x1570 <udc_req_std_dev_set_configuration+0x90>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    14f0:	0e 94 ad 19 	call	0x335a	; 0x335a <udd_getaddress>
    14f4:	88 23       	and	r24, r24
    14f6:	09 f4       	brne	.+2      	; 0x14fa <udc_req_std_dev_set_configuration+0x1a>
    14f8:	3d c0       	rjmp	.+122    	; 0x1574 <udc_req_std_dev_set_configuration+0x94>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    14fa:	20 91 8f 26 	lds	r18, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    14fe:	30 91 90 26 	lds	r19, 0x2690	; 0x802690 <udd_g_ctrlreq+0x3>
    1502:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1504:	e0 91 14 20 	lds	r30, 0x2014	; 0x802014 <udc_config>
    1508:	f0 91 15 20 	lds	r31, 0x2015	; 0x802015 <udc_config+0x1>
    150c:	81 89       	ldd	r24, Z+17	; 0x11
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1514:	88 f1       	brcs	.+98     	; 0x1578 <udc_req_std_dev_set_configuration+0x98>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1516:	c5 df       	rcall	.-118    	; 0x14a2 <udc_reset>
    1518:	90 91 8f 26 	lds	r25, 0x268F	; 0x80268f <udd_g_ctrlreq+0x2>
    151c:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1520:	99 23       	and	r25, r25
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1522:	61 f1       	breq	.+88     	; 0x157c <udc_req_std_dev_set_configuration+0x9c>
    1524:	20 91 16 20 	lds	r18, 0x2016	; 0x802016 <udc_config+0x2>
    1528:	30 91 17 20 	lds	r19, 0x2017	; 0x802017 <udc_config+0x3>
    152c:	89 2f       	mov	r24, r25
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	81 50       	subi	r24, 0x01	; 1
    1532:	90 4c       	sbci	r25, 0xC0	; 192
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	80 93 d2 23 	sts	0x23D2, r24	; 0x8023d2 <udc_ptr_conf>
    1544:	90 93 d3 23 	sts	0x23D3, r25	; 0x8023d3 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1548:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    154a:	06 c0       	rjmp	.+12     	; 0x1558 <udc_req_std_dev_set_configuration+0x78>
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	8c 2f       	mov	r24, r28
    1550:	27 df       	rcall	.-434    	; 0x13a0 <udc_iface_enable>
    1552:	88 23       	and	r24, r24
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1554:	a1 f0       	breq	.+40     	; 0x157e <udc_req_std_dev_set_configuration+0x9e>
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1556:	cf 5f       	subi	r28, 0xFF	; 255
    1558:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    155c:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    1560:	01 90       	ld	r0, Z+
    1562:	f0 81       	ld	r31, Z
    1564:	e0 2d       	mov	r30, r0
    1566:	84 81       	ldd	r24, Z+4	; 0x04
    1568:	c8 17       	cp	r28, r24
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    156a:	80 f3       	brcs	.-32     	; 0x154c <udc_req_std_dev_set_configuration+0x6c>
    156c:	81 e0       	ldi	r24, 0x01	; 1
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    156e:	07 c0       	rjmp	.+14     	; 0x157e <udc_req_std_dev_set_configuration+0x9e>
    1570:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
    1572:	05 c0       	rjmp	.+10     	; 0x157e <udc_req_std_dev_set_configuration+0x9e>
    1574:	80 e0       	ldi	r24, 0x00	; 0
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    1576:	03 c0       	rjmp	.+6      	; 0x157e <udc_req_std_dev_set_configuration+0x9e>
    1578:	80 e0       	ldi	r24, 0x00	; 0
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
    157a:	01 c0       	rjmp	.+2      	; 0x157e <udc_req_std_dev_set_configuration+0x9e>
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
}
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	cf 91       	pop	r28
    1580:	08 95       	ret

00001582 <udc_reqstd>:
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
    1582:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <udd_g_ctrlreq>
    1586:	88 23       	and	r24, r24
    1588:	3c f5       	brge	.+78     	; 0x15d8 <udc_reqstd+0x56>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    158a:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    158e:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    1592:	23 2b       	or	r18, r19
    1594:	09 f4       	brne	.+2      	; 0x1598 <udc_reqstd+0x16>
    1596:	4c c0       	rjmp	.+152    	; 0x1630 <udc_reqstd+0xae>
    1598:	8f 71       	andi	r24, 0x1F	; 31
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    159a:	71 f4       	brne	.+28     	; 0x15b8 <udc_reqstd+0x36>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    159c:	90 91 8e 26 	lds	r25, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
    15a0:	96 30       	cpi	r25, 0x06	; 6
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <udc_reqstd+0x2e>
    15a4:	98 30       	cpi	r25, 0x08	; 8
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <udc_reqstd+0x32>
    15a8:	91 11       	cpse	r25, r1
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <udc_reqstd+0x36>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    15ac:	c3 cd       	rjmp	.-1146   	; 0x1134 <udc_req_std_dev_get_status>
    15ae:	08 95       	ret
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    15b0:	1e ce       	rjmp	.-964    	; 0x11ee <udc_req_std_dev_get_descriptor>
    15b2:	08 95       	ret
    15b4:	7f ce       	rjmp	.-770    	; 0x12b4 <udc_req_std_dev_get_configuration>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    15b6:	08 95       	ret
    15b8:	81 30       	cpi	r24, 0x01	; 1
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    15ba:	31 f4       	brne	.+12     	; 0x15c8 <udc_reqstd+0x46>
    15bc:	90 91 8e 26 	lds	r25, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    15c0:	9a 30       	cpi	r25, 0x0A	; 10
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <udc_reqstd+0x46>
    15c4:	87 ce       	rjmp	.-754    	; 0x12d4 <udc_req_std_iface_get_setting>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    15c6:	08 95       	ret
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	a1 f5       	brne	.+104    	; 0x1634 <udc_reqstd+0xb2>
    15cc:	80 91 8e 26 	lds	r24, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    15d0:	81 11       	cpse	r24, r1
    15d2:	32 c0       	rjmp	.+100    	; 0x1638 <udc_reqstd+0xb6>
    15d4:	c6 ce       	rjmp	.-628    	; 0x1362 <udc_req_std_ep_get_status>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    15d6:	08 95       	ret
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    15d8:	8f 71       	andi	r24, 0x1F	; 31
    15da:	a9 f4       	brne	.+42     	; 0x1606 <udc_reqstd+0x84>
    15dc:	90 91 8e 26 	lds	r25, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
    15e0:	93 30       	cpi	r25, 0x03	; 3
    15e2:	69 f0       	breq	.+26     	; 0x15fe <udc_reqstd+0x7c>
    15e4:	18 f4       	brcc	.+6      	; 0x15ec <udc_reqstd+0x6a>
    15e6:	91 30       	cpi	r25, 0x01	; 1
    15e8:	41 f0       	breq	.+16     	; 0x15fa <udc_reqstd+0x78>
    15ea:	0d c0       	rjmp	.+26     	; 0x1606 <udc_reqstd+0x84>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    15ec:	95 30       	cpi	r25, 0x05	; 5
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <udc_reqstd+0x74>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    15f0:	99 30       	cpi	r25, 0x09	; 9
    15f2:	39 f0       	breq	.+14     	; 0x1602 <udc_reqstd+0x80>
    15f4:	08 c0       	rjmp	.+16     	; 0x1606 <udc_reqstd+0x84>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    15f6:	d3 cc       	rjmp	.-1626   	; 0xf9e <udc_req_std_dev_set_address>
    15f8:	08 95       	ret
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    15fa:	b4 cc       	rjmp	.-1688   	; 0xf64 <udc_req_std_dev_clear_feature>
    15fc:	08 95       	ret
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    15fe:	cd cc       	rjmp	.-1638   	; 0xf9a <udc_req_std_dev_set_feature>
    1600:	08 95       	ret
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1602:	6e cf       	rjmp	.-292    	; 0x14e0 <udc_req_std_dev_set_configuration>
    1604:	08 95       	ret
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	31 f4       	brne	.+12     	; 0x1616 <udc_reqstd+0x94>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    160a:	90 91 8e 26 	lds	r25, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    160e:	9b 30       	cpi	r25, 0x0B	; 11
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1610:	11 f4       	brne	.+4      	; 0x1616 <udc_reqstd+0x94>
    1612:	f7 ce       	rjmp	.-530    	; 0x1402 <udc_req_std_iface_set_setting>
    1614:	08 95       	ret
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	89 f4       	brne	.+34     	; 0x163c <udc_reqstd+0xba>
    161a:	80 91 8e 26 	lds	r24, 0x268E	; 0x80268e <udd_g_ctrlreq+0x1>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	19 f0       	breq	.+6      	; 0x1628 <udc_reqstd+0xa6>
    1622:	83 30       	cpi	r24, 0x03	; 3
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    1624:	19 f0       	breq	.+6      	; 0x162c <udc_reqstd+0xaa>
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <udc_reqstd+0xbe>
    1628:	0a cf       	rjmp	.-492    	; 0x143e <udc_req_std_ep_clear_feature>
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
    162a:	08 95       	ret
    162c:	1d cf       	rjmp	.-454    	; 0x1468 <udc_req_std_ep_set_feature>
				break;
			}
		}
#endif
	}
	return false;
    162e:	08 95       	ret
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	08 95       	ret
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	08 95       	ret
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	08 95       	ret
}
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	08 95       	ret
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	08 95       	ret

00001644 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1644:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1646:	80 91 d4 23 	lds	r24, 0x23D4	; 0x8023d4 <udc_num_configuration>
    164a:	81 11       	cpse	r24, r1
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <udc_sof_notify+0x32>
    164e:	1e c0       	rjmp	.+60     	; 0x168c <udc_sof_notify+0x48>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	ec 2f       	mov	r30, r28
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	01 90       	ld	r0, Z+
    1662:	f0 81       	ld	r31, Z
    1664:	e0 2d       	mov	r30, r0
    1666:	00 84       	ldd	r0, Z+8	; 0x08
    1668:	f1 85       	ldd	r31, Z+9	; 0x09
    166a:	e0 2d       	mov	r30, r0
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	09 f0       	breq	.+2      	; 0x1672 <udc_sof_notify+0x2e>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1670:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1672:	cf 5f       	subi	r28, 0xFF	; 255
    1674:	01 c0       	rjmp	.+2      	; 0x1678 <udc_sof_notify+0x34>
    1676:	c0 e0       	ldi	r28, 0x00	; 0
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1678:	e0 91 d2 23 	lds	r30, 0x23D2	; 0x8023d2 <udc_ptr_conf>
    167c:	f0 91 d3 23 	lds	r31, 0x23D3	; 0x8023d3 <udc_ptr_conf+0x1>
    1680:	a0 81       	ld	r26, Z
    1682:	b1 81       	ldd	r27, Z+1	; 0x01
    1684:	14 96       	adiw	r26, 0x04	; 4
    1686:	8c 91       	ld	r24, X
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1688:	c8 17       	cp	r28, r24
    168a:	10 f3       	brcs	.-60     	; 0x1650 <udc_sof_notify+0xc>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1690:	ed e8       	ldi	r30, 0x8D	; 141
    1692:	f6 e2       	ldi	r31, 0x26	; 38
    1694:	12 86       	std	Z+10, r1	; 0x0a
    1696:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1698:	14 86       	std	Z+12, r1	; 0x0c
    169a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    169c:	16 86       	std	Z+14, r1	; 0x0e
    169e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    16a0:	80 81       	ld	r24, Z
    16a2:	88 23       	and	r24, r24
    16a4:	34 f4       	brge	.+12     	; 0x16b2 <udc_process_setup+0x22>
		if (udd_g_ctrlreq.req.wLength == 0) {
    16a6:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    16aa:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    16ae:	23 2b       	or	r18, r19
    16b0:	a1 f0       	breq	.+40     	; 0x16da <udc_process_setup+0x4a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    16b2:	80 76       	andi	r24, 0x60	; 96
		if (udc_reqstd()) {
    16b4:	19 f4       	brne	.+6      	; 0x16bc <udc_process_setup+0x2c>
    16b6:	65 df       	rcall	.-310    	; 0x1582 <udc_reqstd>
    16b8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    16ba:	12 c0       	rjmp	.+36     	; 0x16e0 <udc_process_setup+0x50>
    16bc:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <udd_g_ctrlreq>
    16c0:	8f 71       	andi	r24, 0x1F	; 31
		if (udc_req_iface()) {
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	19 f4       	brne	.+6      	; 0x16cc <udc_process_setup+0x3c>
    16c6:	7b dc       	rcall	.-1802   	; 0xfbe <udc_req_iface>
    16c8:	81 11       	cpse	r24, r1
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <udc_process_setup+0x50>
    16cc:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <udd_g_ctrlreq>
    16d0:	8f 71       	andi	r24, 0x1F	; 31
		if (udc_req_ep()) {
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	21 f4       	brne	.+8      	; 0x16de <udc_process_setup+0x4e>
    16d6:	b6 cc       	rjmp	.-1684   	; 0x1044 <udc_req_ep>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    16d8:	08 95       	ret
    16da:	80 e0       	ldi	r24, 0x00	; 0
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    16dc:	08 95       	ret
#endif
}
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	08 95       	ret

000016e2 <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	ee 81       	ldd	r30, Y+6	; 0x06
    16ec:	ff 81       	ldd	r31, Y+7	; 0x07
    16ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f4:	3d 85       	ldd	r19, Y+13	; 0x0d
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
    16f6:	3f 93       	push	r19
    16f8:	2f 93       	push	r18
    16fa:	9f 93       	push	r25
    16fc:	8f 93       	push	r24
    16fe:	87 81       	ldd	r24, Z+7	; 0x07
    1700:	8f 93       	push	r24
    1702:	86 81       	ldd	r24, Z+6	; 0x06
    1704:	8f 93       	push	r24
    1706:	82 ec       	ldi	r24, 0xC2	; 194
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	9f 93       	push	r25
    170c:	8f 93       	push	r24
    170e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>

	va_start(ap, fmt);
	dbg_vprintf_pgm(fmt, ap);
    1712:	0f e1       	ldi	r16, 0x1F	; 31
    1714:	1b e2       	ldi	r17, 0x2B	; 43
    1716:	ae 01       	movw	r20, r28
    1718:	40 5f       	subi	r20, 0xF0	; 240
    171a:	5f 4f       	sbci	r21, 0xFF	; 255
    171c:	6e 85       	ldd	r22, Y+14	; 0x0e
    171e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1720:	f8 01       	movw	r30, r16
    1722:	82 81       	ldd	r24, Z+2	; 0x02
    1724:	93 81       	ldd	r25, Z+3	; 0x03
    1726:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <vfprintf_P>
	va_end(ap);
	dbg_putchar('\r');
    172a:	f8 01       	movw	r30, r16
    172c:	62 81       	ldd	r22, Z+2	; 0x02
    172e:	73 81       	ldd	r23, Z+3	; 0x03
    1730:	8d e0       	ldi	r24, 0x0D	; 13
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 89 27 	call	0x4f12	; 0x4f12 <fputc>
	dbg_putchar('\n');
    1738:	f8 01       	movw	r30, r16
    173a:	62 81       	ldd	r22, Z+2	; 0x02
    173c:	73 81       	ldd	r23, Z+3	; 0x03
    173e:	8a e0       	ldi	r24, 0x0A	; 10
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 89 27 	call	0x4f12	; 0x4f12 <fputc>

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
    1746:	68 85       	ldd	r22, Y+8	; 0x08
    1748:	79 85       	ldd	r23, Y+9	; 0x09
    174a:	8c ed       	ldi	r24, 0xDC	; 220
    174c:	93 e2       	ldi	r25, 0x23	; 35
    174e:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <longjmp>

00001752 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1752:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1754:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1756:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1758:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    175a:	60 83       	st	Z, r22
	ret                             // Return to caller
    175c:	08 95       	ret

0000175e <dma_interrupt>:
 * \param num \ref dma_channel_num_t
 * \param callback \ref dma_callback_t
 */
void dma_set_callback(dma_channel_num_t num, dma_callback_t callback)
{
	dma_data[num].callback = callback;
    175e:	68 2f       	mov	r22, r24
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	fb 01       	movw	r30, r22
    1764:	71 96       	adiw	r30, 0x11	; 17
    1766:	e2 95       	swap	r30
    1768:	f2 95       	swap	r31
    176a:	f0 7f       	andi	r31, 0xF0	; 240
    176c:	fe 27       	eor	r31, r30
    176e:	e0 7f       	andi	r30, 0xF0	; 240
    1770:	fe 27       	eor	r31, r30
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b1 e0       	ldi	r27, 0x01	; 1
    1776:	14 96       	adiw	r26, 0x04	; 4
    1778:	9c 91       	ld	r25, X
    177a:	14 97       	sbiw	r26, 0x04	; 4
    177c:	13 96       	adiw	r26, 0x03	; 3
    177e:	4c 91       	ld	r20, X
    1780:	21 e0       	ldi	r18, 0x01	; 1
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	d9 01       	movw	r26, r18
    1786:	08 2e       	mov	r0, r24
    1788:	02 c0       	rjmp	.+4      	; 0x178e <dma_interrupt+0x30>
    178a:	aa 0f       	add	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	0a 94       	dec	r0
    1790:	e2 f7       	brpl	.-8      	; 0x178a <dma_interrupt+0x2c>
    1792:	6c 5f       	subi	r22, 0xFC	; 252
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	06 2e       	mov	r0, r22
    1798:	02 c0       	rjmp	.+4      	; 0x179e <dma_interrupt+0x40>
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <dma_interrupt+0x3c>
    17a2:	2a 2b       	or	r18, r26
    17a4:	42 23       	and	r20, r18
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	da 01       	movw	r26, r20
    17aa:	06 2e       	mov	r0, r22
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <dma_interrupt+0x54>
    17ae:	b5 95       	asr	r27
    17b0:	a7 95       	ror	r26
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <dma_interrupt+0x50>
    17b6:	a0 fd       	sbrc	r26, 0
    17b8:	1c c0       	rjmp	.+56     	; 0x17f2 <dma_interrupt+0x94>
    17ba:	08 2e       	mov	r0, r24
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <dma_interrupt+0x64>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <dma_interrupt+0x60>
    17c6:	40 fd       	sbrc	r20, 0
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <dma_interrupt+0x98>
    17ca:	29 23       	and	r18, r25
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	a9 01       	movw	r20, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <dma_interrupt+0x78>
    17d2:	55 95       	asr	r21
    17d4:	47 95       	ror	r20
    17d6:	6a 95       	dec	r22
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <dma_interrupt+0x74>
    17da:	40 fd       	sbrc	r20, 0
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <dma_interrupt+0x9c>
    17de:	08 2e       	mov	r0, r24
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <dma_interrupt+0x88>
    17e2:	35 95       	asr	r19
    17e4:	27 95       	ror	r18
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <dma_interrupt+0x84>
    17ea:	20 ff       	sbrs	r18, 0
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <dma_interrupt+0xa0>
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <dma_interrupt+0xa2>
    17f2:	24 e0       	ldi	r18, 0x04	; 4
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <dma_interrupt+0xa2>
    17f6:	23 e0       	ldi	r18, 0x03	; 3
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <dma_interrupt+0xa2>
    17fa:	22 e0       	ldi	r18, 0x02	; 2
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <dma_interrupt+0xa2>
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	90 63       	ori	r25, 0x30	; 48
    1804:	91 83       	std	Z+1, r25	; 0x01
    1806:	e8 2f       	mov	r30, r24
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	eb 57       	subi	r30, 0x7B	; 123
    1810:	f9 4d       	sbci	r31, 0xD9	; 217
    1812:	01 90       	ld	r0, Z+
    1814:	f0 81       	ld	r31, Z
    1816:	e0 2d       	mov	r30, r0
    1818:	30 97       	sbiw	r30, 0x00	; 0
    181a:	11 f0       	breq	.+4      	; 0x1820 <dma_interrupt+0xc2>
    181c:	82 2f       	mov	r24, r18
    181e:	19 95       	eicall
    1820:	08 95       	ret

00001822 <__vector_6>:
/**
 * \internal
 * \brief DMA channel 0 interrupt handler
 */
ISR(DMA_CH0_vect)
{
    1822:	1f 92       	push	r1
    1824:	0f 92       	push	r0
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	0f 92       	push	r0
    182a:	11 24       	eor	r1, r1
    182c:	0b b6       	in	r0, 0x3b	; 59
    182e:	0f 92       	push	r0
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
	dma_interrupt(0);
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	89 df       	rcall	.-238    	; 0x175e <dma_interrupt>
}
    184c:	ff 91       	pop	r31
    184e:	ef 91       	pop	r30
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	0f 90       	pop	r0
    1866:	0b be       	out	0x3b, r0	; 59
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <__vector_7>:
/**
 * \internal
 * \brief DMA channel 1 interrupt handler
 */
ISR(DMA_CH1_vect)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	0b b6       	in	r0, 0x3b	; 59
    187e:	0f 92       	push	r0
    1880:	2f 93       	push	r18
    1882:	3f 93       	push	r19
    1884:	4f 93       	push	r20
    1886:	5f 93       	push	r21
    1888:	6f 93       	push	r22
    188a:	7f 93       	push	r23
    188c:	8f 93       	push	r24
    188e:	9f 93       	push	r25
    1890:	af 93       	push	r26
    1892:	bf 93       	push	r27
    1894:	ef 93       	push	r30
    1896:	ff 93       	push	r31
	dma_interrupt(1);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	61 df       	rcall	.-318    	; 0x175e <dma_interrupt>
}
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0b be       	out	0x3b, r0	; 59
    18b8:	0f 90       	pop	r0
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	0f 90       	pop	r0
    18be:	1f 90       	pop	r1
    18c0:	18 95       	reti

000018c2 <__vector_8>:
/**
 * \internal
 * \brief DMA channel 2 interrupt handler
 */
ISR(DMA_CH2_vect)
{
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	0b b6       	in	r0, 0x3b	; 59
    18ce:	0f 92       	push	r0
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
	dma_interrupt(2);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	39 df       	rcall	.-398    	; 0x175e <dma_interrupt>
}
    18ec:	ff 91       	pop	r31
    18ee:	ef 91       	pop	r30
    18f0:	bf 91       	pop	r27
    18f2:	af 91       	pop	r26
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	7f 91       	pop	r23
    18fa:	6f 91       	pop	r22
    18fc:	5f 91       	pop	r21
    18fe:	4f 91       	pop	r20
    1900:	3f 91       	pop	r19
    1902:	2f 91       	pop	r18
    1904:	0f 90       	pop	r0
    1906:	0b be       	out	0x3b, r0	; 59
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <__vector_9>:
/**
 * \internal
 * \brief DMA channel 3 interrupt handler
 */
ISR(DMA_CH3_vect)
{
    1912:	1f 92       	push	r1
    1914:	0f 92       	push	r0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	0f 92       	push	r0
    191a:	11 24       	eor	r1, r1
    191c:	0b b6       	in	r0, 0x3b	; 59
    191e:	0f 92       	push	r0
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
	dma_interrupt(3);
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	11 df       	rcall	.-478    	; 0x175e <dma_interrupt>
}
    193c:	ff 91       	pop	r31
    193e:	ef 91       	pop	r30
    1940:	bf 91       	pop	r27
    1942:	af 91       	pop	r26
    1944:	9f 91       	pop	r25
    1946:	8f 91       	pop	r24
    1948:	7f 91       	pop	r23
    194a:	6f 91       	pop	r22
    194c:	5f 91       	pop	r21
    194e:	4f 91       	pop	r20
    1950:	3f 91       	pop	r19
    1952:	2f 91       	pop	r18
    1954:	0f 90       	pop	r0
    1956:	0b be       	out	0x3b, r0	; 59
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	0b b6       	in	r0, 0x3b	; 59
    196e:	0f 92       	push	r0
    1970:	2f 93       	push	r18
    1972:	3f 93       	push	r19
    1974:	4f 93       	push	r20
    1976:	5f 93       	push	r21
    1978:	6f 93       	push	r22
    197a:	7f 93       	push	r23
    197c:	8f 93       	push	r24
    197e:	9f 93       	push	r25
    1980:	af 93       	push	r26
    1982:	bf 93       	push	r27
    1984:	ef 93       	push	r30
    1986:	ff 93       	push	r31
    1988:	e0 91 3a 24 	lds	r30, 0x243A	; 0x80243a <tc_tcc0_ovf_callback>
    198c:	f0 91 3b 24 	lds	r31, 0x243B	; 0x80243b <tc_tcc0_ovf_callback+0x1>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	09 f0       	breq	.+2      	; 0x1996 <__vector_14+0x34>
    1994:	19 95       	eicall
    1996:	ff 91       	pop	r31
    1998:	ef 91       	pop	r30
    199a:	bf 91       	pop	r27
    199c:	af 91       	pop	r26
    199e:	9f 91       	pop	r25
    19a0:	8f 91       	pop	r24
    19a2:	7f 91       	pop	r23
    19a4:	6f 91       	pop	r22
    19a6:	5f 91       	pop	r21
    19a8:	4f 91       	pop	r20
    19aa:	3f 91       	pop	r19
    19ac:	2f 91       	pop	r18
    19ae:	0f 90       	pop	r0
    19b0:	0b be       	out	0x3b, r0	; 59
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_15>:
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	0b b6       	in	r0, 0x3b	; 59
    19c8:	0f 92       	push	r0
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
    19e2:	e0 91 38 24 	lds	r30, 0x2438	; 0x802438 <tc_tcc0_err_callback>
    19e6:	f0 91 39 24 	lds	r31, 0x2439	; 0x802439 <tc_tcc0_err_callback+0x1>
    19ea:	30 97       	sbiw	r30, 0x00	; 0
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <__vector_15+0x34>
    19ee:	19 95       	eicall
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	bf 91       	pop	r27
    19f6:	af 91       	pop	r26
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	7f 91       	pop	r23
    19fe:	6f 91       	pop	r22
    1a00:	5f 91       	pop	r21
    1a02:	4f 91       	pop	r20
    1a04:	3f 91       	pop	r19
    1a06:	2f 91       	pop	r18
    1a08:	0f 90       	pop	r0
    1a0a:	0b be       	out	0x3b, r0	; 59
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <__vector_16>:
    1a16:	1f 92       	push	r1
    1a18:	0f 92       	push	r0
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	0f 92       	push	r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	0b b6       	in	r0, 0x3b	; 59
    1a22:	0f 92       	push	r0
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
    1a3c:	e0 91 36 24 	lds	r30, 0x2436	; 0x802436 <tc_tcc0_cca_callback>
    1a40:	f0 91 37 24 	lds	r31, 0x2437	; 0x802437 <tc_tcc0_cca_callback+0x1>
    1a44:	30 97       	sbiw	r30, 0x00	; 0
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <__vector_16+0x34>
    1a48:	19 95       	eicall
    1a4a:	ff 91       	pop	r31
    1a4c:	ef 91       	pop	r30
    1a4e:	bf 91       	pop	r27
    1a50:	af 91       	pop	r26
    1a52:	9f 91       	pop	r25
    1a54:	8f 91       	pop	r24
    1a56:	7f 91       	pop	r23
    1a58:	6f 91       	pop	r22
    1a5a:	5f 91       	pop	r21
    1a5c:	4f 91       	pop	r20
    1a5e:	3f 91       	pop	r19
    1a60:	2f 91       	pop	r18
    1a62:	0f 90       	pop	r0
    1a64:	0b be       	out	0x3b, r0	; 59
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <__vector_17>:
    1a70:	1f 92       	push	r1
    1a72:	0f 92       	push	r0
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	0f 92       	push	r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	0b b6       	in	r0, 0x3b	; 59
    1a7c:	0f 92       	push	r0
    1a7e:	2f 93       	push	r18
    1a80:	3f 93       	push	r19
    1a82:	4f 93       	push	r20
    1a84:	5f 93       	push	r21
    1a86:	6f 93       	push	r22
    1a88:	7f 93       	push	r23
    1a8a:	8f 93       	push	r24
    1a8c:	9f 93       	push	r25
    1a8e:	af 93       	push	r26
    1a90:	bf 93       	push	r27
    1a92:	ef 93       	push	r30
    1a94:	ff 93       	push	r31
    1a96:	e0 91 34 24 	lds	r30, 0x2434	; 0x802434 <tc_tcc0_ccb_callback>
    1a9a:	f0 91 35 24 	lds	r31, 0x2435	; 0x802435 <tc_tcc0_ccb_callback+0x1>
    1a9e:	30 97       	sbiw	r30, 0x00	; 0
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <__vector_17+0x34>
    1aa2:	19 95       	eicall
    1aa4:	ff 91       	pop	r31
    1aa6:	ef 91       	pop	r30
    1aa8:	bf 91       	pop	r27
    1aaa:	af 91       	pop	r26
    1aac:	9f 91       	pop	r25
    1aae:	8f 91       	pop	r24
    1ab0:	7f 91       	pop	r23
    1ab2:	6f 91       	pop	r22
    1ab4:	5f 91       	pop	r21
    1ab6:	4f 91       	pop	r20
    1ab8:	3f 91       	pop	r19
    1aba:	2f 91       	pop	r18
    1abc:	0f 90       	pop	r0
    1abe:	0b be       	out	0x3b, r0	; 59
    1ac0:	0f 90       	pop	r0
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	0f 90       	pop	r0
    1ac6:	1f 90       	pop	r1
    1ac8:	18 95       	reti

00001aca <__vector_18>:
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	0b b6       	in	r0, 0x3b	; 59
    1ad6:	0f 92       	push	r0
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
    1af0:	e0 91 32 24 	lds	r30, 0x2432	; 0x802432 <tc_tcc0_ccc_callback>
    1af4:	f0 91 33 24 	lds	r31, 0x2433	; 0x802433 <tc_tcc0_ccc_callback+0x1>
    1af8:	30 97       	sbiw	r30, 0x00	; 0
    1afa:	09 f0       	breq	.+2      	; 0x1afe <__vector_18+0x34>
    1afc:	19 95       	eicall
    1afe:	ff 91       	pop	r31
    1b00:	ef 91       	pop	r30
    1b02:	bf 91       	pop	r27
    1b04:	af 91       	pop	r26
    1b06:	9f 91       	pop	r25
    1b08:	8f 91       	pop	r24
    1b0a:	7f 91       	pop	r23
    1b0c:	6f 91       	pop	r22
    1b0e:	5f 91       	pop	r21
    1b10:	4f 91       	pop	r20
    1b12:	3f 91       	pop	r19
    1b14:	2f 91       	pop	r18
    1b16:	0f 90       	pop	r0
    1b18:	0b be       	out	0x3b, r0	; 59
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_19>:
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	0b b6       	in	r0, 0x3b	; 59
    1b30:	0f 92       	push	r0
    1b32:	2f 93       	push	r18
    1b34:	3f 93       	push	r19
    1b36:	4f 93       	push	r20
    1b38:	5f 93       	push	r21
    1b3a:	6f 93       	push	r22
    1b3c:	7f 93       	push	r23
    1b3e:	8f 93       	push	r24
    1b40:	9f 93       	push	r25
    1b42:	af 93       	push	r26
    1b44:	bf 93       	push	r27
    1b46:	ef 93       	push	r30
    1b48:	ff 93       	push	r31
    1b4a:	e0 91 30 24 	lds	r30, 0x2430	; 0x802430 <tc_tcc0_ccd_callback>
    1b4e:	f0 91 31 24 	lds	r31, 0x2431	; 0x802431 <tc_tcc0_ccd_callback+0x1>
    1b52:	30 97       	sbiw	r30, 0x00	; 0
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <__vector_19+0x34>
    1b56:	19 95       	eicall
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0b be       	out	0x3b, r0	; 59
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_20>:
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	0b b6       	in	r0, 0x3b	; 59
    1b8a:	0f 92       	push	r0
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	e0 91 2e 24 	lds	r30, 0x242E	; 0x80242e <tc_tcc1_ovf_callback>
    1ba8:	f0 91 2f 24 	lds	r31, 0x242F	; 0x80242f <tc_tcc1_ovf_callback+0x1>
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <__vector_20+0x34>
    1bb0:	19 95       	eicall
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	0b be       	out	0x3b, r0	; 59
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__vector_21>:
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	0b b6       	in	r0, 0x3b	; 59
    1be4:	0f 92       	push	r0
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
    1bfe:	e0 91 2c 24 	lds	r30, 0x242C	; 0x80242c <tc_tcc1_err_callback>
    1c02:	f0 91 2d 24 	lds	r31, 0x242D	; 0x80242d <tc_tcc1_err_callback+0x1>
    1c06:	30 97       	sbiw	r30, 0x00	; 0
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <__vector_21+0x34>
    1c0a:	19 95       	eicall
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0b be       	out	0x3b, r0	; 59
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <__vector_22>:
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	0b b6       	in	r0, 0x3b	; 59
    1c3e:	0f 92       	push	r0
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	4f 93       	push	r20
    1c46:	5f 93       	push	r21
    1c48:	6f 93       	push	r22
    1c4a:	7f 93       	push	r23
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	ef 93       	push	r30
    1c56:	ff 93       	push	r31
    1c58:	e0 91 2a 24 	lds	r30, 0x242A	; 0x80242a <tc_tcc1_cca_callback>
    1c5c:	f0 91 2b 24 	lds	r31, 0x242B	; 0x80242b <tc_tcc1_cca_callback+0x1>
    1c60:	30 97       	sbiw	r30, 0x00	; 0
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <__vector_22+0x34>
    1c64:	19 95       	eicall
    1c66:	ff 91       	pop	r31
    1c68:	ef 91       	pop	r30
    1c6a:	bf 91       	pop	r27
    1c6c:	af 91       	pop	r26
    1c6e:	9f 91       	pop	r25
    1c70:	8f 91       	pop	r24
    1c72:	7f 91       	pop	r23
    1c74:	6f 91       	pop	r22
    1c76:	5f 91       	pop	r21
    1c78:	4f 91       	pop	r20
    1c7a:	3f 91       	pop	r19
    1c7c:	2f 91       	pop	r18
    1c7e:	0f 90       	pop	r0
    1c80:	0b be       	out	0x3b, r0	; 59
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0
    1c88:	1f 90       	pop	r1
    1c8a:	18 95       	reti

00001c8c <__vector_23>:
    1c8c:	1f 92       	push	r1
    1c8e:	0f 92       	push	r0
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	0f 92       	push	r0
    1c94:	11 24       	eor	r1, r1
    1c96:	0b b6       	in	r0, 0x3b	; 59
    1c98:	0f 92       	push	r0
    1c9a:	2f 93       	push	r18
    1c9c:	3f 93       	push	r19
    1c9e:	4f 93       	push	r20
    1ca0:	5f 93       	push	r21
    1ca2:	6f 93       	push	r22
    1ca4:	7f 93       	push	r23
    1ca6:	8f 93       	push	r24
    1ca8:	9f 93       	push	r25
    1caa:	af 93       	push	r26
    1cac:	bf 93       	push	r27
    1cae:	ef 93       	push	r30
    1cb0:	ff 93       	push	r31
    1cb2:	e0 91 28 24 	lds	r30, 0x2428	; 0x802428 <tc_tcc1_ccb_callback>
    1cb6:	f0 91 29 24 	lds	r31, 0x2429	; 0x802429 <tc_tcc1_ccb_callback+0x1>
    1cba:	30 97       	sbiw	r30, 0x00	; 0
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <__vector_23+0x34>
    1cbe:	19 95       	eicall
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	0b be       	out	0x3b, r0	; 59
    1cdc:	0f 90       	pop	r0
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	0f 90       	pop	r0
    1ce2:	1f 90       	pop	r1
    1ce4:	18 95       	reti

00001ce6 <__vector_77>:
    1ce6:	1f 92       	push	r1
    1ce8:	0f 92       	push	r0
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	0f 92       	push	r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	0b b6       	in	r0, 0x3b	; 59
    1cf2:	0f 92       	push	r0
    1cf4:	2f 93       	push	r18
    1cf6:	3f 93       	push	r19
    1cf8:	4f 93       	push	r20
    1cfa:	5f 93       	push	r21
    1cfc:	6f 93       	push	r22
    1cfe:	7f 93       	push	r23
    1d00:	8f 93       	push	r24
    1d02:	9f 93       	push	r25
    1d04:	af 93       	push	r26
    1d06:	bf 93       	push	r27
    1d08:	ef 93       	push	r30
    1d0a:	ff 93       	push	r31
    1d0c:	e0 91 26 24 	lds	r30, 0x2426	; 0x802426 <tc_tcd0_ovf_callback>
    1d10:	f0 91 27 24 	lds	r31, 0x2427	; 0x802427 <tc_tcd0_ovf_callback+0x1>
    1d14:	30 97       	sbiw	r30, 0x00	; 0
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <__vector_77+0x34>
    1d18:	19 95       	eicall
    1d1a:	ff 91       	pop	r31
    1d1c:	ef 91       	pop	r30
    1d1e:	bf 91       	pop	r27
    1d20:	af 91       	pop	r26
    1d22:	9f 91       	pop	r25
    1d24:	8f 91       	pop	r24
    1d26:	7f 91       	pop	r23
    1d28:	6f 91       	pop	r22
    1d2a:	5f 91       	pop	r21
    1d2c:	4f 91       	pop	r20
    1d2e:	3f 91       	pop	r19
    1d30:	2f 91       	pop	r18
    1d32:	0f 90       	pop	r0
    1d34:	0b be       	out	0x3b, r0	; 59
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <__vector_78>:
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	0b b6       	in	r0, 0x3b	; 59
    1d4c:	0f 92       	push	r0
    1d4e:	2f 93       	push	r18
    1d50:	3f 93       	push	r19
    1d52:	4f 93       	push	r20
    1d54:	5f 93       	push	r21
    1d56:	6f 93       	push	r22
    1d58:	7f 93       	push	r23
    1d5a:	8f 93       	push	r24
    1d5c:	9f 93       	push	r25
    1d5e:	af 93       	push	r26
    1d60:	bf 93       	push	r27
    1d62:	ef 93       	push	r30
    1d64:	ff 93       	push	r31
    1d66:	e0 91 24 24 	lds	r30, 0x2424	; 0x802424 <tc_tcd0_err_callback>
    1d6a:	f0 91 25 24 	lds	r31, 0x2425	; 0x802425 <tc_tcd0_err_callback+0x1>
    1d6e:	30 97       	sbiw	r30, 0x00	; 0
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <__vector_78+0x34>
    1d72:	19 95       	eicall
    1d74:	ff 91       	pop	r31
    1d76:	ef 91       	pop	r30
    1d78:	bf 91       	pop	r27
    1d7a:	af 91       	pop	r26
    1d7c:	9f 91       	pop	r25
    1d7e:	8f 91       	pop	r24
    1d80:	7f 91       	pop	r23
    1d82:	6f 91       	pop	r22
    1d84:	5f 91       	pop	r21
    1d86:	4f 91       	pop	r20
    1d88:	3f 91       	pop	r19
    1d8a:	2f 91       	pop	r18
    1d8c:	0f 90       	pop	r0
    1d8e:	0b be       	out	0x3b, r0	; 59
    1d90:	0f 90       	pop	r0
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	0f 90       	pop	r0
    1d96:	1f 90       	pop	r1
    1d98:	18 95       	reti

00001d9a <__vector_79>:
    1d9a:	1f 92       	push	r1
    1d9c:	0f 92       	push	r0
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	0f 92       	push	r0
    1da2:	11 24       	eor	r1, r1
    1da4:	0b b6       	in	r0, 0x3b	; 59
    1da6:	0f 92       	push	r0
    1da8:	2f 93       	push	r18
    1daa:	3f 93       	push	r19
    1dac:	4f 93       	push	r20
    1dae:	5f 93       	push	r21
    1db0:	6f 93       	push	r22
    1db2:	7f 93       	push	r23
    1db4:	8f 93       	push	r24
    1db6:	9f 93       	push	r25
    1db8:	af 93       	push	r26
    1dba:	bf 93       	push	r27
    1dbc:	ef 93       	push	r30
    1dbe:	ff 93       	push	r31
    1dc0:	e0 91 22 24 	lds	r30, 0x2422	; 0x802422 <tc_tcd0_cca_callback>
    1dc4:	f0 91 23 24 	lds	r31, 0x2423	; 0x802423 <tc_tcd0_cca_callback+0x1>
    1dc8:	30 97       	sbiw	r30, 0x00	; 0
    1dca:	09 f0       	breq	.+2      	; 0x1dce <__vector_79+0x34>
    1dcc:	19 95       	eicall
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0b be       	out	0x3b, r0	; 59
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_80>:
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	0b b6       	in	r0, 0x3b	; 59
    1e00:	0f 92       	push	r0
    1e02:	2f 93       	push	r18
    1e04:	3f 93       	push	r19
    1e06:	4f 93       	push	r20
    1e08:	5f 93       	push	r21
    1e0a:	6f 93       	push	r22
    1e0c:	7f 93       	push	r23
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	af 93       	push	r26
    1e14:	bf 93       	push	r27
    1e16:	ef 93       	push	r30
    1e18:	ff 93       	push	r31
    1e1a:	e0 91 20 24 	lds	r30, 0x2420	; 0x802420 <tc_tcd0_ccb_callback>
    1e1e:	f0 91 21 24 	lds	r31, 0x2421	; 0x802421 <tc_tcd0_ccb_callback+0x1>
    1e22:	30 97       	sbiw	r30, 0x00	; 0
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <__vector_80+0x34>
    1e26:	19 95       	eicall
    1e28:	ff 91       	pop	r31
    1e2a:	ef 91       	pop	r30
    1e2c:	bf 91       	pop	r27
    1e2e:	af 91       	pop	r26
    1e30:	9f 91       	pop	r25
    1e32:	8f 91       	pop	r24
    1e34:	7f 91       	pop	r23
    1e36:	6f 91       	pop	r22
    1e38:	5f 91       	pop	r21
    1e3a:	4f 91       	pop	r20
    1e3c:	3f 91       	pop	r19
    1e3e:	2f 91       	pop	r18
    1e40:	0f 90       	pop	r0
    1e42:	0b be       	out	0x3b, r0	; 59
    1e44:	0f 90       	pop	r0
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	0f 90       	pop	r0
    1e4a:	1f 90       	pop	r1
    1e4c:	18 95       	reti

00001e4e <__vector_81>:
    1e4e:	1f 92       	push	r1
    1e50:	0f 92       	push	r0
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	0f 92       	push	r0
    1e56:	11 24       	eor	r1, r1
    1e58:	0b b6       	in	r0, 0x3b	; 59
    1e5a:	0f 92       	push	r0
    1e5c:	2f 93       	push	r18
    1e5e:	3f 93       	push	r19
    1e60:	4f 93       	push	r20
    1e62:	5f 93       	push	r21
    1e64:	6f 93       	push	r22
    1e66:	7f 93       	push	r23
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	af 93       	push	r26
    1e6e:	bf 93       	push	r27
    1e70:	ef 93       	push	r30
    1e72:	ff 93       	push	r31
    1e74:	e0 91 1e 24 	lds	r30, 0x241E	; 0x80241e <tc_tcd0_ccc_callback>
    1e78:	f0 91 1f 24 	lds	r31, 0x241F	; 0x80241f <tc_tcd0_ccc_callback+0x1>
    1e7c:	30 97       	sbiw	r30, 0x00	; 0
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <__vector_81+0x34>
    1e80:	19 95       	eicall
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0b be       	out	0x3b, r0	; 59
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <__vector_82>:
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	0b b6       	in	r0, 0x3b	; 59
    1eb4:	0f 92       	push	r0
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	e0 91 1c 24 	lds	r30, 0x241C	; 0x80241c <tc_tcd0_ccd_callback>
    1ed2:	f0 91 1d 24 	lds	r31, 0x241D	; 0x80241d <tc_tcd0_ccd_callback+0x1>
    1ed6:	30 97       	sbiw	r30, 0x00	; 0
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <__vector_82+0x34>
    1eda:	19 95       	eicall
    1edc:	ff 91       	pop	r31
    1ede:	ef 91       	pop	r30
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0b be       	out	0x3b, r0	; 59
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_83>:
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	0b b6       	in	r0, 0x3b	; 59
    1f0e:	0f 92       	push	r0
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	e0 91 1a 24 	lds	r30, 0x241A	; 0x80241a <tc_tcd1_ovf_callback>
    1f2c:	f0 91 1b 24 	lds	r31, 0x241B	; 0x80241b <tc_tcd1_ovf_callback+0x1>
    1f30:	30 97       	sbiw	r30, 0x00	; 0
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <__vector_83+0x34>
    1f34:	19 95       	eicall
    1f36:	ff 91       	pop	r31
    1f38:	ef 91       	pop	r30
    1f3a:	bf 91       	pop	r27
    1f3c:	af 91       	pop	r26
    1f3e:	9f 91       	pop	r25
    1f40:	8f 91       	pop	r24
    1f42:	7f 91       	pop	r23
    1f44:	6f 91       	pop	r22
    1f46:	5f 91       	pop	r21
    1f48:	4f 91       	pop	r20
    1f4a:	3f 91       	pop	r19
    1f4c:	2f 91       	pop	r18
    1f4e:	0f 90       	pop	r0
    1f50:	0b be       	out	0x3b, r0	; 59
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <__vector_84>:
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	0b b6       	in	r0, 0x3b	; 59
    1f68:	0f 92       	push	r0
    1f6a:	2f 93       	push	r18
    1f6c:	3f 93       	push	r19
    1f6e:	4f 93       	push	r20
    1f70:	5f 93       	push	r21
    1f72:	6f 93       	push	r22
    1f74:	7f 93       	push	r23
    1f76:	8f 93       	push	r24
    1f78:	9f 93       	push	r25
    1f7a:	af 93       	push	r26
    1f7c:	bf 93       	push	r27
    1f7e:	ef 93       	push	r30
    1f80:	ff 93       	push	r31
    1f82:	e0 91 18 24 	lds	r30, 0x2418	; 0x802418 <tc_tcd1_err_callback>
    1f86:	f0 91 19 24 	lds	r31, 0x2419	; 0x802419 <tc_tcd1_err_callback+0x1>
    1f8a:	30 97       	sbiw	r30, 0x00	; 0
    1f8c:	09 f0       	breq	.+2      	; 0x1f90 <__vector_84+0x34>
    1f8e:	19 95       	eicall
    1f90:	ff 91       	pop	r31
    1f92:	ef 91       	pop	r30
    1f94:	bf 91       	pop	r27
    1f96:	af 91       	pop	r26
    1f98:	9f 91       	pop	r25
    1f9a:	8f 91       	pop	r24
    1f9c:	7f 91       	pop	r23
    1f9e:	6f 91       	pop	r22
    1fa0:	5f 91       	pop	r21
    1fa2:	4f 91       	pop	r20
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 90       	pop	r0
    1faa:	0b be       	out	0x3b, r0	; 59
    1fac:	0f 90       	pop	r0
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0f 90       	pop	r0
    1fb2:	1f 90       	pop	r1
    1fb4:	18 95       	reti

00001fb6 <__vector_85>:
    1fb6:	1f 92       	push	r1
    1fb8:	0f 92       	push	r0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	0f 92       	push	r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	0b b6       	in	r0, 0x3b	; 59
    1fc2:	0f 92       	push	r0
    1fc4:	2f 93       	push	r18
    1fc6:	3f 93       	push	r19
    1fc8:	4f 93       	push	r20
    1fca:	5f 93       	push	r21
    1fcc:	6f 93       	push	r22
    1fce:	7f 93       	push	r23
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
    1fd8:	ef 93       	push	r30
    1fda:	ff 93       	push	r31
    1fdc:	e0 91 16 24 	lds	r30, 0x2416	; 0x802416 <tc_tcd1_cca_callback>
    1fe0:	f0 91 17 24 	lds	r31, 0x2417	; 0x802417 <tc_tcd1_cca_callback+0x1>
    1fe4:	30 97       	sbiw	r30, 0x00	; 0
    1fe6:	09 f0       	breq	.+2      	; 0x1fea <__vector_85+0x34>
    1fe8:	19 95       	eicall
    1fea:	ff 91       	pop	r31
    1fec:	ef 91       	pop	r30
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	7f 91       	pop	r23
    1ff8:	6f 91       	pop	r22
    1ffa:	5f 91       	pop	r21
    1ffc:	4f 91       	pop	r20
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0b be       	out	0x3b, r0	; 59
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	0f 90       	pop	r0
    200c:	1f 90       	pop	r1
    200e:	18 95       	reti

00002010 <__vector_86>:
    2010:	1f 92       	push	r1
    2012:	0f 92       	push	r0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	0f 92       	push	r0
    2018:	11 24       	eor	r1, r1
    201a:	0b b6       	in	r0, 0x3b	; 59
    201c:	0f 92       	push	r0
    201e:	2f 93       	push	r18
    2020:	3f 93       	push	r19
    2022:	4f 93       	push	r20
    2024:	5f 93       	push	r21
    2026:	6f 93       	push	r22
    2028:	7f 93       	push	r23
    202a:	8f 93       	push	r24
    202c:	9f 93       	push	r25
    202e:	af 93       	push	r26
    2030:	bf 93       	push	r27
    2032:	ef 93       	push	r30
    2034:	ff 93       	push	r31
    2036:	e0 91 14 24 	lds	r30, 0x2414	; 0x802414 <tc_tcd1_ccb_callback>
    203a:	f0 91 15 24 	lds	r31, 0x2415	; 0x802415 <tc_tcd1_ccb_callback+0x1>
    203e:	30 97       	sbiw	r30, 0x00	; 0
    2040:	09 f0       	breq	.+2      	; 0x2044 <__vector_86+0x34>
    2042:	19 95       	eicall
    2044:	ff 91       	pop	r31
    2046:	ef 91       	pop	r30
    2048:	bf 91       	pop	r27
    204a:	af 91       	pop	r26
    204c:	9f 91       	pop	r25
    204e:	8f 91       	pop	r24
    2050:	7f 91       	pop	r23
    2052:	6f 91       	pop	r22
    2054:	5f 91       	pop	r21
    2056:	4f 91       	pop	r20
    2058:	3f 91       	pop	r19
    205a:	2f 91       	pop	r18
    205c:	0f 90       	pop	r0
    205e:	0b be       	out	0x3b, r0	; 59
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <__vector_47>:
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	0b b6       	in	r0, 0x3b	; 59
    2076:	0f 92       	push	r0
    2078:	2f 93       	push	r18
    207a:	3f 93       	push	r19
    207c:	4f 93       	push	r20
    207e:	5f 93       	push	r21
    2080:	6f 93       	push	r22
    2082:	7f 93       	push	r23
    2084:	8f 93       	push	r24
    2086:	9f 93       	push	r25
    2088:	af 93       	push	r26
    208a:	bf 93       	push	r27
    208c:	ef 93       	push	r30
    208e:	ff 93       	push	r31
    2090:	e0 91 12 24 	lds	r30, 0x2412	; 0x802412 <tc_tce0_ovf_callback>
    2094:	f0 91 13 24 	lds	r31, 0x2413	; 0x802413 <tc_tce0_ovf_callback+0x1>
    2098:	30 97       	sbiw	r30, 0x00	; 0
    209a:	09 f0       	breq	.+2      	; 0x209e <__vector_47+0x34>
    209c:	19 95       	eicall
    209e:	ff 91       	pop	r31
    20a0:	ef 91       	pop	r30
    20a2:	bf 91       	pop	r27
    20a4:	af 91       	pop	r26
    20a6:	9f 91       	pop	r25
    20a8:	8f 91       	pop	r24
    20aa:	7f 91       	pop	r23
    20ac:	6f 91       	pop	r22
    20ae:	5f 91       	pop	r21
    20b0:	4f 91       	pop	r20
    20b2:	3f 91       	pop	r19
    20b4:	2f 91       	pop	r18
    20b6:	0f 90       	pop	r0
    20b8:	0b be       	out	0x3b, r0	; 59
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	0f 90       	pop	r0
    20c0:	1f 90       	pop	r1
    20c2:	18 95       	reti

000020c4 <__vector_48>:
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	0b b6       	in	r0, 0x3b	; 59
    20d0:	0f 92       	push	r0
    20d2:	2f 93       	push	r18
    20d4:	3f 93       	push	r19
    20d6:	4f 93       	push	r20
    20d8:	5f 93       	push	r21
    20da:	6f 93       	push	r22
    20dc:	7f 93       	push	r23
    20de:	8f 93       	push	r24
    20e0:	9f 93       	push	r25
    20e2:	af 93       	push	r26
    20e4:	bf 93       	push	r27
    20e6:	ef 93       	push	r30
    20e8:	ff 93       	push	r31
    20ea:	e0 91 10 24 	lds	r30, 0x2410	; 0x802410 <tc_tce0_err_callback>
    20ee:	f0 91 11 24 	lds	r31, 0x2411	; 0x802411 <tc_tce0_err_callback+0x1>
    20f2:	30 97       	sbiw	r30, 0x00	; 0
    20f4:	09 f0       	breq	.+2      	; 0x20f8 <__vector_48+0x34>
    20f6:	19 95       	eicall
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0b be       	out	0x3b, r0	; 59
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti

0000211e <__vector_49>:
    211e:	1f 92       	push	r1
    2120:	0f 92       	push	r0
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	0f 92       	push	r0
    2126:	11 24       	eor	r1, r1
    2128:	0b b6       	in	r0, 0x3b	; 59
    212a:	0f 92       	push	r0
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
    2144:	e0 91 0e 24 	lds	r30, 0x240E	; 0x80240e <tc_tce0_cca_callback>
    2148:	f0 91 0f 24 	lds	r31, 0x240F	; 0x80240f <tc_tce0_cca_callback+0x1>
    214c:	30 97       	sbiw	r30, 0x00	; 0
    214e:	09 f0       	breq	.+2      	; 0x2152 <__vector_49+0x34>
    2150:	19 95       	eicall
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0b be       	out	0x3b, r0	; 59
    216e:	0f 90       	pop	r0
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	0f 90       	pop	r0
    2174:	1f 90       	pop	r1
    2176:	18 95       	reti

00002178 <__vector_50>:
    2178:	1f 92       	push	r1
    217a:	0f 92       	push	r0
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	0f 92       	push	r0
    2180:	11 24       	eor	r1, r1
    2182:	0b b6       	in	r0, 0x3b	; 59
    2184:	0f 92       	push	r0
    2186:	2f 93       	push	r18
    2188:	3f 93       	push	r19
    218a:	4f 93       	push	r20
    218c:	5f 93       	push	r21
    218e:	6f 93       	push	r22
    2190:	7f 93       	push	r23
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
    219e:	e0 91 0c 24 	lds	r30, 0x240C	; 0x80240c <tc_tce0_ccb_callback>
    21a2:	f0 91 0d 24 	lds	r31, 0x240D	; 0x80240d <tc_tce0_ccb_callback+0x1>
    21a6:	30 97       	sbiw	r30, 0x00	; 0
    21a8:	09 f0       	breq	.+2      	; 0x21ac <__vector_50+0x34>
    21aa:	19 95       	eicall
    21ac:	ff 91       	pop	r31
    21ae:	ef 91       	pop	r30
    21b0:	bf 91       	pop	r27
    21b2:	af 91       	pop	r26
    21b4:	9f 91       	pop	r25
    21b6:	8f 91       	pop	r24
    21b8:	7f 91       	pop	r23
    21ba:	6f 91       	pop	r22
    21bc:	5f 91       	pop	r21
    21be:	4f 91       	pop	r20
    21c0:	3f 91       	pop	r19
    21c2:	2f 91       	pop	r18
    21c4:	0f 90       	pop	r0
    21c6:	0b be       	out	0x3b, r0	; 59
    21c8:	0f 90       	pop	r0
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	0f 90       	pop	r0
    21ce:	1f 90       	pop	r1
    21d0:	18 95       	reti

000021d2 <__vector_51>:
    21d2:	1f 92       	push	r1
    21d4:	0f 92       	push	r0
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	0f 92       	push	r0
    21da:	11 24       	eor	r1, r1
    21dc:	0b b6       	in	r0, 0x3b	; 59
    21de:	0f 92       	push	r0
    21e0:	2f 93       	push	r18
    21e2:	3f 93       	push	r19
    21e4:	4f 93       	push	r20
    21e6:	5f 93       	push	r21
    21e8:	6f 93       	push	r22
    21ea:	7f 93       	push	r23
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	e0 91 0a 24 	lds	r30, 0x240A	; 0x80240a <tc_tce0_ccc_callback>
    21fc:	f0 91 0b 24 	lds	r31, 0x240B	; 0x80240b <tc_tce0_ccc_callback+0x1>
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	09 f0       	breq	.+2      	; 0x2206 <__vector_51+0x34>
    2204:	19 95       	eicall
    2206:	ff 91       	pop	r31
    2208:	ef 91       	pop	r30
    220a:	bf 91       	pop	r27
    220c:	af 91       	pop	r26
    220e:	9f 91       	pop	r25
    2210:	8f 91       	pop	r24
    2212:	7f 91       	pop	r23
    2214:	6f 91       	pop	r22
    2216:	5f 91       	pop	r21
    2218:	4f 91       	pop	r20
    221a:	3f 91       	pop	r19
    221c:	2f 91       	pop	r18
    221e:	0f 90       	pop	r0
    2220:	0b be       	out	0x3b, r0	; 59
    2222:	0f 90       	pop	r0
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	0f 90       	pop	r0
    2228:	1f 90       	pop	r1
    222a:	18 95       	reti

0000222c <__vector_52>:
    222c:	1f 92       	push	r1
    222e:	0f 92       	push	r0
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	0f 92       	push	r0
    2234:	11 24       	eor	r1, r1
    2236:	0b b6       	in	r0, 0x3b	; 59
    2238:	0f 92       	push	r0
    223a:	2f 93       	push	r18
    223c:	3f 93       	push	r19
    223e:	4f 93       	push	r20
    2240:	5f 93       	push	r21
    2242:	6f 93       	push	r22
    2244:	7f 93       	push	r23
    2246:	8f 93       	push	r24
    2248:	9f 93       	push	r25
    224a:	af 93       	push	r26
    224c:	bf 93       	push	r27
    224e:	ef 93       	push	r30
    2250:	ff 93       	push	r31
    2252:	e0 91 08 24 	lds	r30, 0x2408	; 0x802408 <tc_tce0_ccd_callback>
    2256:	f0 91 09 24 	lds	r31, 0x2409	; 0x802409 <tc_tce0_ccd_callback+0x1>
    225a:	30 97       	sbiw	r30, 0x00	; 0
    225c:	09 f0       	breq	.+2      	; 0x2260 <__vector_52+0x34>
    225e:	19 95       	eicall
    2260:	ff 91       	pop	r31
    2262:	ef 91       	pop	r30
    2264:	bf 91       	pop	r27
    2266:	af 91       	pop	r26
    2268:	9f 91       	pop	r25
    226a:	8f 91       	pop	r24
    226c:	7f 91       	pop	r23
    226e:	6f 91       	pop	r22
    2270:	5f 91       	pop	r21
    2272:	4f 91       	pop	r20
    2274:	3f 91       	pop	r19
    2276:	2f 91       	pop	r18
    2278:	0f 90       	pop	r0
    227a:	0b be       	out	0x3b, r0	; 59
    227c:	0f 90       	pop	r0
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	0f 90       	pop	r0
    2282:	1f 90       	pop	r1
    2284:	18 95       	reti

00002286 <__vector_53>:
    2286:	1f 92       	push	r1
    2288:	0f 92       	push	r0
    228a:	0f b6       	in	r0, 0x3f	; 63
    228c:	0f 92       	push	r0
    228e:	11 24       	eor	r1, r1
    2290:	0b b6       	in	r0, 0x3b	; 59
    2292:	0f 92       	push	r0
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	6f 93       	push	r22
    229e:	7f 93       	push	r23
    22a0:	8f 93       	push	r24
    22a2:	9f 93       	push	r25
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
    22ac:	e0 91 06 24 	lds	r30, 0x2406	; 0x802406 <tc_tce1_ovf_callback>
    22b0:	f0 91 07 24 	lds	r31, 0x2407	; 0x802407 <tc_tce1_ovf_callback+0x1>
    22b4:	30 97       	sbiw	r30, 0x00	; 0
    22b6:	09 f0       	breq	.+2      	; 0x22ba <__vector_53+0x34>
    22b8:	19 95       	eicall
    22ba:	ff 91       	pop	r31
    22bc:	ef 91       	pop	r30
    22be:	bf 91       	pop	r27
    22c0:	af 91       	pop	r26
    22c2:	9f 91       	pop	r25
    22c4:	8f 91       	pop	r24
    22c6:	7f 91       	pop	r23
    22c8:	6f 91       	pop	r22
    22ca:	5f 91       	pop	r21
    22cc:	4f 91       	pop	r20
    22ce:	3f 91       	pop	r19
    22d0:	2f 91       	pop	r18
    22d2:	0f 90       	pop	r0
    22d4:	0b be       	out	0x3b, r0	; 59
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <__vector_54>:
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	0b b6       	in	r0, 0x3b	; 59
    22ec:	0f 92       	push	r0
    22ee:	2f 93       	push	r18
    22f0:	3f 93       	push	r19
    22f2:	4f 93       	push	r20
    22f4:	5f 93       	push	r21
    22f6:	6f 93       	push	r22
    22f8:	7f 93       	push	r23
    22fa:	8f 93       	push	r24
    22fc:	9f 93       	push	r25
    22fe:	af 93       	push	r26
    2300:	bf 93       	push	r27
    2302:	ef 93       	push	r30
    2304:	ff 93       	push	r31
    2306:	e0 91 04 24 	lds	r30, 0x2404	; 0x802404 <tc_tce1_err_callback>
    230a:	f0 91 05 24 	lds	r31, 0x2405	; 0x802405 <tc_tce1_err_callback+0x1>
    230e:	30 97       	sbiw	r30, 0x00	; 0
    2310:	09 f0       	breq	.+2      	; 0x2314 <__vector_54+0x34>
    2312:	19 95       	eicall
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
    2318:	bf 91       	pop	r27
    231a:	af 91       	pop	r26
    231c:	9f 91       	pop	r25
    231e:	8f 91       	pop	r24
    2320:	7f 91       	pop	r23
    2322:	6f 91       	pop	r22
    2324:	5f 91       	pop	r21
    2326:	4f 91       	pop	r20
    2328:	3f 91       	pop	r19
    232a:	2f 91       	pop	r18
    232c:	0f 90       	pop	r0
    232e:	0b be       	out	0x3b, r0	; 59
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <__vector_55>:
    233a:	1f 92       	push	r1
    233c:	0f 92       	push	r0
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	0f 92       	push	r0
    2342:	11 24       	eor	r1, r1
    2344:	0b b6       	in	r0, 0x3b	; 59
    2346:	0f 92       	push	r0
    2348:	2f 93       	push	r18
    234a:	3f 93       	push	r19
    234c:	4f 93       	push	r20
    234e:	5f 93       	push	r21
    2350:	6f 93       	push	r22
    2352:	7f 93       	push	r23
    2354:	8f 93       	push	r24
    2356:	9f 93       	push	r25
    2358:	af 93       	push	r26
    235a:	bf 93       	push	r27
    235c:	ef 93       	push	r30
    235e:	ff 93       	push	r31
    2360:	e0 91 02 24 	lds	r30, 0x2402	; 0x802402 <tc_tce1_cca_callback>
    2364:	f0 91 03 24 	lds	r31, 0x2403	; 0x802403 <tc_tce1_cca_callback+0x1>
    2368:	30 97       	sbiw	r30, 0x00	; 0
    236a:	09 f0       	breq	.+2      	; 0x236e <__vector_55+0x34>
    236c:	19 95       	eicall
    236e:	ff 91       	pop	r31
    2370:	ef 91       	pop	r30
    2372:	bf 91       	pop	r27
    2374:	af 91       	pop	r26
    2376:	9f 91       	pop	r25
    2378:	8f 91       	pop	r24
    237a:	7f 91       	pop	r23
    237c:	6f 91       	pop	r22
    237e:	5f 91       	pop	r21
    2380:	4f 91       	pop	r20
    2382:	3f 91       	pop	r19
    2384:	2f 91       	pop	r18
    2386:	0f 90       	pop	r0
    2388:	0b be       	out	0x3b, r0	; 59
    238a:	0f 90       	pop	r0
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	0f 90       	pop	r0
    2390:	1f 90       	pop	r1
    2392:	18 95       	reti

00002394 <__vector_56>:
    2394:	1f 92       	push	r1
    2396:	0f 92       	push	r0
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	0f 92       	push	r0
    239c:	11 24       	eor	r1, r1
    239e:	0b b6       	in	r0, 0x3b	; 59
    23a0:	0f 92       	push	r0
    23a2:	2f 93       	push	r18
    23a4:	3f 93       	push	r19
    23a6:	4f 93       	push	r20
    23a8:	5f 93       	push	r21
    23aa:	6f 93       	push	r22
    23ac:	7f 93       	push	r23
    23ae:	8f 93       	push	r24
    23b0:	9f 93       	push	r25
    23b2:	af 93       	push	r26
    23b4:	bf 93       	push	r27
    23b6:	ef 93       	push	r30
    23b8:	ff 93       	push	r31
    23ba:	e0 91 00 24 	lds	r30, 0x2400	; 0x802400 <tc_tce1_ccb_callback>
    23be:	f0 91 01 24 	lds	r31, 0x2401	; 0x802401 <tc_tce1_ccb_callback+0x1>
    23c2:	30 97       	sbiw	r30, 0x00	; 0
    23c4:	09 f0       	breq	.+2      	; 0x23c8 <__vector_56+0x34>
    23c6:	19 95       	eicall
    23c8:	ff 91       	pop	r31
    23ca:	ef 91       	pop	r30
    23cc:	bf 91       	pop	r27
    23ce:	af 91       	pop	r26
    23d0:	9f 91       	pop	r25
    23d2:	8f 91       	pop	r24
    23d4:	7f 91       	pop	r23
    23d6:	6f 91       	pop	r22
    23d8:	5f 91       	pop	r21
    23da:	4f 91       	pop	r20
    23dc:	3f 91       	pop	r19
    23de:	2f 91       	pop	r18
    23e0:	0f 90       	pop	r0
    23e2:	0b be       	out	0x3b, r0	; 59
    23e4:	0f 90       	pop	r0
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	0f 90       	pop	r0
    23ea:	1f 90       	pop	r1
    23ec:	18 95       	reti

000023ee <__vector_108>:
    23ee:	1f 92       	push	r1
    23f0:	0f 92       	push	r0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	0f 92       	push	r0
    23f6:	11 24       	eor	r1, r1
    23f8:	0b b6       	in	r0, 0x3b	; 59
    23fa:	0f 92       	push	r0
    23fc:	2f 93       	push	r18
    23fe:	3f 93       	push	r19
    2400:	4f 93       	push	r20
    2402:	5f 93       	push	r21
    2404:	6f 93       	push	r22
    2406:	7f 93       	push	r23
    2408:	8f 93       	push	r24
    240a:	9f 93       	push	r25
    240c:	af 93       	push	r26
    240e:	bf 93       	push	r27
    2410:	ef 93       	push	r30
    2412:	ff 93       	push	r31
    2414:	e0 91 fe 23 	lds	r30, 0x23FE	; 0x8023fe <tc_tcf0_ovf_callback>
    2418:	f0 91 ff 23 	lds	r31, 0x23FF	; 0x8023ff <tc_tcf0_ovf_callback+0x1>
    241c:	30 97       	sbiw	r30, 0x00	; 0
    241e:	09 f0       	breq	.+2      	; 0x2422 <__vector_108+0x34>
    2420:	19 95       	eicall
    2422:	ff 91       	pop	r31
    2424:	ef 91       	pop	r30
    2426:	bf 91       	pop	r27
    2428:	af 91       	pop	r26
    242a:	9f 91       	pop	r25
    242c:	8f 91       	pop	r24
    242e:	7f 91       	pop	r23
    2430:	6f 91       	pop	r22
    2432:	5f 91       	pop	r21
    2434:	4f 91       	pop	r20
    2436:	3f 91       	pop	r19
    2438:	2f 91       	pop	r18
    243a:	0f 90       	pop	r0
    243c:	0b be       	out	0x3b, r0	; 59
    243e:	0f 90       	pop	r0
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	0f 90       	pop	r0
    2444:	1f 90       	pop	r1
    2446:	18 95       	reti

00002448 <__vector_109>:
    2448:	1f 92       	push	r1
    244a:	0f 92       	push	r0
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	0f 92       	push	r0
    2450:	11 24       	eor	r1, r1
    2452:	0b b6       	in	r0, 0x3b	; 59
    2454:	0f 92       	push	r0
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	ef 93       	push	r30
    246c:	ff 93       	push	r31
    246e:	e0 91 fc 23 	lds	r30, 0x23FC	; 0x8023fc <tc_tcf0_err_callback>
    2472:	f0 91 fd 23 	lds	r31, 0x23FD	; 0x8023fd <tc_tcf0_err_callback+0x1>
    2476:	30 97       	sbiw	r30, 0x00	; 0
    2478:	09 f0       	breq	.+2      	; 0x247c <__vector_109+0x34>
    247a:	19 95       	eicall
    247c:	ff 91       	pop	r31
    247e:	ef 91       	pop	r30
    2480:	bf 91       	pop	r27
    2482:	af 91       	pop	r26
    2484:	9f 91       	pop	r25
    2486:	8f 91       	pop	r24
    2488:	7f 91       	pop	r23
    248a:	6f 91       	pop	r22
    248c:	5f 91       	pop	r21
    248e:	4f 91       	pop	r20
    2490:	3f 91       	pop	r19
    2492:	2f 91       	pop	r18
    2494:	0f 90       	pop	r0
    2496:	0b be       	out	0x3b, r0	; 59
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	0f 90       	pop	r0
    249e:	1f 90       	pop	r1
    24a0:	18 95       	reti

000024a2 <__vector_110>:
    24a2:	1f 92       	push	r1
    24a4:	0f 92       	push	r0
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	0f 92       	push	r0
    24aa:	11 24       	eor	r1, r1
    24ac:	0b b6       	in	r0, 0x3b	; 59
    24ae:	0f 92       	push	r0
    24b0:	2f 93       	push	r18
    24b2:	3f 93       	push	r19
    24b4:	4f 93       	push	r20
    24b6:	5f 93       	push	r21
    24b8:	6f 93       	push	r22
    24ba:	7f 93       	push	r23
    24bc:	8f 93       	push	r24
    24be:	9f 93       	push	r25
    24c0:	af 93       	push	r26
    24c2:	bf 93       	push	r27
    24c4:	ef 93       	push	r30
    24c6:	ff 93       	push	r31
    24c8:	e0 91 fa 23 	lds	r30, 0x23FA	; 0x8023fa <tc_tcf0_cca_callback>
    24cc:	f0 91 fb 23 	lds	r31, 0x23FB	; 0x8023fb <tc_tcf0_cca_callback+0x1>
    24d0:	30 97       	sbiw	r30, 0x00	; 0
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <__vector_110+0x34>
    24d4:	19 95       	eicall
    24d6:	ff 91       	pop	r31
    24d8:	ef 91       	pop	r30
    24da:	bf 91       	pop	r27
    24dc:	af 91       	pop	r26
    24de:	9f 91       	pop	r25
    24e0:	8f 91       	pop	r24
    24e2:	7f 91       	pop	r23
    24e4:	6f 91       	pop	r22
    24e6:	5f 91       	pop	r21
    24e8:	4f 91       	pop	r20
    24ea:	3f 91       	pop	r19
    24ec:	2f 91       	pop	r18
    24ee:	0f 90       	pop	r0
    24f0:	0b be       	out	0x3b, r0	; 59
    24f2:	0f 90       	pop	r0
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	0f 90       	pop	r0
    24f8:	1f 90       	pop	r1
    24fa:	18 95       	reti

000024fc <__vector_111>:
    24fc:	1f 92       	push	r1
    24fe:	0f 92       	push	r0
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	0f 92       	push	r0
    2504:	11 24       	eor	r1, r1
    2506:	0b b6       	in	r0, 0x3b	; 59
    2508:	0f 92       	push	r0
    250a:	2f 93       	push	r18
    250c:	3f 93       	push	r19
    250e:	4f 93       	push	r20
    2510:	5f 93       	push	r21
    2512:	6f 93       	push	r22
    2514:	7f 93       	push	r23
    2516:	8f 93       	push	r24
    2518:	9f 93       	push	r25
    251a:	af 93       	push	r26
    251c:	bf 93       	push	r27
    251e:	ef 93       	push	r30
    2520:	ff 93       	push	r31
    2522:	e0 91 f8 23 	lds	r30, 0x23F8	; 0x8023f8 <tc_tcf0_ccb_callback>
    2526:	f0 91 f9 23 	lds	r31, 0x23F9	; 0x8023f9 <tc_tcf0_ccb_callback+0x1>
    252a:	30 97       	sbiw	r30, 0x00	; 0
    252c:	09 f0       	breq	.+2      	; 0x2530 <__vector_111+0x34>
    252e:	19 95       	eicall
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
    2534:	bf 91       	pop	r27
    2536:	af 91       	pop	r26
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	7f 91       	pop	r23
    253e:	6f 91       	pop	r22
    2540:	5f 91       	pop	r21
    2542:	4f 91       	pop	r20
    2544:	3f 91       	pop	r19
    2546:	2f 91       	pop	r18
    2548:	0f 90       	pop	r0
    254a:	0b be       	out	0x3b, r0	; 59
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <__vector_112>:
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	0b b6       	in	r0, 0x3b	; 59
    2562:	0f 92       	push	r0
    2564:	2f 93       	push	r18
    2566:	3f 93       	push	r19
    2568:	4f 93       	push	r20
    256a:	5f 93       	push	r21
    256c:	6f 93       	push	r22
    256e:	7f 93       	push	r23
    2570:	8f 93       	push	r24
    2572:	9f 93       	push	r25
    2574:	af 93       	push	r26
    2576:	bf 93       	push	r27
    2578:	ef 93       	push	r30
    257a:	ff 93       	push	r31
    257c:	e0 91 f6 23 	lds	r30, 0x23F6	; 0x8023f6 <tc_tcf0_ccc_callback>
    2580:	f0 91 f7 23 	lds	r31, 0x23F7	; 0x8023f7 <tc_tcf0_ccc_callback+0x1>
    2584:	30 97       	sbiw	r30, 0x00	; 0
    2586:	09 f0       	breq	.+2      	; 0x258a <__vector_112+0x34>
    2588:	19 95       	eicall
    258a:	ff 91       	pop	r31
    258c:	ef 91       	pop	r30
    258e:	bf 91       	pop	r27
    2590:	af 91       	pop	r26
    2592:	9f 91       	pop	r25
    2594:	8f 91       	pop	r24
    2596:	7f 91       	pop	r23
    2598:	6f 91       	pop	r22
    259a:	5f 91       	pop	r21
    259c:	4f 91       	pop	r20
    259e:	3f 91       	pop	r19
    25a0:	2f 91       	pop	r18
    25a2:	0f 90       	pop	r0
    25a4:	0b be       	out	0x3b, r0	; 59
    25a6:	0f 90       	pop	r0
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	0f 90       	pop	r0
    25ac:	1f 90       	pop	r1
    25ae:	18 95       	reti

000025b0 <__vector_113>:
    25b0:	1f 92       	push	r1
    25b2:	0f 92       	push	r0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	0f 92       	push	r0
    25b8:	11 24       	eor	r1, r1
    25ba:	0b b6       	in	r0, 0x3b	; 59
    25bc:	0f 92       	push	r0
    25be:	2f 93       	push	r18
    25c0:	3f 93       	push	r19
    25c2:	4f 93       	push	r20
    25c4:	5f 93       	push	r21
    25c6:	6f 93       	push	r22
    25c8:	7f 93       	push	r23
    25ca:	8f 93       	push	r24
    25cc:	9f 93       	push	r25
    25ce:	af 93       	push	r26
    25d0:	bf 93       	push	r27
    25d2:	ef 93       	push	r30
    25d4:	ff 93       	push	r31
    25d6:	e0 91 f4 23 	lds	r30, 0x23F4	; 0x8023f4 <tc_tcf0_ccd_callback>
    25da:	f0 91 f5 23 	lds	r31, 0x23F5	; 0x8023f5 <tc_tcf0_ccd_callback+0x1>
    25de:	30 97       	sbiw	r30, 0x00	; 0
    25e0:	09 f0       	breq	.+2      	; 0x25e4 <__vector_113+0x34>
    25e2:	19 95       	eicall
    25e4:	ff 91       	pop	r31
    25e6:	ef 91       	pop	r30
    25e8:	bf 91       	pop	r27
    25ea:	af 91       	pop	r26
    25ec:	9f 91       	pop	r25
    25ee:	8f 91       	pop	r24
    25f0:	7f 91       	pop	r23
    25f2:	6f 91       	pop	r22
    25f4:	5f 91       	pop	r21
    25f6:	4f 91       	pop	r20
    25f8:	3f 91       	pop	r19
    25fa:	2f 91       	pop	r18
    25fc:	0f 90       	pop	r0
    25fe:	0b be       	out	0x3b, r0	; 59
    2600:	0f 90       	pop	r0
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	0f 90       	pop	r0
    2606:	1f 90       	pop	r1
    2608:	18 95       	reti

0000260a <tc_enable>:
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	1f 92       	push	r1
    2612:	1f 92       	push	r1
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	2f b7       	in	r18, 0x3f	; 63
    261a:	2a 83       	std	Y+2, r18	; 0x02
    261c:	f8 94       	cli
    261e:	1a 81       	ldd	r17, Y+2	; 0x02
    2620:	28 2f       	mov	r18, r24
    2622:	39 2f       	mov	r19, r25
    2624:	21 15       	cp	r18, r1
    2626:	88 e0       	ldi	r24, 0x08	; 8
    2628:	38 07       	cpc	r19, r24
    262a:	49 f4       	brne	.+18     	; 0x263e <tc_enable+0x34>
    262c:	61 e0       	ldi	r22, 0x01	; 1
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    2634:	64 e0       	ldi	r22, 0x04	; 4
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    263c:	4f c0       	rjmp	.+158    	; 0x26dc <tc_enable+0xd2>
    263e:	20 34       	cpi	r18, 0x40	; 64
    2640:	88 e0       	ldi	r24, 0x08	; 8
    2642:	38 07       	cpc	r19, r24
    2644:	49 f4       	brne	.+18     	; 0x2658 <tc_enable+0x4e>
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    264e:	64 e0       	ldi	r22, 0x04	; 4
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    2656:	42 c0       	rjmp	.+132    	; 0x26dc <tc_enable+0xd2>
    2658:	21 15       	cp	r18, r1
    265a:	89 e0       	ldi	r24, 0x09	; 9
    265c:	38 07       	cpc	r19, r24
    265e:	49 f4       	brne	.+18     	; 0x2672 <tc_enable+0x68>
    2660:	61 e0       	ldi	r22, 0x01	; 1
    2662:	84 e0       	ldi	r24, 0x04	; 4
    2664:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    2668:	64 e0       	ldi	r22, 0x04	; 4
    266a:	84 e0       	ldi	r24, 0x04	; 4
    266c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    2670:	35 c0       	rjmp	.+106    	; 0x26dc <tc_enable+0xd2>
    2672:	20 34       	cpi	r18, 0x40	; 64
    2674:	89 e0       	ldi	r24, 0x09	; 9
    2676:	38 07       	cpc	r19, r24
    2678:	49 f4       	brne	.+18     	; 0x268c <tc_enable+0x82>
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	84 e0       	ldi	r24, 0x04	; 4
    267e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    2682:	64 e0       	ldi	r22, 0x04	; 4
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    268a:	28 c0       	rjmp	.+80     	; 0x26dc <tc_enable+0xd2>
    268c:	21 15       	cp	r18, r1
    268e:	8a e0       	ldi	r24, 0x0A	; 10
    2690:	38 07       	cpc	r19, r24
    2692:	49 f4       	brne	.+18     	; 0x26a6 <tc_enable+0x9c>
    2694:	61 e0       	ldi	r22, 0x01	; 1
    2696:	85 e0       	ldi	r24, 0x05	; 5
    2698:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    269c:	64 e0       	ldi	r22, 0x04	; 4
    269e:	85 e0       	ldi	r24, 0x05	; 5
    26a0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    26a4:	1b c0       	rjmp	.+54     	; 0x26dc <tc_enable+0xd2>
    26a6:	20 34       	cpi	r18, 0x40	; 64
    26a8:	8a e0       	ldi	r24, 0x0A	; 10
    26aa:	38 07       	cpc	r19, r24
    26ac:	49 f4       	brne	.+18     	; 0x26c0 <tc_enable+0xb6>
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	85 e0       	ldi	r24, 0x05	; 5
    26b2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    26b6:	64 e0       	ldi	r22, 0x04	; 4
    26b8:	85 e0       	ldi	r24, 0x05	; 5
    26ba:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <tc_enable+0xd2>
    26c0:	21 15       	cp	r18, r1
    26c2:	3b 40       	sbci	r19, 0x0B	; 11
    26c4:	49 f4       	brne	.+18     	; 0x26d8 <tc_enable+0xce>
    26c6:	61 e0       	ldi	r22, 0x01	; 1
    26c8:	86 e0       	ldi	r24, 0x06	; 6
    26ca:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    26ce:	64 e0       	ldi	r22, 0x04	; 4
    26d0:	86 e0       	ldi	r24, 0x06	; 6
    26d2:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <tc_enable+0xd2>
    26d8:	1f bf       	out	0x3f, r17	; 63
    26da:	10 c0       	rjmp	.+32     	; 0x26fc <tc_enable+0xf2>
    26dc:	80 91 80 26 	lds	r24, 0x2680	; 0x802680 <sleepmgr_locks+0x1>
    26e0:	8f 3f       	cpi	r24, 0xFF	; 255
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <tc_enable+0xdc>
    26e4:	ff cf       	rjmp	.-2      	; 0x26e4 <tc_enable+0xda>
    26e6:	8f b7       	in	r24, 0x3f	; 63
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	f8 94       	cli
    26ec:	99 81       	ldd	r25, Y+1	; 0x01
    26ee:	ef e7       	ldi	r30, 0x7F	; 127
    26f0:	f6 e2       	ldi	r31, 0x26	; 38
    26f2:	81 81       	ldd	r24, Z+1	; 0x01
    26f4:	8f 5f       	subi	r24, 0xFF	; 255
    26f6:	81 83       	std	Z+1, r24	; 0x01
    26f8:	9f bf       	out	0x3f, r25	; 63
    26fa:	1f bf       	out	0x3f, r17	; 63
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	df 91       	pop	r29
    2702:	cf 91       	pop	r28
    2704:	1f 91       	pop	r17
    2706:	08 95       	ret

00002708 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    2708:	81 15       	cp	r24, r1
    270a:	28 e0       	ldi	r18, 0x08	; 8
    270c:	92 07       	cpc	r25, r18
    270e:	29 f4       	brne	.+10     	; 0x271a <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    2710:	60 93 3a 24 	sts	0x243A, r22	; 0x80243a <tc_tcc0_ovf_callback>
    2714:	70 93 3b 24 	sts	0x243B, r23	; 0x80243b <tc_tcc0_ovf_callback+0x1>
    2718:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    271a:	80 34       	cpi	r24, 0x40	; 64
    271c:	28 e0       	ldi	r18, 0x08	; 8
    271e:	92 07       	cpc	r25, r18
    2720:	29 f4       	brne	.+10     	; 0x272c <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    2722:	60 93 2e 24 	sts	0x242E, r22	; 0x80242e <tc_tcc1_ovf_callback>
    2726:	70 93 2f 24 	sts	0x242F, r23	; 0x80242f <tc_tcc1_ovf_callback+0x1>
    272a:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    272c:	81 15       	cp	r24, r1
    272e:	29 e0       	ldi	r18, 0x09	; 9
    2730:	92 07       	cpc	r25, r18
    2732:	29 f4       	brne	.+10     	; 0x273e <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    2734:	60 93 26 24 	sts	0x2426, r22	; 0x802426 <tc_tcd0_ovf_callback>
    2738:	70 93 27 24 	sts	0x2427, r23	; 0x802427 <tc_tcd0_ovf_callback+0x1>
    273c:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    273e:	80 34       	cpi	r24, 0x40	; 64
    2740:	29 e0       	ldi	r18, 0x09	; 9
    2742:	92 07       	cpc	r25, r18
    2744:	29 f4       	brne	.+10     	; 0x2750 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    2746:	60 93 1a 24 	sts	0x241A, r22	; 0x80241a <tc_tcd1_ovf_callback>
    274a:	70 93 1b 24 	sts	0x241B, r23	; 0x80241b <tc_tcd1_ovf_callback+0x1>
    274e:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    2750:	81 15       	cp	r24, r1
    2752:	2a e0       	ldi	r18, 0x0A	; 10
    2754:	92 07       	cpc	r25, r18
    2756:	29 f4       	brne	.+10     	; 0x2762 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    2758:	60 93 12 24 	sts	0x2412, r22	; 0x802412 <tc_tce0_ovf_callback>
    275c:	70 93 13 24 	sts	0x2413, r23	; 0x802413 <tc_tce0_ovf_callback+0x1>
    2760:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    2762:	80 34       	cpi	r24, 0x40	; 64
    2764:	2a e0       	ldi	r18, 0x0A	; 10
    2766:	92 07       	cpc	r25, r18
    2768:	29 f4       	brne	.+10     	; 0x2774 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    276a:	60 93 06 24 	sts	0x2406, r22	; 0x802406 <tc_tce1_ovf_callback>
    276e:	70 93 07 24 	sts	0x2407, r23	; 0x802407 <tc_tce1_ovf_callback+0x1>
    2772:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    2774:	81 15       	cp	r24, r1
    2776:	9b 40       	sbci	r25, 0x0B	; 11
    2778:	21 f4       	brne	.+8      	; 0x2782 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    277a:	60 93 fe 23 	sts	0x23FE, r22	; 0x8023fe <tc_tcf0_ovf_callback>
    277e:	70 93 ff 23 	sts	0x23FF, r23	; 0x8023ff <tc_tcf0_ovf_callback+0x1>
    2782:	08 95       	ret

00002784 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    2788:	e0 91 3c 24 	lds	r30, 0x243C	; 0x80243c <transfer>
    278c:	f0 91 3d 24 	lds	r31, 0x243D	; 0x80243d <transfer+0x1>
    2790:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    2792:	83 ff       	sbrs	r24, 3
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    2796:	88 60       	ori	r24, 0x08	; 8
    2798:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    279a:	83 e0       	ldi	r24, 0x03	; 3
    279c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    279e:	86 ef       	ldi	r24, 0xF6	; 246
    27a0:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <transfer+0xa>
    27a4:	8a c0       	rjmp	.+276    	; 0x28ba <twim_interrupt_handler+0x136>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    27a6:	82 fd       	sbrc	r24, 2
    27a8:	02 c0       	rjmp	.+4      	; 0x27ae <twim_interrupt_handler+0x2a>
    27aa:	84 ff       	sbrs	r24, 4
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <twim_interrupt_handler+0x36>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    27ae:	83 e0       	ldi	r24, 0x03	; 3
    27b0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <transfer+0xa>
    27b8:	80 c0       	rjmp	.+256    	; 0x28ba <twim_interrupt_handler+0x136>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    27ba:	86 ff       	sbrs	r24, 6
    27bc:	45 c0       	rjmp	.+138    	; 0x2848 <twim_interrupt_handler+0xc4>
 *
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
    27be:	ec e3       	ldi	r30, 0x3C	; 60
    27c0:	f4 e2       	ldi	r31, 0x24	; 36
    27c2:	c0 81       	ld	r28, Z
    27c4:	d1 81       	ldd	r29, Z+1	; 0x01
	twi_package_t * const pkg = transfer.pkg;
    27c6:	a2 81       	ldd	r26, Z+2	; 0x02
    27c8:	b3 81       	ldd	r27, Z+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    27ca:	84 81       	ldd	r24, Z+4	; 0x04
    27cc:	95 81       	ldd	r25, Z+5	; 0x05
    27ce:	14 96       	adiw	r26, 0x04	; 4
    27d0:	2d 91       	ld	r18, X+
    27d2:	3c 91       	ld	r19, X
    27d4:	15 97       	sbiw	r26, 0x05	; 5
    27d6:	82 17       	cp	r24, r18
    27d8:	93 07       	cpc	r25, r19
    27da:	6c f4       	brge	.+26     	; 0x27f6 <twim_interrupt_handler+0x72>

		const uint8_t * const data = pkg->addr;
    27dc:	11 96       	adiw	r26, 0x01	; 1
		bus->MASTER.DATA = data[transfer.addr_count++];
    27de:	9c 01       	movw	r18, r24
    27e0:	2f 5f       	subi	r18, 0xFF	; 255
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	20 93 40 24 	sts	0x2440, r18	; 0x802440 <transfer+0x4>
    27e8:	30 93 41 24 	sts	0x2441, r19	; 0x802441 <transfer+0x5>
    27ec:	a8 0f       	add	r26, r24
    27ee:	b9 1f       	adc	r27, r25
    27f0:	8c 91       	ld	r24, X
    27f2:	8f 83       	std	Y+7, r24	; 0x07
    27f4:	62 c0       	rjmp	.+196    	; 0x28ba <twim_interrupt_handler+0x136>

	} else if (transfer.data_count < pkg->length) {
    27f6:	80 91 42 24 	lds	r24, 0x2442	; 0x802442 <transfer+0x6>
    27fa:	90 91 43 24 	lds	r25, 0x2443	; 0x802443 <transfer+0x7>
    27fe:	18 96       	adiw	r26, 0x08	; 8
    2800:	2d 91       	ld	r18, X+
    2802:	3c 91       	ld	r19, X
    2804:	19 97       	sbiw	r26, 0x09	; 9
    2806:	82 17       	cp	r24, r18
    2808:	93 07       	cpc	r25, r19
    280a:	c8 f4       	brcc	.+50     	; 0x283e <twim_interrupt_handler+0xba>

		if (transfer.read) {
    280c:	20 91 44 24 	lds	r18, 0x2444	; 0x802444 <transfer+0x8>
    2810:	22 23       	and	r18, r18
    2812:	21 f0       	breq	.+8      	; 0x281c <twim_interrupt_handler+0x98>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	81 60       	ori	r24, 0x01	; 1
    2818:	8e 83       	std	Y+6, r24	; 0x06
    281a:	4f c0       	rjmp	.+158    	; 0x28ba <twim_interrupt_handler+0x136>

		} else {
			const uint8_t * const data = pkg->buffer;
    281c:	16 96       	adiw	r26, 0x06	; 6
    281e:	2d 91       	ld	r18, X+
    2820:	3c 91       	ld	r19, X
    2822:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    2824:	ac 01       	movw	r20, r24
    2826:	4f 5f       	subi	r20, 0xFF	; 255
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	40 93 42 24 	sts	0x2442, r20	; 0x802442 <transfer+0x6>
    282e:	50 93 43 24 	sts	0x2443, r21	; 0x802443 <transfer+0x7>
    2832:	f9 01       	movw	r30, r18
    2834:	e8 0f       	add	r30, r24
    2836:	f9 1f       	adc	r31, r25
    2838:	80 81       	ld	r24, Z
    283a:	8f 83       	std	Y+7, r24	; 0x07
    283c:	3e c0       	rjmp	.+124    	; 0x28ba <twim_interrupt_handler+0x136>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	8b 83       	std	Y+3, r24	; 0x03
		transfer.status = STATUS_OK;
    2842:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <transfer+0xa>
    2846:	39 c0       	rjmp	.+114    	; 0x28ba <twim_interrupt_handler+0x136>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    2848:	88 23       	and	r24, r24
    284a:	a4 f5       	brge	.+104    	; 0x28b4 <twim_interrupt_handler+0x130>
 *  This is the master read interrupt handler that takes care of
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
    284c:	ec e3       	ldi	r30, 0x3C	; 60
    284e:	f4 e2       	ldi	r31, 0x24	; 36
    2850:	c0 81       	ld	r28, Z
    2852:	d1 81       	ldd	r29, Z+1	; 0x01
	twi_package_t * const pkg = transfer.pkg;
    2854:	a2 81       	ldd	r26, Z+2	; 0x02
    2856:	b3 81       	ldd	r27, Z+3	; 0x03

	if (transfer.data_count < pkg->length) {
    2858:	86 81       	ldd	r24, Z+6	; 0x06
    285a:	97 81       	ldd	r25, Z+7	; 0x07
    285c:	18 96       	adiw	r26, 0x08	; 8
    285e:	2d 91       	ld	r18, X+
    2860:	3c 91       	ld	r19, X
    2862:	19 97       	sbiw	r26, 0x09	; 9
    2864:	82 17       	cp	r24, r18
    2866:	93 07       	cpc	r25, r19
    2868:	f8 f4       	brcc	.+62     	; 0x28a8 <twim_interrupt_handler+0x124>

		uint8_t * const data = pkg->buffer;
    286a:	16 96       	adiw	r26, 0x06	; 6
    286c:	4d 91       	ld	r20, X+
    286e:	5c 91       	ld	r21, X
    2870:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    2872:	9c 01       	movw	r18, r24
    2874:	2f 5f       	subi	r18, 0xFF	; 255
    2876:	3f 4f       	sbci	r19, 0xFF	; 255
    2878:	20 93 42 24 	sts	0x2442, r18	; 0x802442 <transfer+0x6>
    287c:	30 93 43 24 	sts	0x2443, r19	; 0x802443 <transfer+0x7>
    2880:	fa 01       	movw	r30, r20
    2882:	e8 0f       	add	r30, r24
    2884:	f9 1f       	adc	r31, r25
    2886:	4f 81       	ldd	r20, Y+7	; 0x07
    2888:	40 83       	st	Z, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    288a:	18 96       	adiw	r26, 0x08	; 8
    288c:	8d 91       	ld	r24, X+
    288e:	9c 91       	ld	r25, X
    2890:	19 97       	sbiw	r26, 0x09	; 9
    2892:	28 17       	cp	r18, r24
    2894:	39 07       	cpc	r19, r25
    2896:	18 f4       	brcc	.+6      	; 0x289e <twim_interrupt_handler+0x11a>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2898:	82 e0       	ldi	r24, 0x02	; 2
    289a:	8b 83       	std	Y+3, r24	; 0x03
    289c:	0e c0       	rjmp	.+28     	; 0x28ba <twim_interrupt_handler+0x136>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    289e:	87 e0       	ldi	r24, 0x07	; 7
    28a0:	8b 83       	std	Y+3, r24	; 0x03
			transfer.status = STATUS_OK;
    28a2:	10 92 46 24 	sts	0x2446, r1	; 0x802446 <transfer+0xa>
    28a6:	09 c0       	rjmp	.+18     	; 0x28ba <twim_interrupt_handler+0x136>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    28a8:	83 e0       	ldi	r24, 0x03	; 3
    28aa:	8b 83       	std	Y+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    28ac:	89 ef       	ldi	r24, 0xF9	; 249
    28ae:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <transfer+0xa>
    28b2:	03 c0       	rjmp	.+6      	; 0x28ba <twim_interrupt_handler+0x136>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    28b4:	8b ef       	ldi	r24, 0xFB	; 251
    28b6:	80 93 46 24 	sts	0x2446, r24	; 0x802446 <transfer+0xa>
	}
}
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    28c0:	1f 92       	push	r1
    28c2:	0f 92       	push	r0
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	0f 92       	push	r0
    28c8:	11 24       	eor	r1, r1
    28ca:	0b b6       	in	r0, 0x3b	; 59
    28cc:	0f 92       	push	r0
    28ce:	2f 93       	push	r18
    28d0:	3f 93       	push	r19
    28d2:	4f 93       	push	r20
    28d4:	5f 93       	push	r21
    28d6:	6f 93       	push	r22
    28d8:	7f 93       	push	r23
    28da:	8f 93       	push	r24
    28dc:	9f 93       	push	r25
    28de:	af 93       	push	r26
    28e0:	bf 93       	push	r27
    28e2:	ef 93       	push	r30
    28e4:	ff 93       	push	r31
    28e6:	4e df       	rcall	.-356    	; 0x2784 <twim_interrupt_handler>
    28e8:	ff 91       	pop	r31
    28ea:	ef 91       	pop	r30
    28ec:	bf 91       	pop	r27
    28ee:	af 91       	pop	r26
    28f0:	9f 91       	pop	r25
    28f2:	8f 91       	pop	r24
    28f4:	7f 91       	pop	r23
    28f6:	6f 91       	pop	r22
    28f8:	5f 91       	pop	r21
    28fa:	4f 91       	pop	r20
    28fc:	3f 91       	pop	r19
    28fe:	2f 91       	pop	r18
    2900:	0f 90       	pop	r0
    2902:	0b be       	out	0x3b, r0	; 59
    2904:	0f 90       	pop	r0
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	0f 90       	pop	r0
    290a:	1f 90       	pop	r1
    290c:	18 95       	reti

0000290e <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
    290e:	1f 92       	push	r1
    2910:	0f 92       	push	r0
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	0f 92       	push	r0
    2916:	11 24       	eor	r1, r1
    2918:	0b b6       	in	r0, 0x3b	; 59
    291a:	0f 92       	push	r0
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	27 df       	rcall	.-434    	; 0x2784 <twim_interrupt_handler>
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	bf 91       	pop	r27
    293c:	af 91       	pop	r26
    293e:	9f 91       	pop	r25
    2940:	8f 91       	pop	r24
    2942:	7f 91       	pop	r23
    2944:	6f 91       	pop	r22
    2946:	5f 91       	pop	r21
    2948:	4f 91       	pop	r20
    294a:	3f 91       	pop	r19
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0b be       	out	0x3b, r0	; 59
    2952:	0f 90       	pop	r0
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	0f 90       	pop	r0
    2958:	1f 90       	pop	r1
    295a:	18 95       	reti

0000295c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	1f 92       	push	r1
    2962:	1f 92       	push	r1
    2964:	cd b7       	in	r28, 0x3d	; 61
    2966:	de b7       	in	r29, 0x3e	; 62
    2968:	81 11       	cpse	r24, r1
    296a:	13 c0       	rjmp	.+38     	; 0x2992 <udd_sleep_mode+0x36>
    296c:	90 91 74 25 	lds	r25, 0x2574	; 0x802574 <udd_b_idle>
    2970:	99 23       	and	r25, r25
    2972:	79 f0       	breq	.+30     	; 0x2992 <udd_sleep_mode+0x36>
    2974:	90 91 80 26 	lds	r25, 0x2680	; 0x802680 <sleepmgr_locks+0x1>
    2978:	91 11       	cpse	r25, r1
    297a:	01 c0       	rjmp	.+2      	; 0x297e <udd_sleep_mode+0x22>
    297c:	ff cf       	rjmp	.-2      	; 0x297c <udd_sleep_mode+0x20>
    297e:	9f b7       	in	r25, 0x3f	; 63
    2980:	9a 83       	std	Y+2, r25	; 0x02
    2982:	f8 94       	cli
    2984:	2a 81       	ldd	r18, Y+2	; 0x02
    2986:	ef e7       	ldi	r30, 0x7F	; 127
    2988:	f6 e2       	ldi	r31, 0x26	; 38
    298a:	91 81       	ldd	r25, Z+1	; 0x01
    298c:	91 50       	subi	r25, 0x01	; 1
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	2f bf       	out	0x3f, r18	; 63
    2992:	88 23       	and	r24, r24
    2994:	99 f0       	breq	.+38     	; 0x29bc <udd_sleep_mode+0x60>
    2996:	90 91 74 25 	lds	r25, 0x2574	; 0x802574 <udd_b_idle>
    299a:	91 11       	cpse	r25, r1
    299c:	0f c0       	rjmp	.+30     	; 0x29bc <udd_sleep_mode+0x60>
    299e:	90 91 80 26 	lds	r25, 0x2680	; 0x802680 <sleepmgr_locks+0x1>
    29a2:	9f 3f       	cpi	r25, 0xFF	; 255
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <udd_sleep_mode+0x4c>
    29a6:	ff cf       	rjmp	.-2      	; 0x29a6 <udd_sleep_mode+0x4a>
    29a8:	9f b7       	in	r25, 0x3f	; 63
    29aa:	99 83       	std	Y+1, r25	; 0x01
    29ac:	f8 94       	cli
    29ae:	29 81       	ldd	r18, Y+1	; 0x01
    29b0:	ef e7       	ldi	r30, 0x7F	; 127
    29b2:	f6 e2       	ldi	r31, 0x26	; 38
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	9f 5f       	subi	r25, 0xFF	; 255
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	2f bf       	out	0x3f, r18	; 63
    29bc:	80 93 74 25 	sts	0x2574, r24	; 0x802574 <udd_b_idle>
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	08 95       	ret

000029ca <udd_ep_get_ctrl>:
    29ca:	48 2f       	mov	r20, r24
    29cc:	28 2f       	mov	r18, r24
    29ce:	2f 70       	andi	r18, 0x0F	; 15
    29d0:	82 2f       	mov	r24, r18
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	04 2e       	mov	r0, r20
    29da:	00 0c       	add	r0, r0
    29dc:	55 0b       	sbc	r21, r21
    29de:	25 2f       	mov	r18, r21
    29e0:	22 1f       	adc	r18, r18
    29e2:	22 27       	eor	r18, r18
    29e4:	22 1f       	adc	r18, r18
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	82 0f       	add	r24, r18
    29ea:	93 1f       	adc	r25, r19
    29ec:	88 0f       	add	r24, r24
    29ee:	99 1f       	adc	r25, r25
    29f0:	88 0f       	add	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	80 5c       	subi	r24, 0xC0	; 192
    29fa:	9a 4d       	sbci	r25, 0xDA	; 218
    29fc:	08 95       	ret

000029fe <udd_ctrl_init>:
    29fe:	0f 93       	push	r16
    2a00:	e8 ec       	ldi	r30, 0xC8	; 200
    2a02:	f4 e0       	ldi	r31, 0x04	; 4
    2a04:	80 81       	ld	r24, Z
    2a06:	8f 7d       	andi	r24, 0xDF	; 223
    2a08:	80 83       	st	Z, r24
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8f 7d       	andi	r24, 0xDF	; 223
    2a0e:	80 83       	st	Z, r24
    2a10:	e8 e4       	ldi	r30, 0x48	; 72
    2a12:	f5 e2       	ldi	r31, 0x25	; 37
    2a14:	02 e0       	ldi	r16, 0x02	; 2
    2a16:	05 93       	las	Z, r16
    2a18:	10 92 4a 25 	sts	0x254A, r1	; 0x80254a <udd_sram+0x16>
    2a1c:	10 92 4b 25 	sts	0x254B, r1	; 0x80254b <udd_sram+0x17>
    2a20:	00 e2       	ldi	r16, 0x20	; 32
    2a22:	06 93       	lac	Z, r16
    2a24:	00 e4       	ldi	r16, 0x40	; 64
    2a26:	06 93       	lac	Z, r16
    2a28:	e0 e4       	ldi	r30, 0x40	; 64
    2a2a:	f5 e2       	ldi	r31, 0x25	; 37
    2a2c:	00 e4       	ldi	r16, 0x40	; 64
    2a2e:	06 93       	lac	Z, r16
    2a30:	ed e8       	ldi	r30, 0x8D	; 141
    2a32:	f6 e2       	ldi	r31, 0x26	; 38
    2a34:	14 86       	std	Z+12, r1	; 0x0c
    2a36:	15 86       	std	Z+13, r1	; 0x0d
    2a38:	16 86       	std	Z+14, r1	; 0x0e
    2a3a:	17 86       	std	Z+15, r1	; 0x0f
    2a3c:	12 86       	std	Z+10, r1	; 0x0a
    2a3e:	13 86       	std	Z+11, r1	; 0x0b
    2a40:	10 92 30 25 	sts	0x2530, r1	; 0x802530 <udd_ep_control_state>
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <udd_ctrl_stall_data>:
    2a48:	0f 93       	push	r16
    2a4a:	85 e0       	ldi	r24, 0x05	; 5
    2a4c:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udd_ep_control_state>
    2a50:	e9 e4       	ldi	r30, 0x49	; 73
    2a52:	f5 e2       	ldi	r31, 0x25	; 37
    2a54:	04 e0       	ldi	r16, 0x04	; 4
    2a56:	05 93       	las	Z, r16
    2a58:	e1 e4       	ldi	r30, 0x41	; 65
    2a5a:	f5 e2       	ldi	r31, 0x25	; 37
    2a5c:	04 e0       	ldi	r16, 0x04	; 4
    2a5e:	05 93       	las	Z, r16
    2a60:	0f 91       	pop	r16
    2a62:	08 95       	ret

00002a64 <udd_ctrl_send_zlp_in>:
    2a64:	0f 93       	push	r16
    2a66:	83 e0       	ldi	r24, 0x03	; 3
    2a68:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udd_ep_control_state>
    2a6c:	10 92 4a 25 	sts	0x254A, r1	; 0x80254a <udd_sram+0x16>
    2a70:	10 92 4b 25 	sts	0x254B, r1	; 0x80254b <udd_sram+0x17>
    2a74:	e8 e4       	ldi	r30, 0x48	; 72
    2a76:	f5 e2       	ldi	r31, 0x25	; 37
    2a78:	02 e0       	ldi	r16, 0x02	; 2
    2a7a:	06 93       	lac	Z, r16
    2a7c:	0f 91       	pop	r16
    2a7e:	08 95       	ret

00002a80 <udd_ctrl_send_zlp_out>:
    2a80:	0f 93       	push	r16
    2a82:	84 e0       	ldi	r24, 0x04	; 4
    2a84:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udd_ep_control_state>
    2a88:	e0 e4       	ldi	r30, 0x40	; 64
    2a8a:	f5 e2       	ldi	r31, 0x25	; 37
    2a8c:	02 e0       	ldi	r16, 0x02	; 2
    2a8e:	06 93       	lac	Z, r16
    2a90:	0f 91       	pop	r16
    2a92:	08 95       	ret

00002a94 <udd_ctrl_endofrequest>:
    2a94:	e0 91 99 26 	lds	r30, 0x2699	; 0x802699 <udd_g_ctrlreq+0xc>
    2a98:	f0 91 9a 26 	lds	r31, 0x269A	; 0x80269a <udd_g_ctrlreq+0xd>
    2a9c:	30 97       	sbiw	r30, 0x00	; 0
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <udd_ctrl_endofrequest+0xe>
    2aa0:	19 95       	eicall
    2aa2:	08 95       	ret

00002aa4 <udd_ep_get_size>:
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	81 81       	ldd	r24, Z+1	; 0x01
    2aa8:	e8 2f       	mov	r30, r24
    2aaa:	e7 70       	andi	r30, 0x07	; 7
    2aac:	8e 2f       	mov	r24, r30
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	31 97       	sbiw	r30, 0x01	; 1
    2ab4:	e7 30       	cpi	r30, 0x07	; 7
    2ab6:	f1 05       	cpc	r31, r1
    2ab8:	30 f4       	brcc	.+12     	; 0x2ac6 <udd_ep_get_size+0x22>
    2aba:	88 27       	eor	r24, r24
    2abc:	e2 50       	subi	r30, 0x02	; 2
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac2:	0c 94 7f 26 	jmp	0x4cfe	; 0x4cfe <__tablejump2__>
    2ac6:	88 e0       	ldi	r24, 0x08	; 8
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	08 95       	ret
    2acc:	80 e2       	ldi	r24, 0x20	; 32
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	08 95       	ret
    2ad2:	80 e4       	ldi	r24, 0x40	; 64
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	08 95       	ret
    2ad8:	80 e8       	ldi	r24, 0x80	; 128
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	08 95       	ret
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	08 95       	ret
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	92 e0       	ldi	r25, 0x02	; 2
    2ae8:	08 95       	ret
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	93 e0       	ldi	r25, 0x03	; 3
    2aee:	08 95       	ret
    2af0:	80 e1       	ldi	r24, 0x10	; 16
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	08 95       	ret

00002af6 <udd_ep_get_job>:
    2af6:	28 2f       	mov	r18, r24
    2af8:	2f 70       	andi	r18, 0x0F	; 15
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	a9 01       	movw	r20, r18
    2afe:	44 0f       	add	r20, r20
    2b00:	55 1f       	adc	r21, r21
    2b02:	08 2e       	mov	r0, r24
    2b04:	00 0c       	add	r0, r0
    2b06:	99 0b       	sbc	r25, r25
    2b08:	29 2f       	mov	r18, r25
    2b0a:	22 1f       	adc	r18, r18
    2b0c:	22 27       	eor	r18, r18
    2b0e:	22 1f       	adc	r18, r18
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	24 0f       	add	r18, r20
    2b14:	35 1f       	adc	r19, r21
    2b16:	22 50       	subi	r18, 0x02	; 2
    2b18:	31 09       	sbc	r19, r1
    2b1a:	c9 01       	movw	r24, r18
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	88 53       	subi	r24, 0x38	; 56
    2b2e:	9b 4d       	sbci	r25, 0xDB	; 219
    2b30:	08 95       	ret

00002b32 <udd_ep_init>:
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	18 2f       	mov	r17, r24
    2b3a:	86 2f       	mov	r24, r22
    2b3c:	83 70       	andi	r24, 0x03	; 3
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	29 f0       	breq	.+10     	; 0x2b4c <udd_ep_init+0x1a>
    2b42:	10 f0       	brcs	.+4      	; 0x2b48 <udd_ep_init+0x16>
    2b44:	d0 e8       	ldi	r29, 0x80	; 128
    2b46:	03 c0       	rjmp	.+6      	; 0x2b4e <udd_ep_init+0x1c>
    2b48:	d0 e4       	ldi	r29, 0x40	; 64
    2b4a:	01 c0       	rjmp	.+2      	; 0x2b4e <udd_ep_init+0x1c>
    2b4c:	d0 ec       	ldi	r29, 0xC0	; 192
    2b4e:	40 34       	cpi	r20, 0x40	; 64
    2b50:	51 05       	cpc	r21, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <udd_ep_init+0x24>
    2b54:	65 c0       	rjmp	.+202    	; 0x2c20 <udd_ep_init+0xee>
    2b56:	58 f4       	brcc	.+22     	; 0x2b6e <udd_ep_init+0x3c>
    2b58:	40 31       	cpi	r20, 0x10	; 16
    2b5a:	51 05       	cpc	r21, r1
    2b5c:	e9 f0       	breq	.+58     	; 0x2b98 <udd_ep_init+0x66>
    2b5e:	40 32       	cpi	r20, 0x20	; 32
    2b60:	51 05       	cpc	r21, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <udd_ep_init+0x34>
    2b64:	5b c0       	rjmp	.+182    	; 0x2c1c <udd_ep_init+0xea>
    2b66:	48 30       	cpi	r20, 0x08	; 8
    2b68:	51 05       	cpc	r21, r1
    2b6a:	c1 f4       	brne	.+48     	; 0x2b9c <udd_ep_init+0x6a>
    2b6c:	63 c0       	rjmp	.+198    	; 0x2c34 <udd_ep_init+0x102>
    2b6e:	41 15       	cp	r20, r1
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	58 07       	cpc	r21, r24
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <udd_ep_init+0x46>
    2b76:	58 c0       	rjmp	.+176    	; 0x2c28 <udd_ep_init+0xf6>
    2b78:	28 f4       	brcc	.+10     	; 0x2b84 <udd_ep_init+0x52>
    2b7a:	40 38       	cpi	r20, 0x80	; 128
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <udd_ep_init+0x50>
    2b80:	51 c0       	rjmp	.+162    	; 0x2c24 <udd_ep_init+0xf2>
    2b82:	0c c0       	rjmp	.+24     	; 0x2b9c <udd_ep_init+0x6a>
    2b84:	41 15       	cp	r20, r1
    2b86:	82 e0       	ldi	r24, 0x02	; 2
    2b88:	58 07       	cpc	r21, r24
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <udd_ep_init+0x5c>
    2b8c:	4f c0       	rjmp	.+158    	; 0x2c2c <udd_ep_init+0xfa>
    2b8e:	4f 3f       	cpi	r20, 0xFF	; 255
    2b90:	53 40       	sbci	r21, 0x03	; 3
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <udd_ep_init+0x64>
    2b94:	4d c0       	rjmp	.+154    	; 0x2c30 <udd_ep_init+0xfe>
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <udd_ep_init+0x6a>
    2b98:	c1 e0       	ldi	r28, 0x01	; 1
    2b9a:	4d c0       	rjmp	.+154    	; 0x2c36 <udd_ep_init+0x104>
    2b9c:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
    2ba0:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	11 f1       	breq	.+68     	; 0x2bec <udd_ep_init+0xba>
    2ba8:	2f e5       	ldi	r18, 0x5F	; 95
    2baa:	32 e2       	ldi	r19, 0x22	; 34
    2bac:	3f 93       	push	r19
    2bae:	2f 93       	push	r18
    2bb0:	25 ec       	ldi	r18, 0xC5	; 197
    2bb2:	31 e2       	ldi	r19, 0x21	; 33
    2bb4:	3f 93       	push	r19
    2bb6:	2f 93       	push	r18
    2bb8:	21 ea       	ldi	r18, 0xA1	; 161
    2bba:	35 e0       	ldi	r19, 0x05	; 5
    2bbc:	3f 93       	push	r19
    2bbe:	2f 93       	push	r18
    2bc0:	23 e0       	ldi	r18, 0x03	; 3
    2bc2:	2f 93       	push	r18
    2bc4:	22 ec       	ldi	r18, 0xC2	; 194
    2bc6:	2f 93       	push	r18
    2bc8:	2b ec       	ldi	r18, 0xCB	; 203
    2bca:	31 e2       	ldi	r19, 0x21	; 33
    2bcc:	3f 93       	push	r19
    2bce:	2f 93       	push	r18
    2bd0:	1f 92       	push	r1
    2bd2:	21 e0       	ldi	r18, 0x01	; 1
    2bd4:	2f 93       	push	r18
    2bd6:	9f 93       	push	r25
    2bd8:	8f 93       	push	r24
    2bda:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    2bde:	8d b7       	in	r24, 0x3d	; 61
    2be0:	9e b7       	in	r25, 0x3e	; 62
    2be2:	0e 96       	adiw	r24, 0x0e	; 14
    2be4:	8d bf       	out	0x3d, r24	; 61
    2be6:	9e bf       	out	0x3e, r25	; 62
    2be8:	c0 e0       	ldi	r28, 0x00	; 0
    2bea:	25 c0       	rjmp	.+74     	; 0x2c36 <udd_ep_init+0x104>
    2bec:	83 e0       	ldi	r24, 0x03	; 3
    2bee:	8f 93       	push	r24
    2bf0:	82 ec       	ldi	r24, 0xC2	; 194
    2bf2:	8f 93       	push	r24
    2bf4:	8b ec       	ldi	r24, 0xCB	; 203
    2bf6:	91 e2       	ldi	r25, 0x21	; 33
    2bf8:	9f 93       	push	r25
    2bfa:	8f 93       	push	r24
    2bfc:	85 ec       	ldi	r24, 0xC5	; 197
    2bfe:	91 e2       	ldi	r25, 0x21	; 33
    2c00:	9f 93       	push	r25
    2c02:	8f 93       	push	r24
    2c04:	80 e8       	ldi	r24, 0x80	; 128
    2c06:	95 e0       	ldi	r25, 0x05	; 5
    2c08:	9f 93       	push	r25
    2c0a:	8f 93       	push	r24
    2c0c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    2c10:	8d b7       	in	r24, 0x3d	; 61
    2c12:	9e b7       	in	r25, 0x3e	; 62
    2c14:	08 96       	adiw	r24, 0x08	; 8
    2c16:	8d bf       	out	0x3d, r24	; 61
    2c18:	9e bf       	out	0x3e, r25	; 62
    2c1a:	ff cf       	rjmp	.-2      	; 0x2c1a <udd_ep_init+0xe8>
    2c1c:	c2 e0       	ldi	r28, 0x02	; 2
    2c1e:	0b c0       	rjmp	.+22     	; 0x2c36 <udd_ep_init+0x104>
    2c20:	c3 e0       	ldi	r28, 0x03	; 3
    2c22:	09 c0       	rjmp	.+18     	; 0x2c36 <udd_ep_init+0x104>
    2c24:	c4 e0       	ldi	r28, 0x04	; 4
    2c26:	07 c0       	rjmp	.+14     	; 0x2c36 <udd_ep_init+0x104>
    2c28:	c5 e0       	ldi	r28, 0x05	; 5
    2c2a:	05 c0       	rjmp	.+10     	; 0x2c36 <udd_ep_init+0x104>
    2c2c:	c6 e0       	ldi	r28, 0x06	; 6
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <udd_ep_init+0x104>
    2c30:	c7 e0       	ldi	r28, 0x07	; 7
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <udd_ep_init+0x104>
    2c34:	c0 e0       	ldi	r28, 0x00	; 0
    2c36:	81 2f       	mov	r24, r17
    2c38:	c8 de       	rcall	.-624    	; 0x29ca <udd_ep_get_ctrl>
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	11 82       	std	Z+1, r1	; 0x01
    2c3e:	86 e0       	ldi	r24, 0x06	; 6
    2c40:	80 83       	st	Z, r24
    2c42:	cd 2b       	or	r28, r29
    2c44:	c1 83       	std	Z+1, r28	; 0x01
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	08 95       	ret

00002c4e <udd_ctrl_in_sent>:
    2c4e:	0f 93       	push	r16
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
    2c54:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_ep_control_state>
    2c58:	83 30       	cpi	r24, 0x03	; 3
    2c5a:	19 f4       	brne	.+6      	; 0x2c62 <udd_ctrl_in_sent+0x14>
    2c5c:	1b df       	rcall	.-458    	; 0x2a94 <udd_ctrl_endofrequest>
    2c5e:	cf de       	rcall	.-610    	; 0x29fe <udd_ctrl_init>
    2c60:	9d c0       	rjmp	.+314    	; 0x2d9c <udd_ctrl_in_sent+0x14e>
    2c62:	20 91 da 23 	lds	r18, 0x23DA	; 0x8023da <test_case_ptr>
    2c66:	30 91 db 23 	lds	r19, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    2c6a:	21 15       	cp	r18, r1
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	19 f1       	breq	.+70     	; 0x2cb6 <udd_ctrl_in_sent+0x68>
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	d9 f1       	breq	.+118    	; 0x2cea <udd_ctrl_in_sent+0x9c>
    2c74:	8f e5       	ldi	r24, 0x5F	; 95
    2c76:	92 e2       	ldi	r25, 0x22	; 34
    2c78:	9f 93       	push	r25
    2c7a:	8f 93       	push	r24
    2c7c:	85 ef       	ldi	r24, 0xF5	; 245
    2c7e:	91 e2       	ldi	r25, 0x21	; 33
    2c80:	9f 93       	push	r25
    2c82:	8f 93       	push	r24
    2c84:	81 ee       	ldi	r24, 0xE1	; 225
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	9f 93       	push	r25
    2c8a:	8f 93       	push	r24
    2c8c:	84 e0       	ldi	r24, 0x04	; 4
    2c8e:	8f 93       	push	r24
    2c90:	81 e4       	ldi	r24, 0x41	; 65
    2c92:	8f 93       	push	r24
    2c94:	8b ec       	ldi	r24, 0xCB	; 203
    2c96:	91 e2       	ldi	r25, 0x21	; 33
    2c98:	9f 93       	push	r25
    2c9a:	8f 93       	push	r24
    2c9c:	1f 92       	push	r1
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8f 93       	push	r24
    2ca2:	3f 93       	push	r19
    2ca4:	2f 93       	push	r18
    2ca6:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    2caa:	8d b7       	in	r24, 0x3d	; 61
    2cac:	9e b7       	in	r25, 0x3e	; 62
    2cae:	0e 96       	adiw	r24, 0x0e	; 14
    2cb0:	8d bf       	out	0x3d, r24	; 61
    2cb2:	9e bf       	out	0x3e, r25	; 62
    2cb4:	1a c0       	rjmp	.+52     	; 0x2cea <udd_ctrl_in_sent+0x9c>
    2cb6:	82 30       	cpi	r24, 0x02	; 2
    2cb8:	c1 f0       	breq	.+48     	; 0x2cea <udd_ctrl_in_sent+0x9c>
    2cba:	84 e0       	ldi	r24, 0x04	; 4
    2cbc:	8f 93       	push	r24
    2cbe:	81 e4       	ldi	r24, 0x41	; 65
    2cc0:	8f 93       	push	r24
    2cc2:	8b ec       	ldi	r24, 0xCB	; 203
    2cc4:	91 e2       	ldi	r25, 0x21	; 33
    2cc6:	9f 93       	push	r25
    2cc8:	8f 93       	push	r24
    2cca:	85 ef       	ldi	r24, 0xF5	; 245
    2ccc:	91 e2       	ldi	r25, 0x21	; 33
    2cce:	9f 93       	push	r25
    2cd0:	8f 93       	push	r24
    2cd2:	80 ec       	ldi	r24, 0xC0	; 192
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	9f 93       	push	r25
    2cd8:	8f 93       	push	r24
    2cda:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    2cde:	ed b7       	in	r30, 0x3d	; 61
    2ce0:	fe b7       	in	r31, 0x3e	; 62
    2ce2:	38 96       	adiw	r30, 0x08	; 8
    2ce4:	ed bf       	out	0x3d, r30	; 61
    2ce6:	fe bf       	out	0x3e, r31	; 62
    2ce8:	ff cf       	rjmp	.-2      	; 0x2ce8 <udd_ctrl_in_sent+0x9a>
    2cea:	c0 91 97 26 	lds	r28, 0x2697	; 0x802697 <udd_g_ctrlreq+0xa>
    2cee:	d0 91 98 26 	lds	r29, 0x2698	; 0x802698 <udd_g_ctrlreq+0xb>
    2cf2:	20 91 2c 25 	lds	r18, 0x252C	; 0x80252c <udd_ctrl_payload_nb_trans>
    2cf6:	30 91 2d 25 	lds	r19, 0x252D	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    2cfa:	c2 1b       	sub	r28, r18
    2cfc:	d3 0b       	sbc	r29, r19
    2cfe:	49 f5       	brne	.+82     	; 0x2d52 <udd_ctrl_in_sent+0x104>
    2d00:	80 91 2e 25 	lds	r24, 0x252E	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    2d04:	90 91 2f 25 	lds	r25, 0x252F	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    2d08:	82 0f       	add	r24, r18
    2d0a:	93 1f       	adc	r25, r19
    2d0c:	80 93 2e 25 	sts	0x252E, r24	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    2d10:	90 93 2f 25 	sts	0x252F, r25	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    2d14:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    2d18:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    2d1c:	82 17       	cp	r24, r18
    2d1e:	93 07       	cpc	r25, r19
    2d20:	21 f0       	breq	.+8      	; 0x2d2a <udd_ctrl_in_sent+0xdc>
    2d22:	80 91 47 24 	lds	r24, 0x2447	; 0x802447 <b_shortpacket.5894>
    2d26:	88 23       	and	r24, r24
    2d28:	11 f0       	breq	.+4      	; 0x2d2e <udd_ctrl_in_sent+0xe0>
    2d2a:	aa de       	rcall	.-684    	; 0x2a80 <udd_ctrl_send_zlp_out>
    2d2c:	37 c0       	rjmp	.+110    	; 0x2d9c <udd_ctrl_in_sent+0x14e>
    2d2e:	80 91 9b 26 	lds	r24, 0x269B	; 0x80269b <udd_g_ctrlreq+0xe>
    2d32:	90 91 9c 26 	lds	r25, 0x269C	; 0x80269c <udd_g_ctrlreq+0xf>
    2d36:	00 97       	sbiw	r24, 0x00	; 0
    2d38:	61 f0       	breq	.+24     	; 0x2d52 <udd_ctrl_in_sent+0x104>
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	19 95       	eicall
    2d3e:	88 23       	and	r24, r24
    2d40:	41 f0       	breq	.+16     	; 0x2d52 <udd_ctrl_in_sent+0x104>
    2d42:	10 92 2c 25 	sts	0x252C, r1	; 0x80252c <udd_ctrl_payload_nb_trans>
    2d46:	10 92 2d 25 	sts	0x252D, r1	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    2d4a:	c0 91 97 26 	lds	r28, 0x2697	; 0x802697 <udd_g_ctrlreq+0xa>
    2d4e:	d0 91 98 26 	lds	r29, 0x2698	; 0x802698 <udd_g_ctrlreq+0xb>
    2d52:	c0 34       	cpi	r28, 0x40	; 64
    2d54:	d1 05       	cpc	r29, r1
    2d56:	28 f0       	brcs	.+10     	; 0x2d62 <udd_ctrl_in_sent+0x114>
    2d58:	10 92 47 24 	sts	0x2447, r1	; 0x802447 <b_shortpacket.5894>
    2d5c:	c0 e4       	ldi	r28, 0x40	; 64
    2d5e:	d0 e0       	ldi	r29, 0x00	; 0
    2d60:	03 c0       	rjmp	.+6      	; 0x2d68 <udd_ctrl_in_sent+0x11a>
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	80 93 47 24 	sts	0x2447, r24	; 0x802447 <b_shortpacket.5894>
    2d68:	e4 e3       	ldi	r30, 0x34	; 52
    2d6a:	f5 e2       	ldi	r31, 0x25	; 37
    2d6c:	c6 8b       	std	Z+22, r28	; 0x16
    2d6e:	d7 8b       	std	Z+23, r29	; 0x17
    2d70:	20 91 95 26 	lds	r18, 0x2695	; 0x802695 <udd_g_ctrlreq+0x8>
    2d74:	30 91 96 26 	lds	r19, 0x2696	; 0x802696 <udd_g_ctrlreq+0x9>
    2d78:	80 91 2c 25 	lds	r24, 0x252C	; 0x80252c <udd_ctrl_payload_nb_trans>
    2d7c:	90 91 2d 25 	lds	r25, 0x252D	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    2d80:	28 0f       	add	r18, r24
    2d82:	39 1f       	adc	r19, r25
    2d84:	20 8f       	std	Z+24, r18	; 0x18
    2d86:	31 8f       	std	Z+25, r19	; 0x19
    2d88:	8c 0f       	add	r24, r28
    2d8a:	9d 1f       	adc	r25, r29
    2d8c:	80 93 2c 25 	sts	0x252C, r24	; 0x80252c <udd_ctrl_payload_nb_trans>
    2d90:	90 93 2d 25 	sts	0x252D, r25	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    2d94:	e8 e4       	ldi	r30, 0x48	; 72
    2d96:	f5 e2       	ldi	r31, 0x25	; 37
    2d98:	02 e0       	ldi	r16, 0x02	; 2
    2d9a:	06 93       	lac	Z, r16
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	0f 91       	pop	r16
    2da2:	08 95       	ret

00002da4 <udd_ep_trans_complet>:
    2da4:	8f 92       	push	r8
    2da6:	9f 92       	push	r9
    2da8:	af 92       	push	r10
    2daa:	bf 92       	push	r11
    2dac:	cf 92       	push	r12
    2dae:	df 92       	push	r13
    2db0:	ef 92       	push	r14
    2db2:	ff 92       	push	r15
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
    2dbc:	18 2f       	mov	r17, r24
    2dbe:	9b de       	rcall	.-714    	; 0x2af6 <udd_ep_get_job>
    2dc0:	ec 01       	movw	r28, r24
    2dc2:	81 2f       	mov	r24, r17
    2dc4:	02 de       	rcall	.-1020   	; 0x29ca <udd_ep_get_ctrl>
    2dc6:	7c 01       	movw	r14, r24
    2dc8:	6d de       	rcall	.-806    	; 0x2aa4 <udd_ep_get_size>
    2dca:	5c 01       	movw	r10, r24
    2dcc:	11 23       	and	r17, r17
    2dce:	0c f0       	brlt	.+2      	; 0x2dd2 <udd_ep_trans_complet+0x2e>
    2dd0:	4b c0       	rjmp	.+150    	; 0x2e68 <udd_ep_trans_complet+0xc4>
    2dd2:	f7 01       	movw	r30, r14
    2dd4:	26 81       	ldd	r18, Z+6	; 0x06
    2dd6:	37 81       	ldd	r19, Z+7	; 0x07
    2dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dda:	9e 81       	ldd	r25, Y+6	; 0x06
    2ddc:	82 0f       	add	r24, r18
    2dde:	93 1f       	adc	r25, r19
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	2b 81       	ldd	r18, Y+3	; 0x03
    2de6:	3c 81       	ldd	r19, Y+4	; 0x04
    2de8:	82 17       	cp	r24, r18
    2dea:	93 07       	cpc	r25, r19
    2dec:	81 f1       	breq	.+96     	; 0x2e4e <udd_ep_trans_complet+0xaa>
    2dee:	28 1b       	sub	r18, r24
    2df0:	39 0b       	sbc	r19, r25
    2df2:	21 15       	cp	r18, r1
    2df4:	f4 e0       	ldi	r31, 0x04	; 4
    2df6:	3f 07       	cpc	r19, r31
    2df8:	40 f0       	brcs	.+16     	; 0x2e0a <udd_ep_trans_complet+0x66>
    2dfa:	2f ef       	ldi	r18, 0xFF	; 255
    2dfc:	33 e0       	ldi	r19, 0x03	; 3
    2dfe:	c9 01       	movw	r24, r18
    2e00:	b5 01       	movw	r22, r10
    2e02:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    2e06:	28 1b       	sub	r18, r24
    2e08:	39 0b       	sbc	r19, r25
    2e0a:	88 81       	ld	r24, Y
    2e0c:	81 ff       	sbrs	r24, 1
    2e0e:	08 c0       	rjmp	.+16     	; 0x2e20 <udd_ep_trans_complet+0x7c>
    2e10:	c9 01       	movw	r24, r18
    2e12:	b5 01       	movw	r22, r10
    2e14:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    2e18:	89 2b       	or	r24, r25
    2e1a:	21 f0       	breq	.+8      	; 0x2e24 <udd_ep_trans_complet+0x80>
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	03 c0       	rjmp	.+6      	; 0x2e26 <udd_ep_trans_complet+0x82>
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <udd_ep_trans_complet+0x82>
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	88 81       	ld	r24, Y
    2e28:	90 fb       	bst	r25, 0
    2e2a:	81 f9       	bld	r24, 1
    2e2c:	88 83       	st	Y, r24
    2e2e:	f7 01       	movw	r30, r14
    2e30:	16 82       	std	Z+6, r1	; 0x06
    2e32:	17 82       	std	Z+7, r1	; 0x07
    2e34:	22 83       	std	Z+2, r18	; 0x02
    2e36:	33 83       	std	Z+3, r19	; 0x03
    2e38:	29 81       	ldd	r18, Y+1	; 0x01
    2e3a:	3a 81       	ldd	r19, Y+2	; 0x02
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	82 0f       	add	r24, r18
    2e42:	93 1f       	adc	r25, r19
    2e44:	84 83       	std	Z+4, r24	; 0x04
    2e46:	95 83       	std	Z+5, r25	; 0x05
    2e48:	02 e0       	ldi	r16, 0x02	; 2
    2e4a:	06 93       	lac	Z, r16
    2e4c:	a0 c0       	rjmp	.+320    	; 0x2f8e <udd_ep_trans_complet+0x1ea>
    2e4e:	88 81       	ld	r24, Y
    2e50:	81 ff       	sbrs	r24, 1
    2e52:	8f c0       	rjmp	.+286    	; 0x2f72 <udd_ep_trans_complet+0x1ce>
    2e54:	8d 7f       	andi	r24, 0xFD	; 253
    2e56:	88 83       	st	Y, r24
    2e58:	f7 01       	movw	r30, r14
    2e5a:	16 82       	std	Z+6, r1	; 0x06
    2e5c:	17 82       	std	Z+7, r1	; 0x07
    2e5e:	12 82       	std	Z+2, r1	; 0x02
    2e60:	13 82       	std	Z+3, r1	; 0x03
    2e62:	02 e0       	ldi	r16, 0x02	; 2
    2e64:	06 93       	lac	Z, r16
    2e66:	93 c0       	rjmp	.+294    	; 0x2f8e <udd_ep_trans_complet+0x1ea>
    2e68:	f7 01       	movw	r30, r14
    2e6a:	c2 80       	ldd	r12, Z+2	; 0x02
    2e6c:	d3 80       	ldd	r13, Z+3	; 0x03
    2e6e:	88 81       	ld	r24, Y
    2e70:	82 ff       	sbrs	r24, 2
    2e72:	1f c0       	rjmp	.+62     	; 0x2eb2 <udd_ep_trans_complet+0x10e>
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	21 2f       	mov	r18, r17
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	21 50       	subi	r18, 0x01	; 1
    2e7e:	31 09       	sbc	r19, r1
    2e80:	00 24       	eor	r0, r0
    2e82:	36 95       	lsr	r19
    2e84:	27 95       	ror	r18
    2e86:	07 94       	ror	r0
    2e88:	36 95       	lsr	r19
    2e8a:	27 95       	ror	r18
    2e8c:	07 94       	ror	r0
    2e8e:	32 2f       	mov	r19, r18
    2e90:	20 2d       	mov	r18, r0
    2e92:	28 5b       	subi	r18, 0xB8	; 184
    2e94:	3b 4d       	sbci	r19, 0xDB	; 219
    2e96:	89 80       	ldd	r8, Y+1	; 0x01
    2e98:	9a 80       	ldd	r9, Y+2	; 0x02
    2e9a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e9c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e9e:	b5 01       	movw	r22, r10
    2ea0:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    2ea4:	ac 01       	movw	r20, r24
    2ea6:	b9 01       	movw	r22, r18
    2ea8:	c4 01       	movw	r24, r8
    2eaa:	8e 0f       	add	r24, r30
    2eac:	9f 1f       	adc	r25, r31
    2eae:	0e 94 80 27 	call	0x4f00	; 0x4f00 <memcpy>
    2eb2:	2d 81       	ldd	r18, Y+5	; 0x05
    2eb4:	3e 81       	ldd	r19, Y+6	; 0x06
    2eb6:	2c 0d       	add	r18, r12
    2eb8:	3d 1d       	adc	r19, r13
    2eba:	2d 83       	std	Y+5, r18	; 0x05
    2ebc:	3e 83       	std	Y+6, r19	; 0x06
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec2:	82 17       	cp	r24, r18
    2ec4:	93 07       	cpc	r25, r19
    2ec6:	10 f4       	brcc	.+4      	; 0x2ecc <udd_ep_trans_complet+0x128>
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	9e 83       	std	Y+6, r25	; 0x06
    2ecc:	f7 01       	movw	r30, r14
    2ece:	26 81       	ldd	r18, Z+6	; 0x06
    2ed0:	37 81       	ldd	r19, Z+7	; 0x07
    2ed2:	c2 16       	cp	r12, r18
    2ed4:	d3 06       	cpc	r13, r19
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <udd_ep_trans_complet+0x136>
    2ed8:	4c c0       	rjmp	.+152    	; 0x2f72 <udd_ep_trans_complet+0x1ce>
    2eda:	2d 81       	ldd	r18, Y+5	; 0x05
    2edc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ede:	82 17       	cp	r24, r18
    2ee0:	93 07       	cpc	r25, r19
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <udd_ep_trans_complet+0x142>
    2ee4:	46 c0       	rjmp	.+140    	; 0x2f72 <udd_ep_trans_complet+0x1ce>
    2ee6:	ac 01       	movw	r20, r24
    2ee8:	42 1b       	sub	r20, r18
    2eea:	53 0b       	sbc	r21, r19
    2eec:	9a 01       	movw	r18, r20
    2eee:	21 15       	cp	r18, r1
    2ef0:	54 e0       	ldi	r21, 0x04	; 4
    2ef2:	35 07       	cpc	r19, r21
    2ef4:	58 f0       	brcs	.+22     	; 0x2f0c <udd_ep_trans_complet+0x168>
    2ef6:	2f ef       	ldi	r18, 0xFF	; 255
    2ef8:	33 e0       	ldi	r19, 0x03	; 3
    2efa:	c9 01       	movw	r24, r18
    2efc:	b5 01       	movw	r22, r10
    2efe:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    2f02:	f9 01       	movw	r30, r18
    2f04:	e8 1b       	sub	r30, r24
    2f06:	f9 0b       	sbc	r31, r25
    2f08:	cf 01       	movw	r24, r30
    2f0a:	08 c0       	rjmp	.+16     	; 0x2f1c <udd_ep_trans_complet+0x178>
    2f0c:	c9 01       	movw	r24, r18
    2f0e:	b5 01       	movw	r22, r10
    2f10:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    2f14:	a9 01       	movw	r20, r18
    2f16:	48 1b       	sub	r20, r24
    2f18:	59 0b       	sbc	r21, r25
    2f1a:	ca 01       	movw	r24, r20
    2f1c:	f7 01       	movw	r30, r14
    2f1e:	12 82       	std	Z+2, r1	; 0x02
    2f20:	13 82       	std	Z+3, r1	; 0x03
    2f22:	8a 15       	cp	r24, r10
    2f24:	9b 05       	cpc	r25, r11
    2f26:	b0 f4       	brcc	.+44     	; 0x2f54 <udd_ep_trans_complet+0x1b0>
    2f28:	88 81       	ld	r24, Y
    2f2a:	84 60       	ori	r24, 0x04	; 4
    2f2c:	88 83       	st	Y, r24
    2f2e:	81 2f       	mov	r24, r17
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	00 24       	eor	r0, r0
    2f36:	96 95       	lsr	r25
    2f38:	87 95       	ror	r24
    2f3a:	07 94       	ror	r0
    2f3c:	96 95       	lsr	r25
    2f3e:	87 95       	ror	r24
    2f40:	07 94       	ror	r0
    2f42:	98 2f       	mov	r25, r24
    2f44:	80 2d       	mov	r24, r0
    2f46:	88 5b       	subi	r24, 0xB8	; 184
    2f48:	9b 4d       	sbci	r25, 0xDB	; 219
    2f4a:	84 83       	std	Z+4, r24	; 0x04
    2f4c:	95 83       	std	Z+5, r25	; 0x05
    2f4e:	a6 82       	std	Z+6, r10	; 0x06
    2f50:	b7 82       	std	Z+7, r11	; 0x07
    2f52:	0b c0       	rjmp	.+22     	; 0x2f6a <udd_ep_trans_complet+0x1c6>
    2f54:	49 81       	ldd	r20, Y+1	; 0x01
    2f56:	5a 81       	ldd	r21, Y+2	; 0x02
    2f58:	2d 81       	ldd	r18, Y+5	; 0x05
    2f5a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f5c:	24 0f       	add	r18, r20
    2f5e:	35 1f       	adc	r19, r21
    2f60:	f7 01       	movw	r30, r14
    2f62:	24 83       	std	Z+4, r18	; 0x04
    2f64:	35 83       	std	Z+5, r19	; 0x05
    2f66:	86 83       	std	Z+6, r24	; 0x06
    2f68:	97 83       	std	Z+7, r25	; 0x07
    2f6a:	f7 01       	movw	r30, r14
    2f6c:	02 e0       	ldi	r16, 0x02	; 2
    2f6e:	06 93       	lac	Z, r16
    2f70:	0e c0       	rjmp	.+28     	; 0x2f8e <udd_ep_trans_complet+0x1ea>
    2f72:	88 81       	ld	r24, Y
    2f74:	80 ff       	sbrs	r24, 0
    2f76:	0b c0       	rjmp	.+22     	; 0x2f8e <udd_ep_trans_complet+0x1ea>
    2f78:	8e 7f       	andi	r24, 0xFE	; 254
    2f7a:	88 83       	st	Y, r24
    2f7c:	ef 81       	ldd	r30, Y+7	; 0x07
    2f7e:	f8 85       	ldd	r31, Y+8	; 0x08
    2f80:	30 97       	sbiw	r30, 0x00	; 0
    2f82:	29 f0       	breq	.+10     	; 0x2f8e <udd_ep_trans_complet+0x1ea>
    2f84:	6d 81       	ldd	r22, Y+5	; 0x05
    2f86:	7e 81       	ldd	r23, Y+6	; 0x06
    2f88:	41 2f       	mov	r20, r17
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	19 95       	eicall
    2f8e:	df 91       	pop	r29
    2f90:	cf 91       	pop	r28
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	cf 90       	pop	r12
    2f9e:	bf 90       	pop	r11
    2fa0:	af 90       	pop	r10
    2fa2:	9f 90       	pop	r9
    2fa4:	8f 90       	pop	r8
    2fa6:	08 95       	ret

00002fa8 <udd_ctrl_out_received>:
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_ep_control_state>
    2fb4:	84 30       	cpi	r24, 0x04	; 4
    2fb6:	19 f4       	brne	.+6      	; 0x2fbe <udd_ctrl_out_received+0x16>
    2fb8:	6d dd       	rcall	.-1318   	; 0x2a94 <udd_ctrl_endofrequest>
    2fba:	21 dd       	rcall	.-1470   	; 0x29fe <udd_ctrl_init>
    2fbc:	b7 c0       	rjmp	.+366    	; 0x312c <udd_ctrl_out_received+0x184>
    2fbe:	20 91 da 23 	lds	r18, 0x23DA	; 0x8023da <test_case_ptr>
    2fc2:	30 91 db 23 	lds	r19, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    2fc6:	21 15       	cp	r18, r1
    2fc8:	31 05       	cpc	r19, r1
    2fca:	19 f1       	breq	.+70     	; 0x3012 <udd_ctrl_out_received+0x6a>
    2fcc:	81 30       	cpi	r24, 0x01	; 1
    2fce:	d9 f1       	breq	.+118    	; 0x3046 <udd_ctrl_out_received+0x9e>
    2fd0:	8f e5       	ldi	r24, 0x5F	; 95
    2fd2:	92 e2       	ldi	r25, 0x22	; 34
    2fd4:	9f 93       	push	r25
    2fd6:	8f 93       	push	r24
    2fd8:	80 e2       	ldi	r24, 0x20	; 32
    2fda:	92 e2       	ldi	r25, 0x22	; 34
    2fdc:	9f 93       	push	r25
    2fde:	8f 93       	push	r24
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	93 e0       	ldi	r25, 0x03	; 3
    2fe4:	9f 93       	push	r25
    2fe6:	8f 93       	push	r24
    2fe8:	84 e0       	ldi	r24, 0x04	; 4
    2fea:	8f 93       	push	r24
    2fec:	86 e7       	ldi	r24, 0x76	; 118
    2fee:	8f 93       	push	r24
    2ff0:	8b ec       	ldi	r24, 0xCB	; 203
    2ff2:	91 e2       	ldi	r25, 0x21	; 33
    2ff4:	9f 93       	push	r25
    2ff6:	8f 93       	push	r24
    2ff8:	1f 92       	push	r1
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	8f 93       	push	r24
    2ffe:	3f 93       	push	r19
    3000:	2f 93       	push	r18
    3002:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3006:	8d b7       	in	r24, 0x3d	; 61
    3008:	9e b7       	in	r25, 0x3e	; 62
    300a:	0e 96       	adiw	r24, 0x0e	; 14
    300c:	8d bf       	out	0x3d, r24	; 61
    300e:	9e bf       	out	0x3e, r25	; 62
    3010:	1a c0       	rjmp	.+52     	; 0x3046 <udd_ctrl_out_received+0x9e>
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	c1 f0       	breq	.+48     	; 0x3046 <udd_ctrl_out_received+0x9e>
    3016:	84 e0       	ldi	r24, 0x04	; 4
    3018:	8f 93       	push	r24
    301a:	86 e7       	ldi	r24, 0x76	; 118
    301c:	8f 93       	push	r24
    301e:	8b ec       	ldi	r24, 0xCB	; 203
    3020:	91 e2       	ldi	r25, 0x21	; 33
    3022:	9f 93       	push	r25
    3024:	8f 93       	push	r24
    3026:	80 e2       	ldi	r24, 0x20	; 32
    3028:	92 e2       	ldi	r25, 0x22	; 34
    302a:	9f 93       	push	r25
    302c:	8f 93       	push	r24
    302e:	80 ee       	ldi	r24, 0xE0	; 224
    3030:	92 e0       	ldi	r25, 0x02	; 2
    3032:	9f 93       	push	r25
    3034:	8f 93       	push	r24
    3036:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    303a:	ed b7       	in	r30, 0x3d	; 61
    303c:	fe b7       	in	r31, 0x3e	; 62
    303e:	38 96       	adiw	r30, 0x08	; 8
    3040:	ed bf       	out	0x3d, r30	; 61
    3042:	fe bf       	out	0x3e, r31	; 62
    3044:	ff cf       	rjmp	.-2      	; 0x3044 <udd_ctrl_out_received+0x9c>
    3046:	00 91 42 25 	lds	r16, 0x2542	; 0x802542 <udd_sram+0xe>
    304a:	10 91 43 25 	lds	r17, 0x2543	; 0x802543 <udd_sram+0xf>
    304e:	80 91 97 26 	lds	r24, 0x2697	; 0x802697 <udd_g_ctrlreq+0xa>
    3052:	90 91 98 26 	lds	r25, 0x2698	; 0x802698 <udd_g_ctrlreq+0xb>
    3056:	c0 91 2c 25 	lds	r28, 0x252C	; 0x80252c <udd_ctrl_payload_nb_trans>
    305a:	d0 91 2d 25 	lds	r29, 0x252D	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    305e:	98 01       	movw	r18, r16
    3060:	2c 0f       	add	r18, r28
    3062:	3d 1f       	adc	r19, r29
    3064:	82 17       	cp	r24, r18
    3066:	93 07       	cpc	r25, r19
    3068:	18 f4       	brcc	.+6      	; 0x3070 <udd_ctrl_out_received+0xc8>
    306a:	8c 01       	movw	r16, r24
    306c:	0c 1b       	sub	r16, r28
    306e:	1d 0b       	sbc	r17, r29
    3070:	80 91 95 26 	lds	r24, 0x2695	; 0x802695 <udd_g_ctrlreq+0x8>
    3074:	90 91 96 26 	lds	r25, 0x2696	; 0x802696 <udd_g_ctrlreq+0x9>
    3078:	a8 01       	movw	r20, r16
    307a:	6c ee       	ldi	r22, 0xEC	; 236
    307c:	74 e2       	ldi	r23, 0x24	; 36
    307e:	8c 0f       	add	r24, r28
    3080:	9d 1f       	adc	r25, r29
    3082:	0e 94 80 27 	call	0x4f00	; 0x4f00 <memcpy>
    3086:	c0 0f       	add	r28, r16
    3088:	d1 1f       	adc	r29, r17
    308a:	c0 93 2c 25 	sts	0x252C, r28	; 0x80252c <udd_ctrl_payload_nb_trans>
    308e:	d0 93 2d 25 	sts	0x252D, r29	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    3092:	00 34       	cpi	r16, 0x40	; 64
    3094:	11 05       	cpc	r17, r1
    3096:	69 f4       	brne	.+26     	; 0x30b2 <udd_ctrl_out_received+0x10a>
    3098:	20 91 93 26 	lds	r18, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    309c:	30 91 94 26 	lds	r19, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    30a0:	80 91 2e 25 	lds	r24, 0x252E	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    30a4:	90 91 2f 25 	lds	r25, 0x252F	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    30a8:	8c 0f       	add	r24, r28
    30aa:	9d 1f       	adc	r25, r29
    30ac:	82 17       	cp	r24, r18
    30ae:	93 07       	cpc	r25, r19
    30b0:	80 f0       	brcs	.+32     	; 0x30d2 <udd_ctrl_out_received+0x12a>
    30b2:	ed e8       	ldi	r30, 0x8D	; 141
    30b4:	f6 e2       	ldi	r31, 0x26	; 38
    30b6:	c2 87       	std	Z+10, r28	; 0x0a
    30b8:	d3 87       	std	Z+11, r29	; 0x0b
    30ba:	86 85       	ldd	r24, Z+14	; 0x0e
    30bc:	97 85       	ldd	r25, Z+15	; 0x0f
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	31 f0       	breq	.+12     	; 0x30ce <udd_ctrl_out_received+0x126>
    30c2:	fc 01       	movw	r30, r24
    30c4:	19 95       	eicall
    30c6:	81 11       	cpse	r24, r1
    30c8:	02 c0       	rjmp	.+4      	; 0x30ce <udd_ctrl_out_received+0x126>
    30ca:	be dc       	rcall	.-1668   	; 0x2a48 <udd_ctrl_stall_data>
    30cc:	2f c0       	rjmp	.+94     	; 0x312c <udd_ctrl_out_received+0x184>
    30ce:	ca dc       	rcall	.-1644   	; 0x2a64 <udd_ctrl_send_zlp_in>
    30d0:	2d c0       	rjmp	.+90     	; 0x312c <udd_ctrl_out_received+0x184>
    30d2:	80 91 97 26 	lds	r24, 0x2697	; 0x802697 <udd_g_ctrlreq+0xa>
    30d6:	90 91 98 26 	lds	r25, 0x2698	; 0x802698 <udd_g_ctrlreq+0xb>
    30da:	c8 17       	cp	r28, r24
    30dc:	d9 07       	cpc	r29, r25
    30de:	01 f5       	brne	.+64     	; 0x3120 <udd_ctrl_out_received+0x178>
    30e0:	80 91 9b 26 	lds	r24, 0x269B	; 0x80269b <udd_g_ctrlreq+0xe>
    30e4:	90 91 9c 26 	lds	r25, 0x269C	; 0x80269c <udd_g_ctrlreq+0xf>
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	11 f4       	brne	.+4      	; 0x30f0 <udd_ctrl_out_received+0x148>
    30ec:	ad dc       	rcall	.-1702   	; 0x2a48 <udd_ctrl_stall_data>
    30ee:	1e c0       	rjmp	.+60     	; 0x312c <udd_ctrl_out_received+0x184>
    30f0:	fc 01       	movw	r30, r24
    30f2:	19 95       	eicall
    30f4:	81 11       	cpse	r24, r1
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <udd_ctrl_out_received+0x154>
    30f8:	a7 dc       	rcall	.-1714   	; 0x2a48 <udd_ctrl_stall_data>
    30fa:	18 c0       	rjmp	.+48     	; 0x312c <udd_ctrl_out_received+0x184>
    30fc:	20 91 2e 25 	lds	r18, 0x252E	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    3100:	30 91 2f 25 	lds	r19, 0x252F	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    3104:	80 91 2c 25 	lds	r24, 0x252C	; 0x80252c <udd_ctrl_payload_nb_trans>
    3108:	90 91 2d 25 	lds	r25, 0x252D	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    310c:	82 0f       	add	r24, r18
    310e:	93 1f       	adc	r25, r19
    3110:	80 93 2e 25 	sts	0x252E, r24	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    3114:	90 93 2f 25 	sts	0x252F, r25	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    3118:	10 92 2c 25 	sts	0x252C, r1	; 0x80252c <udd_ctrl_payload_nb_trans>
    311c:	10 92 2d 25 	sts	0x252D, r1	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    3120:	e0 e4       	ldi	r30, 0x40	; 64
    3122:	f5 e2       	ldi	r31, 0x25	; 37
    3124:	02 e0       	ldi	r16, 0x02	; 2
    3126:	06 93       	lac	Z, r16
    3128:	00 e2       	ldi	r16, 0x20	; 32
    312a:	06 93       	lac	Z, r16
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	08 95       	ret

00003136 <udd_ctrl_setup_received>:
    3136:	0f 93       	push	r16
    3138:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_ep_control_state>
    313c:	88 23       	and	r24, r24
    313e:	29 f0       	breq	.+10     	; 0x314a <udd_ctrl_setup_received+0x14>
    3140:	83 50       	subi	r24, 0x03	; 3
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	08 f4       	brcc	.+2      	; 0x3148 <udd_ctrl_setup_received+0x12>
    3146:	a6 dc       	rcall	.-1716   	; 0x2a94 <udd_ctrl_endofrequest>
    3148:	5a dc       	rcall	.-1868   	; 0x29fe <udd_ctrl_init>
    314a:	80 91 42 25 	lds	r24, 0x2542	; 0x802542 <udd_sram+0xe>
    314e:	90 91 43 25 	lds	r25, 0x2543	; 0x802543 <udd_sram+0xf>
    3152:	08 97       	sbiw	r24, 0x08	; 8
    3154:	09 f0       	breq	.+2      	; 0x3158 <udd_ctrl_setup_received+0x22>
    3156:	41 c0       	rjmp	.+130    	; 0x31da <udd_ctrl_setup_received+0xa4>
    3158:	88 e0       	ldi	r24, 0x08	; 8
    315a:	ec ee       	ldi	r30, 0xEC	; 236
    315c:	f4 e2       	ldi	r31, 0x24	; 36
    315e:	ad e8       	ldi	r26, 0x8D	; 141
    3160:	b6 e2       	ldi	r27, 0x26	; 38
    3162:	01 90       	ld	r0, Z+
    3164:	0d 92       	st	X+, r0
    3166:	8a 95       	dec	r24
    3168:	e1 f7       	brne	.-8      	; 0x3162 <udd_ctrl_setup_received+0x2c>
    316a:	e8 ec       	ldi	r30, 0xC8	; 200
    316c:	f4 e0       	ldi	r31, 0x04	; 4
    316e:	80 81       	ld	r24, Z
    3170:	80 62       	ori	r24, 0x20	; 32
    3172:	80 83       	st	Z, r24
    3174:	80 81       	ld	r24, Z
    3176:	80 62       	ori	r24, 0x20	; 32
    3178:	80 83       	st	Z, r24
    317a:	0e 94 48 0b 	call	0x1690	; 0x1690 <udc_process_setup>
    317e:	81 11       	cpse	r24, r1
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <udd_ctrl_setup_received+0x50>
    3182:	62 dc       	rcall	.-1852   	; 0x2a48 <udd_ctrl_stall_data>
    3184:	2a c0       	rjmp	.+84     	; 0x31da <udd_ctrl_setup_received+0xa4>
    3186:	80 91 8d 26 	lds	r24, 0x268D	; 0x80268d <udd_g_ctrlreq>
    318a:	88 23       	and	r24, r24
    318c:	6c f4       	brge	.+26     	; 0x31a8 <udd_ctrl_setup_received+0x72>
    318e:	10 92 2e 25 	sts	0x252E, r1	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    3192:	10 92 2f 25 	sts	0x252F, r1	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    3196:	10 92 2c 25 	sts	0x252C, r1	; 0x80252c <udd_ctrl_payload_nb_trans>
    319a:	10 92 2d 25 	sts	0x252D, r1	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    319e:	82 e0       	ldi	r24, 0x02	; 2
    31a0:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udd_ep_control_state>
    31a4:	54 dd       	rcall	.-1368   	; 0x2c4e <udd_ctrl_in_sent>
    31a6:	19 c0       	rjmp	.+50     	; 0x31da <udd_ctrl_setup_received+0xa4>
    31a8:	80 91 93 26 	lds	r24, 0x2693	; 0x802693 <udd_g_ctrlreq+0x6>
    31ac:	90 91 94 26 	lds	r25, 0x2694	; 0x802694 <udd_g_ctrlreq+0x7>
    31b0:	89 2b       	or	r24, r25
    31b2:	11 f4       	brne	.+4      	; 0x31b8 <udd_ctrl_setup_received+0x82>
    31b4:	57 dc       	rcall	.-1874   	; 0x2a64 <udd_ctrl_send_zlp_in>
    31b6:	11 c0       	rjmp	.+34     	; 0x31da <udd_ctrl_setup_received+0xa4>
    31b8:	10 92 2e 25 	sts	0x252E, r1	; 0x80252e <udd_ctrl_prev_payload_nb_trans>
    31bc:	10 92 2f 25 	sts	0x252F, r1	; 0x80252f <udd_ctrl_prev_payload_nb_trans+0x1>
    31c0:	10 92 2c 25 	sts	0x252C, r1	; 0x80252c <udd_ctrl_payload_nb_trans>
    31c4:	10 92 2d 25 	sts	0x252D, r1	; 0x80252d <udd_ctrl_payload_nb_trans+0x1>
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udd_ep_control_state>
    31ce:	e0 e4       	ldi	r30, 0x40	; 64
    31d0:	f5 e2       	ldi	r31, 0x25	; 37
    31d2:	02 e0       	ldi	r16, 0x02	; 2
    31d4:	06 93       	lac	Z, r16
    31d6:	00 e2       	ldi	r16, 0x20	; 32
    31d8:	06 93       	lac	Z, r16
    31da:	0f 91       	pop	r16
    31dc:	08 95       	ret

000031de <udd_ctrl_interrupt_tc_setup>:
    31de:	0f 93       	push	r16
    31e0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    31e4:	80 ff       	sbrs	r24, 0
    31e6:	5b c0       	rjmp	.+182    	; 0x329e <udd_ctrl_interrupt_tc_setup+0xc0>
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    31ee:	e0 e4       	ldi	r30, 0x40	; 64
    31f0:	f5 e2       	ldi	r31, 0x25	; 37
    31f2:	00 e8       	ldi	r16, 0x80	; 128
    31f4:	06 93       	lac	Z, r16
    31f6:	e8 e4       	ldi	r30, 0x48	; 72
    31f8:	f5 e2       	ldi	r31, 0x25	; 37
    31fa:	00 e8       	ldi	r16, 0x80	; 128
    31fc:	06 93       	lac	Z, r16
    31fe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    3202:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
    3206:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	29 f1       	breq	.+74     	; 0x3258 <udd_ctrl_interrupt_tc_setup+0x7a>
    320e:	20 91 40 25 	lds	r18, 0x2540	; 0x802540 <udd_sram+0xc>
    3212:	24 fd       	sbrc	r18, 4
    3214:	3d c0       	rjmp	.+122    	; 0x3290 <udd_ctrl_interrupt_tc_setup+0xb2>
    3216:	2f e5       	ldi	r18, 0x5F	; 95
    3218:	32 e2       	ldi	r19, 0x22	; 34
    321a:	3f 93       	push	r19
    321c:	2f 93       	push	r18
    321e:	2c e4       	ldi	r18, 0x4C	; 76
    3220:	32 e2       	ldi	r19, 0x22	; 34
    3222:	3f 93       	push	r19
    3224:	2f 93       	push	r18
    3226:	29 e1       	ldi	r18, 0x19	; 25
    3228:	34 e0       	ldi	r19, 0x04	; 4
    322a:	3f 93       	push	r19
    322c:	2f 93       	push	r18
    322e:	25 e0       	ldi	r18, 0x05	; 5
    3230:	2f 93       	push	r18
    3232:	22 e1       	ldi	r18, 0x12	; 18
    3234:	2f 93       	push	r18
    3236:	2b ec       	ldi	r18, 0xCB	; 203
    3238:	31 e2       	ldi	r19, 0x21	; 33
    323a:	3f 93       	push	r19
    323c:	2f 93       	push	r18
    323e:	1f 92       	push	r1
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	2f 93       	push	r18
    3244:	9f 93       	push	r25
    3246:	8f 93       	push	r24
    3248:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    324c:	8d b7       	in	r24, 0x3d	; 61
    324e:	9e b7       	in	r25, 0x3e	; 62
    3250:	0e 96       	adiw	r24, 0x0e	; 14
    3252:	8d bf       	out	0x3d, r24	; 61
    3254:	9e bf       	out	0x3e, r25	; 62
    3256:	1c c0       	rjmp	.+56     	; 0x3290 <udd_ctrl_interrupt_tc_setup+0xb2>
    3258:	80 91 40 25 	lds	r24, 0x2540	; 0x802540 <udd_sram+0xc>
    325c:	84 fd       	sbrc	r24, 4
    325e:	18 c0       	rjmp	.+48     	; 0x3290 <udd_ctrl_interrupt_tc_setup+0xb2>
    3260:	85 e0       	ldi	r24, 0x05	; 5
    3262:	8f 93       	push	r24
    3264:	82 e1       	ldi	r24, 0x12	; 18
    3266:	8f 93       	push	r24
    3268:	8b ec       	ldi	r24, 0xCB	; 203
    326a:	91 e2       	ldi	r25, 0x21	; 33
    326c:	9f 93       	push	r25
    326e:	8f 93       	push	r24
    3270:	8c e4       	ldi	r24, 0x4C	; 76
    3272:	92 e2       	ldi	r25, 0x22	; 34
    3274:	9f 93       	push	r25
    3276:	8f 93       	push	r24
    3278:	88 ef       	ldi	r24, 0xF8	; 248
    327a:	93 e0       	ldi	r25, 0x03	; 3
    327c:	9f 93       	push	r25
    327e:	8f 93       	push	r24
    3280:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3284:	8d b7       	in	r24, 0x3d	; 61
    3286:	9e b7       	in	r25, 0x3e	; 62
    3288:	08 96       	adiw	r24, 0x08	; 8
    328a:	8d bf       	out	0x3d, r24	; 61
    328c:	9e bf       	out	0x3e, r25	; 62
    328e:	ff cf       	rjmp	.-2      	; 0x328e <udd_ctrl_interrupt_tc_setup+0xb0>
    3290:	e0 e4       	ldi	r30, 0x40	; 64
    3292:	f5 e2       	ldi	r31, 0x25	; 37
    3294:	00 e1       	ldi	r16, 0x10	; 16
    3296:	06 93       	lac	Z, r16
    3298:	4e df       	rcall	.-356    	; 0x3136 <udd_ctrl_setup_received>
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	01 c0       	rjmp	.+2      	; 0x32a0 <udd_ctrl_interrupt_tc_setup+0xc2>
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	0f 91       	pop	r16
    32a2:	08 95       	ret

000032a4 <udd_ctrl_underflow>:
    32a4:	0f 93       	push	r16
    32a6:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    32aa:	81 fd       	sbrc	r24, 1
    32ac:	13 c0       	rjmp	.+38     	; 0x32d4 <udd_ctrl_underflow+0x30>
    32ae:	97 df       	rcall	.-210    	; 0x31de <udd_ctrl_interrupt_tc_setup>
    32b0:	81 11       	cpse	r24, r1
    32b2:	10 c0       	rjmp	.+32     	; 0x32d4 <udd_ctrl_underflow+0x30>
    32b4:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_ep_control_state>
    32b8:	81 30       	cpi	r24, 0x01	; 1
    32ba:	11 f4       	brne	.+4      	; 0x32c0 <udd_ctrl_underflow+0x1c>
    32bc:	d3 db       	rcall	.-2138   	; 0x2a64 <udd_ctrl_send_zlp_in>
    32be:	0a c0       	rjmp	.+20     	; 0x32d4 <udd_ctrl_underflow+0x30>
    32c0:	84 30       	cpi	r24, 0x04	; 4
    32c2:	41 f4       	brne	.+16     	; 0x32d4 <udd_ctrl_underflow+0x30>
    32c4:	e9 e4       	ldi	r30, 0x49	; 73
    32c6:	f5 e2       	ldi	r31, 0x25	; 37
    32c8:	04 e0       	ldi	r16, 0x04	; 4
    32ca:	05 93       	las	Z, r16
    32cc:	e1 e4       	ldi	r30, 0x41	; 65
    32ce:	f5 e2       	ldi	r31, 0x25	; 37
    32d0:	04 e0       	ldi	r16, 0x04	; 4
    32d2:	05 93       	las	Z, r16
    32d4:	0f 91       	pop	r16
    32d6:	08 95       	ret

000032d8 <udd_ctrl_overflow>:
    32d8:	0f 93       	push	r16
    32da:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    32de:	81 fd       	sbrc	r24, 1
    32e0:	13 c0       	rjmp	.+38     	; 0x3308 <udd_ctrl_overflow+0x30>
    32e2:	7d df       	rcall	.-262    	; 0x31de <udd_ctrl_interrupt_tc_setup>
    32e4:	81 11       	cpse	r24, r1
    32e6:	10 c0       	rjmp	.+32     	; 0x3308 <udd_ctrl_overflow+0x30>
    32e8:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udd_ep_control_state>
    32ec:	82 30       	cpi	r24, 0x02	; 2
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <udd_ctrl_overflow+0x1c>
    32f0:	c7 db       	rcall	.-2162   	; 0x2a80 <udd_ctrl_send_zlp_out>
    32f2:	0a c0       	rjmp	.+20     	; 0x3308 <udd_ctrl_overflow+0x30>
    32f4:	83 30       	cpi	r24, 0x03	; 3
    32f6:	41 f4       	brne	.+16     	; 0x3308 <udd_ctrl_overflow+0x30>
    32f8:	e9 e4       	ldi	r30, 0x49	; 73
    32fa:	f5 e2       	ldi	r31, 0x25	; 37
    32fc:	04 e0       	ldi	r16, 0x04	; 4
    32fe:	05 93       	las	Z, r16
    3300:	e1 e4       	ldi	r30, 0x41	; 65
    3302:	f5 e2       	ldi	r31, 0x25	; 37
    3304:	04 e0       	ldi	r16, 0x04	; 4
    3306:	05 93       	las	Z, r16
    3308:	0f 91       	pop	r16
    330a:	08 95       	ret

0000330c <udd_ctrl_interrupt_error>:
    330c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    3310:	82 ff       	sbrs	r24, 2
    3312:	0a c0       	rjmp	.+20     	; 0x3328 <udd_ctrl_interrupt_error+0x1c>
    3314:	84 e0       	ldi	r24, 0x04	; 4
    3316:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    331a:	80 91 48 25 	lds	r24, 0x2548	; 0x802548 <udd_sram+0x14>
    331e:	86 ff       	sbrs	r24, 6
    3320:	11 c0       	rjmp	.+34     	; 0x3344 <udd_ctrl_interrupt_error+0x38>
    3322:	c0 df       	rcall	.-128    	; 0x32a4 <udd_ctrl_underflow>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	08 95       	ret
    3328:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    332c:	81 ff       	sbrs	r24, 1
    332e:	0c c0       	rjmp	.+24     	; 0x3348 <udd_ctrl_interrupt_error+0x3c>
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    3336:	80 91 40 25 	lds	r24, 0x2540	; 0x802540 <udd_sram+0xc>
    333a:	86 ff       	sbrs	r24, 6
    333c:	07 c0       	rjmp	.+14     	; 0x334c <udd_ctrl_interrupt_error+0x40>
    333e:	cc df       	rcall	.-104    	; 0x32d8 <udd_ctrl_overflow>
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	08 95       	ret
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	08 95       	ret
    3348:	80 e0       	ldi	r24, 0x00	; 0
    334a:	08 95       	ret
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	08 95       	ret

00003350 <udd_is_high_speed>:
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	08 95       	ret

00003354 <udd_set_address>:
    3354:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    3358:	08 95       	ret

0000335a <udd_getaddress>:
    335a:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    335e:	08 95       	ret

00003360 <udd_get_frame_number>:
    3360:	80 91 70 25 	lds	r24, 0x2570	; 0x802570 <udd_sram+0x3c>
    3364:	90 91 71 25 	lds	r25, 0x2571	; 0x802571 <udd_sram+0x3d>
    3368:	08 95       	ret

0000336a <udd_get_micro_frame_number>:
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	08 95       	ret

00003370 <udd_set_setup_payload>:
    3370:	ed e8       	ldi	r30, 0x8D	; 141
    3372:	f6 e2       	ldi	r31, 0x26	; 38
    3374:	80 87       	std	Z+8, r24	; 0x08
    3376:	91 87       	std	Z+9, r25	; 0x09
    3378:	62 87       	std	Z+10, r22	; 0x0a
    337a:	73 87       	std	Z+11, r23	; 0x0b
    337c:	08 95       	ret

0000337e <udd_ep_is_valid>:
    337e:	98 2f       	mov	r25, r24
    3380:	9f 70       	andi	r25, 0x0F	; 15
    3382:	29 f0       	breq	.+10     	; 0x338e <udd_ep_is_valid+0x10>
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	93 30       	cpi	r25, 0x03	; 3
    3388:	18 f0       	brcs	.+6      	; 0x3390 <udd_ep_is_valid+0x12>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	08 95       	ret

00003392 <udd_ep_alloc>:
    3392:	ef 92       	push	r14
    3394:	ff 92       	push	r15
    3396:	0f 93       	push	r16
    3398:	1f 93       	push	r17
    339a:	cf 93       	push	r28
    339c:	df 93       	push	r29
    339e:	18 2f       	mov	r17, r24
    33a0:	06 2f       	mov	r16, r22
    33a2:	7a 01       	movw	r14, r20
    33a4:	c0 91 da 23 	lds	r28, 0x23DA	; 0x8023da <test_case_ptr>
    33a8:	d0 91 db 23 	lds	r29, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    33ac:	20 97       	sbiw	r28, 0x00	; 0
    33ae:	21 f1       	breq	.+72     	; 0x33f8 <udd_ep_alloc+0x66>
    33b0:	e6 df       	rcall	.-52     	; 0x337e <udd_ep_is_valid>
    33b2:	81 11       	cpse	r24, r1
    33b4:	3c c0       	rjmp	.+120    	; 0x342e <udd_ep_alloc+0x9c>
    33b6:	8f e5       	ldi	r24, 0x5F	; 95
    33b8:	92 e2       	ldi	r25, 0x22	; 34
    33ba:	9f 93       	push	r25
    33bc:	8f 93       	push	r24
    33be:	80 e6       	ldi	r24, 0x60	; 96
    33c0:	92 e2       	ldi	r25, 0x22	; 34
    33c2:	9f 93       	push	r25
    33c4:	8f 93       	push	r24
    33c6:	89 ed       	ldi	r24, 0xD9	; 217
    33c8:	95 e0       	ldi	r25, 0x05	; 5
    33ca:	9f 93       	push	r25
    33cc:	8f 93       	push	r24
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	8f 93       	push	r24
    33d2:	87 e5       	ldi	r24, 0x57	; 87
    33d4:	8f 93       	push	r24
    33d6:	8b ec       	ldi	r24, 0xCB	; 203
    33d8:	91 e2       	ldi	r25, 0x21	; 33
    33da:	9f 93       	push	r25
    33dc:	8f 93       	push	r24
    33de:	1f 92       	push	r1
    33e0:	81 e0       	ldi	r24, 0x01	; 1
    33e2:	8f 93       	push	r24
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    33ec:	8d b7       	in	r24, 0x3d	; 61
    33ee:	9e b7       	in	r25, 0x3e	; 62
    33f0:	0e 96       	adiw	r24, 0x0e	; 14
    33f2:	8d bf       	out	0x3d, r24	; 61
    33f4:	9e bf       	out	0x3e, r25	; 62
    33f6:	1b c0       	rjmp	.+54     	; 0x342e <udd_ep_alloc+0x9c>
    33f8:	c2 df       	rcall	.-124    	; 0x337e <udd_ep_is_valid>
    33fa:	81 11       	cpse	r24, r1
    33fc:	18 c0       	rjmp	.+48     	; 0x342e <udd_ep_alloc+0x9c>
    33fe:	82 e0       	ldi	r24, 0x02	; 2
    3400:	8f 93       	push	r24
    3402:	87 e5       	ldi	r24, 0x57	; 87
    3404:	8f 93       	push	r24
    3406:	8b ec       	ldi	r24, 0xCB	; 203
    3408:	91 e2       	ldi	r25, 0x21	; 33
    340a:	9f 93       	push	r25
    340c:	8f 93       	push	r24
    340e:	80 e6       	ldi	r24, 0x60	; 96
    3410:	92 e2       	ldi	r25, 0x22	; 34
    3412:	9f 93       	push	r25
    3414:	8f 93       	push	r24
    3416:	88 eb       	ldi	r24, 0xB8	; 184
    3418:	95 e0       	ldi	r25, 0x05	; 5
    341a:	9f 93       	push	r25
    341c:	8f 93       	push	r24
    341e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3422:	8d b7       	in	r24, 0x3d	; 61
    3424:	9e b7       	in	r25, 0x3e	; 62
    3426:	08 96       	adiw	r24, 0x08	; 8
    3428:	8d bf       	out	0x3d, r24	; 61
    342a:	9e bf       	out	0x3e, r25	; 62
    342c:	ff cf       	rjmp	.-2      	; 0x342c <udd_ep_alloc+0x9a>
    342e:	81 2f       	mov	r24, r17
    3430:	cc da       	rcall	.-2664   	; 0x29ca <udd_ep_get_ctrl>
    3432:	ec 01       	movw	r28, r24
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	80 7c       	andi	r24, 0xC0	; 192
    3438:	89 f4       	brne	.+34     	; 0x345c <udd_ep_alloc+0xca>
    343a:	a7 01       	movw	r20, r14
    343c:	60 2f       	mov	r22, r16
    343e:	81 2f       	mov	r24, r17
    3440:	78 db       	rcall	.-2320   	; 0x2b32 <udd_ep_init>
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	80 7c       	andi	r24, 0xC0	; 192
    3446:	80 3c       	cpi	r24, 0xC0	; 192
    3448:	21 f4       	brne	.+8      	; 0x3452 <udd_ep_alloc+0xc0>
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	87 70       	andi	r24, 0x07	; 7
    344e:	87 30       	cpi	r24, 0x07	; 7
    3450:	39 f0       	breq	.+14     	; 0x3460 <udd_ep_alloc+0xce>
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	80 62       	ori	r24, 0x20	; 32
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	03 c0       	rjmp	.+6      	; 0x3462 <udd_ep_alloc+0xd0>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	01 c0       	rjmp	.+2      	; 0x3462 <udd_ep_alloc+0xd0>
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	08 95       	ret

00003470 <udd_ep_is_halted>:
    3470:	0f 93       	push	r16
    3472:	1f 93       	push	r17
    3474:	cf 93       	push	r28
    3476:	c8 2f       	mov	r28, r24
    3478:	00 91 da 23 	lds	r16, 0x23DA	; 0x8023da <test_case_ptr>
    347c:	10 91 db 23 	lds	r17, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    3480:	01 15       	cp	r16, r1
    3482:	11 05       	cpc	r17, r1
    3484:	21 f1       	breq	.+72     	; 0x34ce <udd_ep_is_halted+0x5e>
    3486:	7b df       	rcall	.-266    	; 0x337e <udd_ep_is_valid>
    3488:	81 11       	cpse	r24, r1
    348a:	3c c0       	rjmp	.+120    	; 0x3504 <udd_ep_is_halted+0x94>
    348c:	8f e5       	ldi	r24, 0x5F	; 95
    348e:	92 e2       	ldi	r25, 0x22	; 34
    3490:	9f 93       	push	r25
    3492:	8f 93       	push	r24
    3494:	80 e6       	ldi	r24, 0x60	; 96
    3496:	92 e2       	ldi	r25, 0x22	; 34
    3498:	9f 93       	push	r25
    349a:	8f 93       	push	r24
    349c:	81 e3       	ldi	r24, 0x31	; 49
    349e:	95 e0       	ldi	r25, 0x05	; 5
    34a0:	9f 93       	push	r25
    34a2:	8f 93       	push	r24
    34a4:	82 e0       	ldi	r24, 0x02	; 2
    34a6:	8f 93       	push	r24
    34a8:	87 e7       	ldi	r24, 0x77	; 119
    34aa:	8f 93       	push	r24
    34ac:	8b ec       	ldi	r24, 0xCB	; 203
    34ae:	91 e2       	ldi	r25, 0x21	; 33
    34b0:	9f 93       	push	r25
    34b2:	8f 93       	push	r24
    34b4:	1f 92       	push	r1
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	8f 93       	push	r24
    34ba:	1f 93       	push	r17
    34bc:	0f 93       	push	r16
    34be:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    34c2:	8d b7       	in	r24, 0x3d	; 61
    34c4:	9e b7       	in	r25, 0x3e	; 62
    34c6:	0e 96       	adiw	r24, 0x0e	; 14
    34c8:	8d bf       	out	0x3d, r24	; 61
    34ca:	9e bf       	out	0x3e, r25	; 62
    34cc:	1b c0       	rjmp	.+54     	; 0x3504 <udd_ep_is_halted+0x94>
    34ce:	57 df       	rcall	.-338    	; 0x337e <udd_ep_is_valid>
    34d0:	81 11       	cpse	r24, r1
    34d2:	18 c0       	rjmp	.+48     	; 0x3504 <udd_ep_is_halted+0x94>
    34d4:	82 e0       	ldi	r24, 0x02	; 2
    34d6:	8f 93       	push	r24
    34d8:	87 e7       	ldi	r24, 0x77	; 119
    34da:	8f 93       	push	r24
    34dc:	8b ec       	ldi	r24, 0xCB	; 203
    34de:	91 e2       	ldi	r25, 0x21	; 33
    34e0:	9f 93       	push	r25
    34e2:	8f 93       	push	r24
    34e4:	80 e6       	ldi	r24, 0x60	; 96
    34e6:	92 e2       	ldi	r25, 0x22	; 34
    34e8:	9f 93       	push	r25
    34ea:	8f 93       	push	r24
    34ec:	80 e1       	ldi	r24, 0x10	; 16
    34ee:	95 e0       	ldi	r25, 0x05	; 5
    34f0:	9f 93       	push	r25
    34f2:	8f 93       	push	r24
    34f4:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    34f8:	ed b7       	in	r30, 0x3d	; 61
    34fa:	fe b7       	in	r31, 0x3e	; 62
    34fc:	38 96       	adiw	r30, 0x08	; 8
    34fe:	ed bf       	out	0x3d, r30	; 61
    3500:	fe bf       	out	0x3e, r31	; 62
    3502:	ff cf       	rjmp	.-2      	; 0x3502 <udd_ep_is_halted+0x92>
    3504:	8c 2f       	mov	r24, r28
    3506:	61 da       	rcall	.-2878   	; 0x29ca <udd_ep_get_ctrl>
    3508:	fc 01       	movw	r30, r24
    350a:	81 81       	ldd	r24, Z+1	; 0x01
    350c:	82 fb       	bst	r24, 2
    350e:	88 27       	eor	r24, r24
    3510:	80 f9       	bld	r24, 0
    3512:	cf 91       	pop	r28
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	08 95       	ret

0000351a <udd_ep_clear_halt>:
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	c8 2f       	mov	r28, r24
    3522:	00 91 da 23 	lds	r16, 0x23DA	; 0x8023da <test_case_ptr>
    3526:	10 91 db 23 	lds	r17, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    352a:	01 15       	cp	r16, r1
    352c:	11 05       	cpc	r17, r1
    352e:	21 f1       	breq	.+72     	; 0x3578 <udd_ep_clear_halt+0x5e>
    3530:	26 df       	rcall	.-436    	; 0x337e <udd_ep_is_valid>
    3532:	81 11       	cpse	r24, r1
    3534:	3c c0       	rjmp	.+120    	; 0x35ae <udd_ep_clear_halt+0x94>
    3536:	8f e5       	ldi	r24, 0x5F	; 95
    3538:	92 e2       	ldi	r25, 0x22	; 34
    353a:	9f 93       	push	r25
    353c:	8f 93       	push	r24
    353e:	80 e6       	ldi	r24, 0x60	; 96
    3540:	92 e2       	ldi	r25, 0x22	; 34
    3542:	9f 93       	push	r25
    3544:	8f 93       	push	r24
    3546:	81 ec       	ldi	r24, 0xC1	; 193
    3548:	94 e0       	ldi	r25, 0x04	; 4
    354a:	9f 93       	push	r25
    354c:	8f 93       	push	r24
    354e:	82 e0       	ldi	r24, 0x02	; 2
    3550:	8f 93       	push	r24
    3552:	8d e8       	ldi	r24, 0x8D	; 141
    3554:	8f 93       	push	r24
    3556:	8b ec       	ldi	r24, 0xCB	; 203
    3558:	91 e2       	ldi	r25, 0x21	; 33
    355a:	9f 93       	push	r25
    355c:	8f 93       	push	r24
    355e:	1f 92       	push	r1
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	8f 93       	push	r24
    3564:	1f 93       	push	r17
    3566:	0f 93       	push	r16
    3568:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    356c:	8d b7       	in	r24, 0x3d	; 61
    356e:	9e b7       	in	r25, 0x3e	; 62
    3570:	0e 96       	adiw	r24, 0x0e	; 14
    3572:	8d bf       	out	0x3d, r24	; 61
    3574:	9e bf       	out	0x3e, r25	; 62
    3576:	1b c0       	rjmp	.+54     	; 0x35ae <udd_ep_clear_halt+0x94>
    3578:	02 df       	rcall	.-508    	; 0x337e <udd_ep_is_valid>
    357a:	81 11       	cpse	r24, r1
    357c:	18 c0       	rjmp	.+48     	; 0x35ae <udd_ep_clear_halt+0x94>
    357e:	82 e0       	ldi	r24, 0x02	; 2
    3580:	8f 93       	push	r24
    3582:	8d e8       	ldi	r24, 0x8D	; 141
    3584:	8f 93       	push	r24
    3586:	8b ec       	ldi	r24, 0xCB	; 203
    3588:	91 e2       	ldi	r25, 0x21	; 33
    358a:	9f 93       	push	r25
    358c:	8f 93       	push	r24
    358e:	80 e6       	ldi	r24, 0x60	; 96
    3590:	92 e2       	ldi	r25, 0x22	; 34
    3592:	9f 93       	push	r25
    3594:	8f 93       	push	r24
    3596:	80 ea       	ldi	r24, 0xA0	; 160
    3598:	94 e0       	ldi	r25, 0x04	; 4
    359a:	9f 93       	push	r25
    359c:	8f 93       	push	r24
    359e:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    35a2:	8d b7       	in	r24, 0x3d	; 61
    35a4:	9e b7       	in	r25, 0x3e	; 62
    35a6:	08 96       	adiw	r24, 0x08	; 8
    35a8:	8d bf       	out	0x3d, r24	; 61
    35aa:	9e bf       	out	0x3e, r25	; 62
    35ac:	ff cf       	rjmp	.-2      	; 0x35ac <udd_ep_clear_halt+0x92>
    35ae:	8c 2f       	mov	r24, r28
    35b0:	0c da       	rcall	.-3048   	; 0x29ca <udd_ep_get_ctrl>
    35b2:	fc 01       	movw	r30, r24
    35b4:	01 e0       	ldi	r16, 0x01	; 1
    35b6:	06 93       	lac	Z, r16
    35b8:	81 81       	ldd	r24, Z+1	; 0x01
    35ba:	82 ff       	sbrs	r24, 2
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <udd_ep_clear_halt+0xc2>
    35be:	81 81       	ldd	r24, Z+1	; 0x01
    35c0:	8b 7f       	andi	r24, 0xFB	; 251
    35c2:	81 83       	std	Z+1, r24	; 0x01
    35c4:	8c 2f       	mov	r24, r28
    35c6:	97 da       	rcall	.-2770   	; 0x2af6 <udd_ep_get_job>
    35c8:	fc 01       	movw	r30, r24
    35ca:	80 81       	ld	r24, Z
    35cc:	80 ff       	sbrs	r24, 0
    35ce:	06 c0       	rjmp	.+12     	; 0x35dc <udd_ep_clear_halt+0xc2>
    35d0:	8e 7f       	andi	r24, 0xFE	; 254
    35d2:	80 83       	st	Z, r24
    35d4:	07 80       	ldd	r0, Z+7	; 0x07
    35d6:	f0 85       	ldd	r31, Z+8	; 0x08
    35d8:	e0 2d       	mov	r30, r0
    35da:	19 95       	eicall
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	cf 91       	pop	r28
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	08 95       	ret

000035e6 <udd_ep_run>:
    35e6:	6f 92       	push	r6
    35e8:	7f 92       	push	r7
    35ea:	8f 92       	push	r8
    35ec:	9f 92       	push	r9
    35ee:	af 92       	push	r10
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	1f 92       	push	r1
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
    3608:	d8 2e       	mov	r13, r24
    360a:	c6 2e       	mov	r12, r22
    360c:	3a 01       	movw	r6, r20
    360e:	59 01       	movw	r10, r18
    3610:	e0 90 da 23 	lds	r14, 0x23DA	; 0x8023da <test_case_ptr>
    3614:	f0 90 db 23 	lds	r15, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    3618:	e1 14       	cp	r14, r1
    361a:	f1 04       	cpc	r15, r1
    361c:	09 f1       	breq	.+66     	; 0x3660 <udd_ep_run+0x7a>
    361e:	af de       	rcall	.-674    	; 0x337e <udd_ep_is_valid>
    3620:	81 11       	cpse	r24, r1
    3622:	36 c0       	rjmp	.+108    	; 0x3690 <udd_ep_run+0xaa>
    3624:	8f e5       	ldi	r24, 0x5F	; 95
    3626:	92 e2       	ldi	r25, 0x22	; 34
    3628:	9f 93       	push	r25
    362a:	8f 93       	push	r24
    362c:	80 e6       	ldi	r24, 0x60	; 96
    362e:	92 e2       	ldi	r25, 0x22	; 34
    3630:	9f 93       	push	r25
    3632:	8f 93       	push	r24
    3634:	89 e8       	ldi	r24, 0x89	; 137
    3636:	94 e0       	ldi	r25, 0x04	; 4
    3638:	9f 93       	push	r25
    363a:	8f 93       	push	r24
    363c:	82 e0       	ldi	r24, 0x02	; 2
    363e:	8f 93       	push	r24
    3640:	87 ea       	ldi	r24, 0xA7	; 167
    3642:	8f 93       	push	r24
    3644:	8b ec       	ldi	r24, 0xCB	; 203
    3646:	91 e2       	ldi	r25, 0x21	; 33
    3648:	9f 93       	push	r25
    364a:	8f 93       	push	r24
    364c:	1f 92       	push	r1
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	8f 93       	push	r24
    3652:	ff 92       	push	r15
    3654:	ef 92       	push	r14
    3656:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    365a:	cd bf       	out	0x3d, r28	; 61
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	18 c0       	rjmp	.+48     	; 0x3690 <udd_ep_run+0xaa>
    3660:	8e de       	rcall	.-740    	; 0x337e <udd_ep_is_valid>
    3662:	81 11       	cpse	r24, r1
    3664:	15 c0       	rjmp	.+42     	; 0x3690 <udd_ep_run+0xaa>
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	8f 93       	push	r24
    366a:	87 ea       	ldi	r24, 0xA7	; 167
    366c:	8f 93       	push	r24
    366e:	8b ec       	ldi	r24, 0xCB	; 203
    3670:	91 e2       	ldi	r25, 0x21	; 33
    3672:	9f 93       	push	r25
    3674:	8f 93       	push	r24
    3676:	80 e6       	ldi	r24, 0x60	; 96
    3678:	92 e2       	ldi	r25, 0x22	; 34
    367a:	9f 93       	push	r25
    367c:	8f 93       	push	r24
    367e:	88 e6       	ldi	r24, 0x68	; 104
    3680:	94 e0       	ldi	r25, 0x04	; 4
    3682:	9f 93       	push	r25
    3684:	8f 93       	push	r24
    3686:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	de bf       	out	0x3e, r29	; 62
    368e:	ff cf       	rjmp	.-2      	; 0x368e <udd_ep_run+0xa8>
    3690:	8d 2d       	mov	r24, r13
    3692:	31 da       	rcall	.-2974   	; 0x2af6 <udd_ep_get_job>
    3694:	7c 01       	movw	r14, r24
    3696:	8d 2d       	mov	r24, r13
    3698:	98 d9       	rcall	.-3280   	; 0x29ca <udd_ep_get_ctrl>
    369a:	4c 01       	movw	r8, r24
    369c:	fc 01       	movw	r30, r24
    369e:	81 81       	ldd	r24, Z+1	; 0x01
    36a0:	80 7c       	andi	r24, 0xC0	; 192
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <udd_ep_run+0xc0>
    36a4:	51 c0       	rjmp	.+162    	; 0x3748 <udd_ep_run+0x162>
    36a6:	81 81       	ldd	r24, Z+1	; 0x01
    36a8:	80 7c       	andi	r24, 0xC0	; 192
    36aa:	80 3c       	cpi	r24, 0xC0	; 192
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <udd_ep_run+0xce>
    36ae:	81 81       	ldd	r24, Z+1	; 0x01
    36b0:	82 fd       	sbrc	r24, 2
    36b2:	4c c0       	rjmp	.+152    	; 0x374c <udd_ep_run+0x166>
    36b4:	8f b7       	in	r24, 0x3f	; 63
    36b6:	89 83       	std	Y+1, r24	; 0x01
    36b8:	f8 94       	cli
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	f7 01       	movw	r30, r14
    36be:	90 81       	ld	r25, Z
    36c0:	90 ff       	sbrs	r25, 0
    36c2:	03 c0       	rjmp	.+6      	; 0x36ca <udd_ep_run+0xe4>
    36c4:	8f bf       	out	0x3f, r24	; 63
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	42 c0       	rjmp	.+132    	; 0x374e <udd_ep_run+0x168>
    36ca:	f7 01       	movw	r30, r14
    36cc:	90 81       	ld	r25, Z
    36ce:	91 60       	ori	r25, 0x01	; 1
    36d0:	90 83       	st	Z, r25
    36d2:	8f bf       	out	0x3f, r24	; 63
    36d4:	61 82       	std	Z+1, r6	; 0x01
    36d6:	72 82       	std	Z+2, r7	; 0x02
    36d8:	a3 82       	std	Z+3, r10	; 0x03
    36da:	b4 82       	std	Z+4, r11	; 0x04
    36dc:	15 82       	std	Z+5, r1	; 0x05
    36de:	16 82       	std	Z+6, r1	; 0x06
    36e0:	07 83       	std	Z+7, r16	; 0x07
    36e2:	10 87       	std	Z+8, r17	; 0x08
    36e4:	c1 10       	cpse	r12, r1
    36e6:	05 c0       	rjmp	.+10     	; 0x36f2 <udd_ep_run+0x10c>
    36e8:	a1 14       	cp	r10, r1
    36ea:	b1 04       	cpc	r11, r1
    36ec:	21 f4       	brne	.+8      	; 0x36f6 <udd_ep_run+0x110>
    36ee:	91 e0       	ldi	r25, 0x01	; 1
    36f0:	03 c0       	rjmp	.+6      	; 0x36f8 <udd_ep_run+0x112>
    36f2:	91 e0       	ldi	r25, 0x01	; 1
    36f4:	01 c0       	rjmp	.+2      	; 0x36f8 <udd_ep_run+0x112>
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	f7 01       	movw	r30, r14
    36fa:	80 81       	ld	r24, Z
    36fc:	90 fb       	bst	r25, 0
    36fe:	81 f9       	bld	r24, 1
    3700:	8b 7f       	andi	r24, 0xFB	; 251
    3702:	80 83       	st	Z, r24
    3704:	dd 20       	and	r13, r13
    3706:	24 f4       	brge	.+8      	; 0x3710 <udd_ep_run+0x12a>
    3708:	f4 01       	movw	r30, r8
    370a:	16 82       	std	Z+6, r1	; 0x06
    370c:	17 82       	std	Z+7, r1	; 0x07
    370e:	18 c0       	rjmp	.+48     	; 0x3740 <udd_ep_run+0x15a>
    3710:	f4 01       	movw	r30, r8
    3712:	81 81       	ldd	r24, Z+1	; 0x01
    3714:	80 7c       	andi	r24, 0xC0	; 192
    3716:	80 3c       	cpi	r24, 0xC0	; 192
    3718:	71 f4       	brne	.+28     	; 0x3736 <udd_ep_run+0x150>
    371a:	c4 01       	movw	r24, r8
    371c:	c3 d9       	rcall	.-3194   	; 0x2aa4 <udd_ep_get_size>
    371e:	bc 01       	movw	r22, r24
    3720:	c5 01       	movw	r24, r10
    3722:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodhi4>
    3726:	89 2b       	or	r24, r25
    3728:	31 f0       	breq	.+12     	; 0x3736 <udd_ep_run+0x150>
    372a:	f7 01       	movw	r30, r14
    372c:	80 81       	ld	r24, Z
    372e:	8e 7f       	andi	r24, 0xFE	; 254
    3730:	80 83       	st	Z, r24
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	0c c0       	rjmp	.+24     	; 0x374e <udd_ep_run+0x168>
    3736:	f4 01       	movw	r30, r8
    3738:	12 82       	std	Z+2, r1	; 0x02
    373a:	13 82       	std	Z+3, r1	; 0x03
    373c:	16 82       	std	Z+6, r1	; 0x06
    373e:	17 82       	std	Z+7, r1	; 0x07
    3740:	8d 2d       	mov	r24, r13
    3742:	30 db       	rcall	.-2464   	; 0x2da4 <udd_ep_trans_complet>
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	03 c0       	rjmp	.+6      	; 0x374e <udd_ep_run+0x168>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	01 c0       	rjmp	.+2      	; 0x374e <udd_ep_run+0x168>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	0f 90       	pop	r0
    3750:	df 91       	pop	r29
    3752:	cf 91       	pop	r28
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	ff 90       	pop	r15
    375a:	ef 90       	pop	r14
    375c:	df 90       	pop	r13
    375e:	cf 90       	pop	r12
    3760:	bf 90       	pop	r11
    3762:	af 90       	pop	r10
    3764:	9f 90       	pop	r9
    3766:	8f 90       	pop	r8
    3768:	7f 90       	pop	r7
    376a:	6f 90       	pop	r6
    376c:	08 95       	ret

0000376e <udd_ep_abort>:
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	cf 93       	push	r28
    3776:	c8 2f       	mov	r28, r24
    3778:	e0 90 da 23 	lds	r14, 0x23DA	; 0x8023da <test_case_ptr>
    377c:	f0 90 db 23 	lds	r15, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    3780:	e1 14       	cp	r14, r1
    3782:	f1 04       	cpc	r15, r1
    3784:	21 f1       	breq	.+72     	; 0x37ce <udd_ep_abort+0x60>
    3786:	fb dd       	rcall	.-1034   	; 0x337e <udd_ep_is_valid>
    3788:	81 11       	cpse	r24, r1
    378a:	3c c0       	rjmp	.+120    	; 0x3804 <udd_ep_abort+0x96>
    378c:	8f e5       	ldi	r24, 0x5F	; 95
    378e:	92 e2       	ldi	r25, 0x22	; 34
    3790:	9f 93       	push	r25
    3792:	8f 93       	push	r24
    3794:	80 e6       	ldi	r24, 0x60	; 96
    3796:	92 e2       	ldi	r25, 0x22	; 34
    3798:	9f 93       	push	r25
    379a:	8f 93       	push	r24
    379c:	81 e5       	ldi	r24, 0x51	; 81
    379e:	94 e0       	ldi	r25, 0x04	; 4
    37a0:	9f 93       	push	r25
    37a2:	8f 93       	push	r24
    37a4:	82 e0       	ldi	r24, 0x02	; 2
    37a6:	8f 93       	push	r24
    37a8:	8e ed       	ldi	r24, 0xDE	; 222
    37aa:	8f 93       	push	r24
    37ac:	8b ec       	ldi	r24, 0xCB	; 203
    37ae:	91 e2       	ldi	r25, 0x21	; 33
    37b0:	9f 93       	push	r25
    37b2:	8f 93       	push	r24
    37b4:	1f 92       	push	r1
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	8f 93       	push	r24
    37ba:	ff 92       	push	r15
    37bc:	ef 92       	push	r14
    37be:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    37c2:	8d b7       	in	r24, 0x3d	; 61
    37c4:	9e b7       	in	r25, 0x3e	; 62
    37c6:	0e 96       	adiw	r24, 0x0e	; 14
    37c8:	8d bf       	out	0x3d, r24	; 61
    37ca:	9e bf       	out	0x3e, r25	; 62
    37cc:	1b c0       	rjmp	.+54     	; 0x3804 <udd_ep_abort+0x96>
    37ce:	d7 dd       	rcall	.-1106   	; 0x337e <udd_ep_is_valid>
    37d0:	81 11       	cpse	r24, r1
    37d2:	18 c0       	rjmp	.+48     	; 0x3804 <udd_ep_abort+0x96>
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	8f 93       	push	r24
    37d8:	8e ed       	ldi	r24, 0xDE	; 222
    37da:	8f 93       	push	r24
    37dc:	8b ec       	ldi	r24, 0xCB	; 203
    37de:	91 e2       	ldi	r25, 0x21	; 33
    37e0:	9f 93       	push	r25
    37e2:	8f 93       	push	r24
    37e4:	80 e6       	ldi	r24, 0x60	; 96
    37e6:	92 e2       	ldi	r25, 0x22	; 34
    37e8:	9f 93       	push	r25
    37ea:	8f 93       	push	r24
    37ec:	80 e3       	ldi	r24, 0x30	; 48
    37ee:	94 e0       	ldi	r25, 0x04	; 4
    37f0:	9f 93       	push	r25
    37f2:	8f 93       	push	r24
    37f4:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    37f8:	ad b7       	in	r26, 0x3d	; 61
    37fa:	be b7       	in	r27, 0x3e	; 62
    37fc:	18 96       	adiw	r26, 0x08	; 8
    37fe:	ad bf       	out	0x3d, r26	; 61
    3800:	be bf       	out	0x3e, r27	; 62
    3802:	ff cf       	rjmp	.-2      	; 0x3802 <udd_ep_abort+0x94>
    3804:	8c 2f       	mov	r24, r28
    3806:	e1 d8       	rcall	.-3646   	; 0x29ca <udd_ep_get_ctrl>
    3808:	7c 01       	movw	r14, r24
    380a:	8c 2f       	mov	r24, r28
    380c:	74 d9       	rcall	.-3352   	; 0x2af6 <udd_ep_get_job>
    380e:	dc 01       	movw	r26, r24
    3810:	f7 01       	movw	r30, r14
    3812:	02 e0       	ldi	r16, 0x02	; 2
    3814:	05 93       	las	Z, r16
    3816:	8c 91       	ld	r24, X
    3818:	80 ff       	sbrs	r24, 0
    381a:	18 c0       	rjmp	.+48     	; 0x384c <udd_ep_abort+0xde>
    381c:	8e 7f       	andi	r24, 0xFE	; 254
    381e:	8c 93       	st	X, r24
    3820:	17 96       	adiw	r26, 0x07	; 7
    3822:	ed 91       	ld	r30, X+
    3824:	fc 91       	ld	r31, X
    3826:	18 97       	sbiw	r26, 0x08	; 8
    3828:	30 97       	sbiw	r30, 0x00	; 0
    382a:	81 f0       	breq	.+32     	; 0x384c <udd_ep_abort+0xde>
    382c:	cc 23       	and	r28, r28
    382e:	34 f4       	brge	.+12     	; 0x383c <udd_ep_abort+0xce>
    3830:	d7 01       	movw	r26, r14
    3832:	16 96       	adiw	r26, 0x06	; 6
    3834:	6d 91       	ld	r22, X+
    3836:	7c 91       	ld	r23, X
    3838:	17 97       	sbiw	r26, 0x07	; 7
    383a:	05 c0       	rjmp	.+10     	; 0x3846 <udd_ep_abort+0xd8>
    383c:	d7 01       	movw	r26, r14
    383e:	12 96       	adiw	r26, 0x02	; 2
    3840:	6d 91       	ld	r22, X+
    3842:	7c 91       	ld	r23, X
    3844:	13 97       	sbiw	r26, 0x03	; 3
    3846:	4c 2f       	mov	r20, r28
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	19 95       	eicall
    384c:	cf 91       	pop	r28
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	08 95       	ret

00003856 <__vector_125>:
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	0b b6       	in	r0, 0x3b	; 59
    3862:	0f 92       	push	r0
    3864:	2f 93       	push	r18
    3866:	3f 93       	push	r19
    3868:	4f 93       	push	r20
    386a:	5f 93       	push	r21
    386c:	6f 93       	push	r22
    386e:	7f 93       	push	r23
    3870:	8f 93       	push	r24
    3872:	9f 93       	push	r25
    3874:	af 93       	push	r26
    3876:	bf 93       	push	r27
    3878:	cf 93       	push	r28
    387a:	ef 93       	push	r30
    387c:	ff 93       	push	r31
    387e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    3882:	88 23       	and	r24, r24
    3884:	34 f4       	brge	.+12     	; 0x3892 <__vector_125+0x3c>
    3886:	80 e8       	ldi	r24, 0x80	; 128
    3888:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    388c:	0e 94 22 0b 	call	0x1644	; 0x1644 <udc_sof_notify>
    3890:	3d c0       	rjmp	.+122    	; 0x390c <__vector_125+0xb6>
    3892:	3c dd       	rcall	.-1416   	; 0x330c <udd_ctrl_interrupt_error>
    3894:	81 11       	cpse	r24, r1
    3896:	3a c0       	rjmp	.+116    	; 0x390c <__vector_125+0xb6>
    3898:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    389c:	84 ff       	sbrs	r24, 4
    389e:	23 c0       	rjmp	.+70     	; 0x38e6 <__vector_125+0x90>
    38a0:	80 e1       	ldi	r24, 0x10	; 16
    38a2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    38a6:	c1 e0       	ldi	r28, 0x01	; 1
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <__vector_125+0x60>
    38aa:	8c 2f       	mov	r24, r28
    38ac:	60 df       	rcall	.-320    	; 0x376e <udd_ep_abort>
    38ae:	8c 2f       	mov	r24, r28
    38b0:	80 68       	ori	r24, 0x80	; 128
    38b2:	5d df       	rcall	.-326    	; 0x376e <udd_ep_abort>
    38b4:	cf 5f       	subi	r28, 0xFF	; 255
    38b6:	c3 30       	cpi	r28, 0x03	; 3
    38b8:	c0 f3       	brcs	.-16     	; 0x38aa <__vector_125+0x54>
    38ba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <udc_reset>
    38be:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    38c2:	40 e4       	ldi	r20, 0x40	; 64
    38c4:	50 e0       	ldi	r21, 0x00	; 0
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	33 d9       	rcall	.-3482   	; 0x2b32 <udd_ep_init>
    38cc:	40 e4       	ldi	r20, 0x40	; 64
    38ce:	50 e0       	ldi	r21, 0x00	; 0
    38d0:	60 e0       	ldi	r22, 0x00	; 0
    38d2:	80 e8       	ldi	r24, 0x80	; 128
    38d4:	2e d9       	rcall	.-3492   	; 0x2b32 <udd_ep_init>
    38d6:	8c ee       	ldi	r24, 0xEC	; 236
    38d8:	94 e2       	ldi	r25, 0x24	; 36
    38da:	80 93 44 25 	sts	0x2544, r24	; 0x802544 <udd_sram+0x10>
    38de:	90 93 45 25 	sts	0x2545, r25	; 0x802545 <udd_sram+0x11>
    38e2:	8d d8       	rcall	.-3814   	; 0x29fe <udd_ctrl_init>
    38e4:	13 c0       	rjmp	.+38     	; 0x390c <__vector_125+0xb6>
    38e6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    38ea:	86 ff       	sbrs	r24, 6
    38ec:	06 c0       	rjmp	.+12     	; 0x38fa <__vector_125+0xa4>
    38ee:	80 e4       	ldi	r24, 0x40	; 64
    38f0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	32 d8       	rcall	.-3996   	; 0x295c <udd_sleep_mode>
    38f8:	09 c0       	rjmp	.+18     	; 0x390c <__vector_125+0xb6>
    38fa:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    38fe:	85 ff       	sbrs	r24, 5
    3900:	05 c0       	rjmp	.+10     	; 0x390c <__vector_125+0xb6>
    3902:	80 e2       	ldi	r24, 0x20	; 32
    3904:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	28 d8       	rcall	.-4016   	; 0x295c <udd_sleep_mode>
    390c:	ff 91       	pop	r31
    390e:	ef 91       	pop	r30
    3910:	cf 91       	pop	r28
    3912:	bf 91       	pop	r27
    3914:	af 91       	pop	r26
    3916:	9f 91       	pop	r25
    3918:	8f 91       	pop	r24
    391a:	7f 91       	pop	r23
    391c:	6f 91       	pop	r22
    391e:	5f 91       	pop	r21
    3920:	4f 91       	pop	r20
    3922:	3f 91       	pop	r19
    3924:	2f 91       	pop	r18
    3926:	0f 90       	pop	r0
    3928:	0b be       	out	0x3b, r0	; 59
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	0f 90       	pop	r0
    3930:	1f 90       	pop	r1
    3932:	18 95       	reti

00003934 <udd_ep_free>:
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	c8 2f       	mov	r28, r24
    393c:	00 91 da 23 	lds	r16, 0x23DA	; 0x8023da <test_case_ptr>
    3940:	10 91 db 23 	lds	r17, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    3944:	01 15       	cp	r16, r1
    3946:	11 05       	cpc	r17, r1
    3948:	21 f1       	breq	.+72     	; 0x3992 <udd_ep_free+0x5e>
    394a:	19 dd       	rcall	.-1486   	; 0x337e <udd_ep_is_valid>
    394c:	81 11       	cpse	r24, r1
    394e:	3c c0       	rjmp	.+120    	; 0x39c8 <udd_ep_free+0x94>
    3950:	8f e5       	ldi	r24, 0x5F	; 95
    3952:	92 e2       	ldi	r25, 0x22	; 34
    3954:	9f 93       	push	r25
    3956:	8f 93       	push	r24
    3958:	80 e6       	ldi	r24, 0x60	; 96
    395a:	92 e2       	ldi	r25, 0x22	; 34
    395c:	9f 93       	push	r25
    395e:	8f 93       	push	r24
    3960:	89 e6       	ldi	r24, 0x69	; 105
    3962:	95 e0       	ldi	r25, 0x05	; 5
    3964:	9f 93       	push	r25
    3966:	8f 93       	push	r24
    3968:	82 e0       	ldi	r24, 0x02	; 2
    396a:	8f 93       	push	r24
    396c:	8d e6       	ldi	r24, 0x6D	; 109
    396e:	8f 93       	push	r24
    3970:	8b ec       	ldi	r24, 0xCB	; 203
    3972:	91 e2       	ldi	r25, 0x21	; 33
    3974:	9f 93       	push	r25
    3976:	8f 93       	push	r24
    3978:	1f 92       	push	r1
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	8f 93       	push	r24
    397e:	1f 93       	push	r17
    3980:	0f 93       	push	r16
    3982:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3986:	8d b7       	in	r24, 0x3d	; 61
    3988:	9e b7       	in	r25, 0x3e	; 62
    398a:	0e 96       	adiw	r24, 0x0e	; 14
    398c:	8d bf       	out	0x3d, r24	; 61
    398e:	9e bf       	out	0x3e, r25	; 62
    3990:	1b c0       	rjmp	.+54     	; 0x39c8 <udd_ep_free+0x94>
    3992:	f5 dc       	rcall	.-1558   	; 0x337e <udd_ep_is_valid>
    3994:	81 11       	cpse	r24, r1
    3996:	18 c0       	rjmp	.+48     	; 0x39c8 <udd_ep_free+0x94>
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	8f 93       	push	r24
    399c:	8d e6       	ldi	r24, 0x6D	; 109
    399e:	8f 93       	push	r24
    39a0:	8b ec       	ldi	r24, 0xCB	; 203
    39a2:	91 e2       	ldi	r25, 0x21	; 33
    39a4:	9f 93       	push	r25
    39a6:	8f 93       	push	r24
    39a8:	80 e6       	ldi	r24, 0x60	; 96
    39aa:	92 e2       	ldi	r25, 0x22	; 34
    39ac:	9f 93       	push	r25
    39ae:	8f 93       	push	r24
    39b0:	88 e4       	ldi	r24, 0x48	; 72
    39b2:	95 e0       	ldi	r25, 0x05	; 5
    39b4:	9f 93       	push	r25
    39b6:	8f 93       	push	r24
    39b8:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    39bc:	ed b7       	in	r30, 0x3d	; 61
    39be:	fe b7       	in	r31, 0x3e	; 62
    39c0:	38 96       	adiw	r30, 0x08	; 8
    39c2:	ed bf       	out	0x3d, r30	; 61
    39c4:	fe bf       	out	0x3e, r31	; 62
    39c6:	ff cf       	rjmp	.-2      	; 0x39c6 <udd_ep_free+0x92>
    39c8:	8c 2f       	mov	r24, r28
    39ca:	d1 de       	rcall	.-606    	; 0x376e <udd_ep_abort>
    39cc:	8c 2f       	mov	r24, r28
    39ce:	0e 94 e5 14 	call	0x29ca	; 0x29ca <udd_ep_get_ctrl>
    39d2:	fc 01       	movw	r30, r24
    39d4:	11 82       	std	Z+1, r1	; 0x01
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	08 95       	ret

000039de <udd_ep_set_halt>:
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	c8 2f       	mov	r28, r24
    39e6:	00 91 da 23 	lds	r16, 0x23DA	; 0x8023da <test_case_ptr>
    39ea:	10 91 db 23 	lds	r17, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    39ee:	01 15       	cp	r16, r1
    39f0:	11 05       	cpc	r17, r1
    39f2:	21 f1       	breq	.+72     	; 0x3a3c <udd_ep_set_halt+0x5e>
    39f4:	c4 dc       	rcall	.-1656   	; 0x337e <udd_ep_is_valid>
    39f6:	81 11       	cpse	r24, r1
    39f8:	3c c0       	rjmp	.+120    	; 0x3a72 <udd_ep_set_halt+0x94>
    39fa:	8f e5       	ldi	r24, 0x5F	; 95
    39fc:	92 e2       	ldi	r25, 0x22	; 34
    39fe:	9f 93       	push	r25
    3a00:	8f 93       	push	r24
    3a02:	80 e6       	ldi	r24, 0x60	; 96
    3a04:	92 e2       	ldi	r25, 0x22	; 34
    3a06:	9f 93       	push	r25
    3a08:	8f 93       	push	r24
    3a0a:	89 ef       	ldi	r24, 0xF9	; 249
    3a0c:	94 e0       	ldi	r25, 0x04	; 4
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	82 e0       	ldi	r24, 0x02	; 2
    3a14:	8f 93       	push	r24
    3a16:	80 e8       	ldi	r24, 0x80	; 128
    3a18:	8f 93       	push	r24
    3a1a:	8b ec       	ldi	r24, 0xCB	; 203
    3a1c:	91 e2       	ldi	r25, 0x21	; 33
    3a1e:	9f 93       	push	r25
    3a20:	8f 93       	push	r24
    3a22:	1f 92       	push	r1
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	8f 93       	push	r24
    3a28:	1f 93       	push	r17
    3a2a:	0f 93       	push	r16
    3a2c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3a30:	8d b7       	in	r24, 0x3d	; 61
    3a32:	9e b7       	in	r25, 0x3e	; 62
    3a34:	0e 96       	adiw	r24, 0x0e	; 14
    3a36:	8d bf       	out	0x3d, r24	; 61
    3a38:	9e bf       	out	0x3e, r25	; 62
    3a3a:	1b c0       	rjmp	.+54     	; 0x3a72 <udd_ep_set_halt+0x94>
    3a3c:	a0 dc       	rcall	.-1728   	; 0x337e <udd_ep_is_valid>
    3a3e:	81 11       	cpse	r24, r1
    3a40:	18 c0       	rjmp	.+48     	; 0x3a72 <udd_ep_set_halt+0x94>
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	8f 93       	push	r24
    3a46:	80 e8       	ldi	r24, 0x80	; 128
    3a48:	8f 93       	push	r24
    3a4a:	8b ec       	ldi	r24, 0xCB	; 203
    3a4c:	91 e2       	ldi	r25, 0x21	; 33
    3a4e:	9f 93       	push	r25
    3a50:	8f 93       	push	r24
    3a52:	80 e6       	ldi	r24, 0x60	; 96
    3a54:	92 e2       	ldi	r25, 0x22	; 34
    3a56:	9f 93       	push	r25
    3a58:	8f 93       	push	r24
    3a5a:	88 ed       	ldi	r24, 0xD8	; 216
    3a5c:	94 e0       	ldi	r25, 0x04	; 4
    3a5e:	9f 93       	push	r25
    3a60:	8f 93       	push	r24
    3a62:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3a66:	8d b7       	in	r24, 0x3d	; 61
    3a68:	9e b7       	in	r25, 0x3e	; 62
    3a6a:	08 96       	adiw	r24, 0x08	; 8
    3a6c:	8d bf       	out	0x3d, r24	; 61
    3a6e:	9e bf       	out	0x3e, r25	; 62
    3a70:	ff cf       	rjmp	.-2      	; 0x3a70 <udd_ep_set_halt+0x92>
    3a72:	8c 2f       	mov	r24, r28
    3a74:	0e 94 e5 14 	call	0x29ca	; 0x29ca <udd_ep_get_ctrl>
    3a78:	fc 01       	movw	r30, r24
    3a7a:	91 81       	ldd	r25, Z+1	; 0x01
    3a7c:	94 60       	ori	r25, 0x04	; 4
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	8c 2f       	mov	r24, r28
    3a82:	75 de       	rcall	.-790    	; 0x376e <udd_ep_abort>
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	08 95       	ret

00003a8e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    3a8e:	1f 92       	push	r1
    3a90:	0f 92       	push	r0
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	0f 92       	push	r0
    3a96:	11 24       	eor	r1, r1
    3a98:	0b b6       	in	r0, 0x3b	; 59
    3a9a:	0f 92       	push	r0
    3a9c:	0f 93       	push	r16
    3a9e:	1f 93       	push	r17
    3aa0:	2f 93       	push	r18
    3aa2:	3f 93       	push	r19
    3aa4:	4f 93       	push	r20
    3aa6:	5f 93       	push	r21
    3aa8:	6f 93       	push	r22
    3aaa:	7f 93       	push	r23
    3aac:	8f 93       	push	r24
    3aae:	9f 93       	push	r25
    3ab0:	af 93       	push	r26
    3ab2:	bf 93       	push	r27
    3ab4:	cf 93       	push	r28
    3ab6:	ef 93       	push	r30
    3ab8:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    3aba:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    3abe:	81 fd       	sbrc	r24, 1
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    3ac0:	42 c0       	rjmp	.+132    	; 0x3b46 <__vector_126+0xb8>
    3ac2:	8d db       	rcall	.-2278   	; 0x31de <udd_ctrl_interrupt_tc_setup>
    3ac4:	81 11       	cpse	r24, r1
    3ac6:	02 c1       	rjmp	.+516    	; 0x3ccc <__vector_126+0x23e>
    3ac8:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <test_case_ptr>
    3acc:	90 91 db 23 	lds	r25, 0x23DB	; 0x8023db <test_case_ptr+0x1>
			// Interrupt acked by control endpoint managed
			goto udd_interrupt_tc_end;
		}
		Assert(false);
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	09 f1       	breq	.+66     	; 0x3b16 <__vector_126+0x88>
    3ad4:	2f e5       	ldi	r18, 0x5F	; 95
    3ad6:	32 e2       	ldi	r19, 0x22	; 34
    3ad8:	3f 93       	push	r19
    3ada:	2f 93       	push	r18
    3adc:	25 ec       	ldi	r18, 0xC5	; 197
    3ade:	31 e2       	ldi	r19, 0x21	; 33
    3ae0:	3f 93       	push	r19
    3ae2:	2f 93       	push	r18
    3ae4:	29 ea       	ldi	r18, 0xA9	; 169
    3ae6:	33 e0       	ldi	r19, 0x03	; 3
    3ae8:	3f 93       	push	r19
    3aea:	2f 93       	push	r18
    3aec:	23 e0       	ldi	r18, 0x03	; 3
    3aee:	2f 93       	push	r18
    3af0:	2b e6       	ldi	r18, 0x6B	; 107
    3af2:	2f 93       	push	r18
    3af4:	2b ec       	ldi	r18, 0xCB	; 203
    3af6:	31 e2       	ldi	r19, 0x21	; 33
    3af8:	3f 93       	push	r19
    3afa:	2f 93       	push	r18
    3afc:	1f 92       	push	r1
    3afe:	21 e0       	ldi	r18, 0x01	; 1
    3b00:	2f 93       	push	r18
    3b02:	9f 93       	push	r25
    3b04:	8f 93       	push	r24
    3b06:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3b0a:	8d b7       	in	r24, 0x3d	; 61
    3b0c:	9e b7       	in	r25, 0x3e	; 62
    3b0e:	0e 96       	adiw	r24, 0x0e	; 14
    3b10:	8d bf       	out	0x3d, r24	; 61
    3b12:	9e bf       	out	0x3e, r25	; 62
    3b14:	18 c0       	rjmp	.+48     	; 0x3b46 <__vector_126+0xb8>
    3b16:	83 e0       	ldi	r24, 0x03	; 3
    3b18:	8f 93       	push	r24
    3b1a:	8b e6       	ldi	r24, 0x6B	; 107
    3b1c:	8f 93       	push	r24
    3b1e:	8b ec       	ldi	r24, 0xCB	; 203
    3b20:	91 e2       	ldi	r25, 0x21	; 33
    3b22:	9f 93       	push	r25
    3b24:	8f 93       	push	r24
    3b26:	85 ec       	ldi	r24, 0xC5	; 197
    3b28:	91 e2       	ldi	r25, 0x21	; 33
    3b2a:	9f 93       	push	r25
    3b2c:	8f 93       	push	r24
    3b2e:	88 e8       	ldi	r24, 0x88	; 136
    3b30:	93 e0       	ldi	r25, 0x03	; 3
    3b32:	9f 93       	push	r25
    3b34:	8f 93       	push	r24
    3b36:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3b3a:	ed b7       	in	r30, 0x3d	; 61
    3b3c:	fe b7       	in	r31, 0x3e	; 62
    3b3e:	38 96       	adiw	r30, 0x08	; 8
    3b40:	ed bf       	out	0x3d, r30	; 61
    3b42:	fe bf       	out	0x3e, r31	; 62
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    3b44:	ff cf       	rjmp	.-2      	; 0x3b44 <__vector_126+0xb6>
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    3b4c:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    3b50:	81 95       	neg	r24
    3b52:	98 2f       	mov	r25, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    3b54:	99 0f       	add	r25, r25
    3b56:	e0 e4       	ldi	r30, 0x40	; 64
    3b58:	f5 e2       	ldi	r31, 0x25	; 37
    3b5a:	e9 1b       	sub	r30, r25
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    3b5c:	f1 09       	sbc	r31, r1
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	80 54       	subi	r24, 0x40	; 64
    3b64:	95 42       	sbci	r25, 0x25	; 37
    3b66:	96 95       	lsr	r25
    3b68:	87 95       	ror	r24
    3b6a:	96 95       	lsr	r25
    3b6c:	87 95       	ror	r24
    3b6e:	96 95       	lsr	r25
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    3b70:	87 95       	ror	r24
    3b72:	98 2f       	mov	r25, r24
    3b74:	96 95       	lsr	r25
    3b76:	80 ff       	sbrs	r24, 0
    3b78:	02 c0       	rjmp	.+4      	; 0x3b7e <__vector_126+0xf0>
    3b7a:	c0 e8       	ldi	r28, 0x80	; 128
    3b7c:	01 c0       	rjmp	.+2      	; 0x3b80 <__vector_126+0xf2>
    3b7e:	c0 e0       	ldi	r28, 0x00	; 0
    3b80:	c9 0f       	add	r28, r25
    3b82:	20 91 da 23 	lds	r18, 0x23DA	; 0x8023da <test_case_ptr>
    3b86:	30 91 db 23 	lds	r19, 0x23DB	; 0x8023db <test_case_ptr+0x1>
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));
    3b8a:	21 15       	cp	r18, r1
    3b8c:	31 05       	cpc	r19, r1
    3b8e:	31 f1       	breq	.+76     	; 0x3bdc <__vector_126+0x14e>
    3b90:	8c 2f       	mov	r24, r28
    3b92:	8f 70       	andi	r24, 0x0F	; 15
    3b94:	90 e0       	ldi	r25, 0x00	; 0
    3b96:	03 97       	sbiw	r24, 0x03	; 3
    3b98:	f4 f1       	brlt	.+124    	; 0x3c16 <__vector_126+0x188>
    3b9a:	8f e5       	ldi	r24, 0x5F	; 95
    3b9c:	92 e2       	ldi	r25, 0x22	; 34
    3b9e:	9f 93       	push	r25
    3ba0:	8f 93       	push	r24
    3ba2:	84 e7       	ldi	r24, 0x74	; 116
    3ba4:	92 e2       	ldi	r25, 0x22	; 34
    3ba6:	9f 93       	push	r25
    3ba8:	8f 93       	push	r24
    3baa:	81 e7       	ldi	r24, 0x71	; 113
    3bac:	93 e0       	ldi	r25, 0x03	; 3
    3bae:	9f 93       	push	r25
    3bb0:	8f 93       	push	r24
    3bb2:	83 e0       	ldi	r24, 0x03	; 3
    3bb4:	8f 93       	push	r24
    3bb6:	8a e7       	ldi	r24, 0x7A	; 122
    3bb8:	8f 93       	push	r24
    3bba:	8b ec       	ldi	r24, 0xCB	; 203
    3bbc:	91 e2       	ldi	r25, 0x21	; 33
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	1f 92       	push	r1
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	8f 93       	push	r24
    3bc8:	3f 93       	push	r19
    3bca:	2f 93       	push	r18
    3bcc:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3bd0:	8d b7       	in	r24, 0x3d	; 61
    3bd2:	9e b7       	in	r25, 0x3e	; 62
    3bd4:	0e 96       	adiw	r24, 0x0e	; 14
    3bd6:	8d bf       	out	0x3d, r24	; 61
    3bd8:	9e bf       	out	0x3e, r25	; 62
    3bda:	1d c0       	rjmp	.+58     	; 0x3c16 <__vector_126+0x188>
    3bdc:	8c 2f       	mov	r24, r28
    3bde:	8f 70       	andi	r24, 0x0F	; 15
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	03 97       	sbiw	r24, 0x03	; 3
    3be4:	c4 f0       	brlt	.+48     	; 0x3c16 <__vector_126+0x188>
    3be6:	83 e0       	ldi	r24, 0x03	; 3
    3be8:	8f 93       	push	r24
    3bea:	8a e7       	ldi	r24, 0x7A	; 122
    3bec:	8f 93       	push	r24
    3bee:	8b ec       	ldi	r24, 0xCB	; 203
    3bf0:	91 e2       	ldi	r25, 0x21	; 33
    3bf2:	9f 93       	push	r25
    3bf4:	8f 93       	push	r24
    3bf6:	84 e7       	ldi	r24, 0x74	; 116
    3bf8:	92 e2       	ldi	r25, 0x22	; 34
    3bfa:	9f 93       	push	r25
    3bfc:	8f 93       	push	r24
    3bfe:	80 e5       	ldi	r24, 0x50	; 80
    3c00:	93 e0       	ldi	r25, 0x03	; 3
    3c02:	9f 93       	push	r25
    3c04:	8f 93       	push	r24
    3c06:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3c0a:	ed b7       	in	r30, 0x3d	; 61
    3c0c:	fe b7       	in	r31, 0x3e	; 62
    3c0e:	38 96       	adiw	r30, 0x08	; 8
    3c10:	ed bf       	out	0x3d, r30	; 61
    3c12:	fe bf       	out	0x3e, r31	; 62

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    3c14:	ff cf       	rjmp	.-2      	; 0x3c14 <__vector_126+0x186>
    3c16:	8c 2f       	mov	r24, r28
    3c18:	0e 94 e5 14 	call	0x29ca	; 0x29ca <udd_ep_get_ctrl>
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	20 81       	ld	r18, Z
    3c20:	25 ff       	sbrs	r18, 5
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    3c22:	54 c0       	rjmp	.+168    	; 0x3ccc <__vector_126+0x23e>
    3c24:	00 e2       	ldi	r16, 0x20	; 32

	// Check status on control endpoint
	if (ep == 0) {
    3c26:	06 93       	lac	Z, r16
		udd_ctrl_out_received();
    3c28:	c1 11       	cpse	r28, r1
    3c2a:	02 c0       	rjmp	.+4      	; 0x3c30 <__vector_126+0x1a2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    3c2c:	bd d9       	rcall	.-3206   	; 0x2fa8 <udd_ctrl_out_received>
		udd_ctrl_in_sent();
    3c2e:	4e c0       	rjmp	.+156    	; 0x3ccc <__vector_126+0x23e>
    3c30:	c0 38       	cpi	r28, 0x80	; 128
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    3c32:	11 f4       	brne	.+4      	; 0x3c38 <__vector_126+0x1aa>
    3c34:	0c d8       	rcall	.-4072   	; 0x2c4e <udd_ctrl_in_sent>
    3c36:	4a c0       	rjmp	.+148    	; 0x3ccc <__vector_126+0x23e>
    3c38:	00 91 da 23 	lds	r16, 0x23DA	; 0x8023da <test_case_ptr>
	}
	Assert(udd_ep_is_valid(ep));
    3c3c:	10 91 db 23 	lds	r17, 0x23DB	; 0x8023db <test_case_ptr+0x1>
    3c40:	01 15       	cp	r16, r1
    3c42:	11 05       	cpc	r17, r1
    3c44:	29 f1       	breq	.+74     	; 0x3c90 <__vector_126+0x202>
    3c46:	8c 2f       	mov	r24, r28
    3c48:	9a db       	rcall	.-2252   	; 0x337e <udd_ep_is_valid>
    3c4a:	81 11       	cpse	r24, r1
    3c4c:	3d c0       	rjmp	.+122    	; 0x3cc8 <__vector_126+0x23a>
    3c4e:	8f e5       	ldi	r24, 0x5F	; 95
    3c50:	92 e2       	ldi	r25, 0x22	; 34
    3c52:	9f 93       	push	r25
    3c54:	8f 93       	push	r24
    3c56:	80 e6       	ldi	r24, 0x60	; 96
    3c58:	92 e2       	ldi	r25, 0x22	; 34
    3c5a:	9f 93       	push	r25
    3c5c:	8f 93       	push	r24
    3c5e:	89 e3       	ldi	r24, 0x39	; 57
    3c60:	93 e0       	ldi	r25, 0x03	; 3
    3c62:	9f 93       	push	r25
    3c64:	8f 93       	push	r24
    3c66:	83 e0       	ldi	r24, 0x03	; 3
    3c68:	8f 93       	push	r24
    3c6a:	8c e8       	ldi	r24, 0x8C	; 140
    3c6c:	8f 93       	push	r24
    3c6e:	8b ec       	ldi	r24, 0xCB	; 203
    3c70:	91 e2       	ldi	r25, 0x21	; 33
    3c72:	9f 93       	push	r25
    3c74:	8f 93       	push	r24
    3c76:	1f 92       	push	r1
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	8f 93       	push	r24
    3c7c:	1f 93       	push	r17
    3c7e:	0f 93       	push	r16
    3c80:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <test_case_fail>
    3c84:	8d b7       	in	r24, 0x3d	; 61
    3c86:	9e b7       	in	r25, 0x3e	; 62
    3c88:	0e 96       	adiw	r24, 0x0e	; 14
    3c8a:	8d bf       	out	0x3d, r24	; 61
    3c8c:	9e bf       	out	0x3e, r25	; 62
    3c8e:	1c c0       	rjmp	.+56     	; 0x3cc8 <__vector_126+0x23a>
    3c90:	8c 2f       	mov	r24, r28
    3c92:	75 db       	rcall	.-2326   	; 0x337e <udd_ep_is_valid>
    3c94:	81 11       	cpse	r24, r1
    3c96:	18 c0       	rjmp	.+48     	; 0x3cc8 <__vector_126+0x23a>
    3c98:	83 e0       	ldi	r24, 0x03	; 3
    3c9a:	8f 93       	push	r24
    3c9c:	8c e8       	ldi	r24, 0x8C	; 140
    3c9e:	8f 93       	push	r24
    3ca0:	8b ec       	ldi	r24, 0xCB	; 203
    3ca2:	91 e2       	ldi	r25, 0x21	; 33
    3ca4:	9f 93       	push	r25
    3ca6:	8f 93       	push	r24
    3ca8:	80 e6       	ldi	r24, 0x60	; 96
    3caa:	92 e2       	ldi	r25, 0x22	; 34
    3cac:	9f 93       	push	r25
    3cae:	8f 93       	push	r24
    3cb0:	88 e1       	ldi	r24, 0x18	; 24
    3cb2:	93 e0       	ldi	r25, 0x03	; 3
    3cb4:	9f 93       	push	r25
    3cb6:	8f 93       	push	r24
    3cb8:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <printf_P>
    3cbc:	ed b7       	in	r30, 0x3d	; 61
    3cbe:	fe b7       	in	r31, 0x3e	; 62
    3cc0:	38 96       	adiw	r30, 0x08	; 8
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    3cc2:	ed bf       	out	0x3d, r30	; 61
    3cc4:	fe bf       	out	0x3e, r31	; 62
    3cc6:	ff cf       	rjmp	.-2      	; 0x3cc6 <__vector_126+0x238>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    3cc8:	8c 2f       	mov	r24, r28
    3cca:	6c d8       	rcall	.-3880   	; 0x2da4 <udd_ep_trans_complet>
    3ccc:	ff 91       	pop	r31
    3cce:	ef 91       	pop	r30
    3cd0:	cf 91       	pop	r28
    3cd2:	bf 91       	pop	r27
    3cd4:	af 91       	pop	r26
    3cd6:	9f 91       	pop	r25
    3cd8:	8f 91       	pop	r24
    3cda:	7f 91       	pop	r23
    3cdc:	6f 91       	pop	r22
    3cde:	5f 91       	pop	r21
    3ce0:	4f 91       	pop	r20
    3ce2:	3f 91       	pop	r19
    3ce4:	2f 91       	pop	r18
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	0f 90       	pop	r0
    3cec:	0b be       	out	0x3b, r0	; 59
    3cee:	0f 90       	pop	r0
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	0f 90       	pop	r0
    3cf4:	1f 90       	pop	r1
    3cf6:	18 95       	reti

00003cf8 <ms5607_02ba03_reset>:
*
* As in it waits for the reset to return and halts all other processing until
* the reset is complete.
*/
 void ms5607_02ba03_reset(void)
 {
    3cf8:	cf 92       	push	r12
    3cfa:	df 92       	push	r13
    3cfc:	ef 92       	push	r14
    3cfe:	ff 92       	push	r15
    3d00:	0f 93       	push	r16
    3d02:	1f 93       	push	r17
    gAltimeterControl.spi_send_buffer[0] = ALTIMETER_RESET;
    3d04:	ed e9       	ldi	r30, 0x9D	; 157
    3d06:	f6 e2       	ldi	r31, 0x26	; 38
    3d08:	8e e1       	ldi	r24, 0x1E	; 30
    3d0a:	85 83       	std	Z+5, r24	; 0x05

    /** Send BLOCKING request as this is done during initialization */
    /** Tell SPI to NOT pull CS high after transaction to allow for reset time. */
    spi_master_blocking_send_req_cslow(gAltimeterControl.spi_master,
    3d0c:	0f 2e       	mov	r0, r31
    3d0e:	f6 ec       	ldi	r31, 0xC6	; 198
    3d10:	cf 2e       	mov	r12, r31
    3d12:	f6 e2       	ldi	r31, 0x26	; 38
    3d14:	df 2e       	mov	r13, r31
    3d16:	f0 2d       	mov	r31, r0
    3d18:	e1 2c       	mov	r14, r1
    3d1a:	f1 2c       	mov	r15, r1
    3d1c:	04 eb       	ldi	r16, 0xB4	; 180
    3d1e:	16 e2       	ldi	r17, 0x26	; 38
    3d20:	21 e0       	ldi	r18, 0x01	; 1
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	42 ea       	ldi	r20, 0xA2	; 162
    3d26:	56 e2       	ldi	r21, 0x26	; 38
    3d28:	6f e9       	ldi	r22, 0x9F	; 159
    3d2a:	76 e2       	ldi	r23, 0x26	; 38
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	b0 d7       	rcall	.+3936   	; 0x4c92 <spi_master_blocking_send_req_cslow>
                       gAltimeterControl.spi_send_buffer,
                       1,
                       gAltimeterControl.spi_recv_buffer,
                       0,
                       &(gAltimeterControl.send_complete));
 }
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	08 95       	ret

00003d40 <ms5607_02ba03_read_prom>:
  *
  * Where PROM is Programmable Read Only Memory 
  * It reads 6 16 bit words of data.
  */
 void ms5607_02ba03_read_prom(void)
 {
    3d40:	9f 92       	push	r9
    3d42:	af 92       	push	r10
    3d44:	bf 92       	push	r11
    3d46:	cf 92       	push	r12
    3d48:	df 92       	push	r13
    3d4a:	ef 92       	push	r14
    3d4c:	ff 92       	push	r15
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    uint8_t i;
    uint16_t *calptr = (uint16_t *)&(gAltimeterControl.calibration_vals);
    /** Grab addresses 1 through 6 of PROM (datasheet page 11) */
    /** Each one is 16 bits. */
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));
    3d56:	82 e1       	ldi	r24, 0x12	; 18
    3d58:	e2 ea       	ldi	r30, 0xA2	; 162
    3d5a:	f6 e2       	ldi	r31, 0x26	; 38
    3d5c:	df 01       	movw	r26, r30
    3d5e:	1d 92       	st	X+, r1
    3d60:	8a 95       	dec	r24
    3d62:	e9 f7       	brne	.-6      	; 0x3d5e <ms5607_02ba03_read_prom+0x1e>
  * It reads 6 16 bit words of data.
  */
 void ms5607_02ba03_read_prom(void)
 {
    uint8_t i;
    uint16_t *calptr = (uint16_t *)&(gAltimeterControl.calibration_vals);
    3d64:	0f 2e       	mov	r0, r31
    3d66:	f7 ec       	ldi	r31, 0xC7	; 199
    3d68:	af 2e       	mov	r10, r31
    3d6a:	f6 e2       	ldi	r31, 0x26	; 38
    3d6c:	bf 2e       	mov	r11, r31
    3d6e:	f0 2d       	mov	r31, r0
    /** Grab addresses 1 through 6 of PROM (datasheet page 11) */
    /** Each one is 16 bits. */
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));

    for(i = ALTIMETER_PROM_BASE + 2; i < ALTIMETER_PROM_BASE + 0x0E; i = i+2)
    3d70:	0f 2e       	mov	r0, r31
    3d72:	f2 ea       	ldi	r31, 0xA2	; 162
    3d74:	9f 2e       	mov	r9, r31
    3d76:	f0 2d       	mov	r31, r0
    3d78:	25 c0       	rjmp	.+74     	; 0x3dc4 <ms5607_02ba03_read_prom+0x84>
    {
        gAltimeterControl.spi_send_buffer[0] = i;
    3d7a:	cd e9       	ldi	r28, 0x9D	; 157
    3d7c:	d6 e2       	ldi	r29, 0x26	; 38
    3d7e:	9d 82       	std	Y+5, r9	; 0x05
        /** Send BLOCKING request as this is done during initialization */
        spi_master_blocking_send_request(gAltimeterControl.spi_master,
    3d80:	0f 2e       	mov	r0, r31
    3d82:	f6 ec       	ldi	r31, 0xC6	; 198
    3d84:	cf 2e       	mov	r12, r31
    3d86:	f6 e2       	ldi	r31, 0x26	; 38
    3d88:	df 2e       	mov	r13, r31
    3d8a:	f0 2d       	mov	r31, r0
    3d8c:	0f 2e       	mov	r0, r31
    3d8e:	f3 e0       	ldi	r31, 0x03	; 3
    3d90:	ef 2e       	mov	r14, r31
    3d92:	f1 2c       	mov	r15, r1
    3d94:	f0 2d       	mov	r31, r0
    3d96:	04 eb       	ldi	r16, 0xB4	; 180
    3d98:	16 e2       	ldi	r17, 0x26	; 38
    3d9a:	21 e0       	ldi	r18, 0x01	; 1
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	42 ea       	ldi	r20, 0xA2	; 162
    3da0:	56 e2       	ldi	r21, 0x26	; 38
    3da2:	6f e9       	ldi	r22, 0x9F	; 159
    3da4:	76 e2       	ldi	r23, 0x26	; 38
    3da6:	88 81       	ld	r24, Y
    3da8:	99 81       	ldd	r25, Y+1	; 0x01
    3daa:	52 d7       	rcall	.+3748   	; 0x4c50 <spi_master_blocking_send_request>
                                        1,
                                        gAltimeterControl.spi_recv_buffer,
                                        3,
                                        &(gAltimeterControl.send_complete));

        *calptr = ((uint16_t)gAltimeterControl.spi_recv_buffer[1] << 8) | gAltimeterControl.spi_recv_buffer[0];
    3dac:	88 8d       	ldd	r24, Y+24	; 0x18
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	98 2f       	mov	r25, r24
    3db2:	88 27       	eor	r24, r24
    3db4:	2f 89       	ldd	r18, Y+23	; 0x17
    3db6:	82 2b       	or	r24, r18
    3db8:	f5 01       	movw	r30, r10
    3dba:	81 93       	st	Z+, r24
    3dbc:	91 93       	st	Z+, r25
    3dbe:	5f 01       	movw	r10, r30
    uint16_t *calptr = (uint16_t *)&(gAltimeterControl.calibration_vals);
    /** Grab addresses 1 through 6 of PROM (datasheet page 11) */
    /** Each one is 16 bits. */
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));

    for(i = ALTIMETER_PROM_BASE + 2; i < ALTIMETER_PROM_BASE + 0x0E; i = i+2)
    3dc0:	93 94       	inc	r9
    3dc2:	93 94       	inc	r9
    3dc4:	fd ea       	ldi	r31, 0xAD	; 173
    3dc6:	f9 15       	cp	r31, r9
    3dc8:	c0 f6       	brcc	.-80     	; 0x3d7a <ms5607_02ba03_read_prom+0x3a>
                                        &(gAltimeterControl.send_complete));

        *calptr = ((uint16_t)gAltimeterControl.spi_recv_buffer[1] << 8) | gAltimeterControl.spi_recv_buffer[0];
        calptr++;
    }
 }
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	ff 90       	pop	r15
    3dd4:	ef 90       	pop	r14
    3dd6:	df 90       	pop	r13
    3dd8:	cf 90       	pop	r12
    3dda:	bf 90       	pop	r11
    3ddc:	af 90       	pop	r10
    3dde:	9f 90       	pop	r9
    3de0:	08 95       	ret

00003de2 <ms5607_02ba03_init>:
* This is the initializer for the altimeter driver. 
* It initializes buffers for SPI and other control data. Hardware initialization is done in init.c
* Also resets the altimeter and retrieves the configuration data.
*/
void ms5607_02ba03_init(spi_master_t *spi_master)
{
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    gAltimeterControl.cs_info.csPort = &ALTIMETER_PORT;
    3de6:	cd e9       	ldi	r28, 0x9D	; 157
    3de8:	d6 e2       	ldi	r29, 0x26	; 38
    3dea:	20 ea       	ldi	r18, 0xA0	; 160
    3dec:	36 e0       	ldi	r19, 0x06	; 6
    3dee:	2a 83       	std	Y+2, r18	; 0x02
    3df0:	3b 83       	std	Y+3, r19	; 0x03
    gAltimeterControl.cs_info.pinBitMask = ALTIMETER_CS;
    3df2:	21 e0       	ldi	r18, 0x01	; 1
    3df4:	2c 83       	std	Y+4, r18	; 0x04
    gAltimeterControl.spi_master = spi_master;
    3df6:	88 83       	st	Y, r24
    3df8:	99 83       	std	Y+1, r25	; 0x01
    memset((void *)gAltimeterControl.spi_recv_buffer, 0, sizeof(gAltimeterControl.spi_recv_buffer));
    3dfa:	82 e1       	ldi	r24, 0x12	; 18
    3dfc:	e4 eb       	ldi	r30, 0xB4	; 180
    3dfe:	f6 e2       	ldi	r31, 0x26	; 38
    3e00:	df 01       	movw	r26, r30
    3e02:	98 2f       	mov	r25, r24
    3e04:	1d 92       	st	X+, r1
    3e06:	9a 95       	dec	r25
    3e08:	e9 f7       	brne	.-6      	; 0x3e04 <ms5607_02ba03_init+0x22>
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));
    3e0a:	e2 ea       	ldi	r30, 0xA2	; 162
    3e0c:	f6 e2       	ldi	r31, 0x26	; 38
    3e0e:	df 01       	movw	r26, r30
    3e10:	1d 92       	st	X+, r1
    3e12:	8a 95       	dec	r24
    3e14:	e9 f7       	brne	.-6      	; 0x3e10 <ms5607_02ba03_init+0x2e>
    gAltimeterControl.send_complete = false;
    3e16:	19 a6       	std	Y+41, r1	; 0x29

    memset((void *)(&(gAltimeterControl.raw_vals)), 0, sizeof(gAltimeterControl.raw_vals));
    3e18:	8c e0       	ldi	r24, 0x0C	; 12
    3e1a:	e3 ed       	ldi	r30, 0xD3	; 211
    3e1c:	f6 e2       	ldi	r31, 0x26	; 38
    3e1e:	df 01       	movw	r26, r30
    3e20:	1d 92       	st	X+, r1
    3e22:	8a 95       	dec	r24
    3e24:	e9 f7       	brne	.-6      	; 0x3e20 <ms5607_02ba03_init+0x3e>
    memset((void *)(&(gAltimeterControl.final_vals)), 0, sizeof(gAltimeterControl.final_vals));
    3e26:	88 e0       	ldi	r24, 0x08	; 8
    3e28:	ef ed       	ldi	r30, 0xDF	; 223
    3e2a:	f6 e2       	ldi	r31, 0x26	; 38
    3e2c:	df 01       	movw	r26, r30
    3e2e:	1d 92       	st	X+, r1
    3e30:	8a 95       	dec	r24

    /** Call initial functions to prepare altimeter. */
    ms5607_02ba03_reset();
    timer_delay_ms(3); /** Delay 3 ms to allow for reset */
    3e32:	e9 f7       	brne	.-6      	; 0x3e2e <ms5607_02ba03_init+0x4c>
    3e34:	61 df       	rcall	.-318    	; 0x3cf8 <ms5607_02ba03_reset>
    gAltimeterControl.cs_info.csPort->OUTSET = gAltimeterControl.cs_info.pinBitMask; /** Pull CS High to allow continued operation */
    3e36:	83 e0       	ldi	r24, 0x03	; 3
    3e38:	ad d3       	rcall	.+1882   	; 0x4594 <timer_delay_ms>
    3e3a:	ea 81       	ldd	r30, Y+2	; 0x02
    ms5607_02ba03_read_prom();
    3e3c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e3e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3e40:	85 83       	std	Z+5, r24	; 0x05
    3e42:	7e df       	rcall	.-260    	; 0x3d40 <ms5607_02ba03_read_prom>
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	08 95       	ret

00003e4a <ms5607_02ba03_d1_convert>:
  * @brief Get the pressure value and convert it to reasonable units.
  *
  * After calling this you have to wait 8.2 ms between conversion and ADC read 
  */
 void ms5607_02ba03_d1_convert(void)
 {
    3e4a:	cf 92       	push	r12
    3e4c:	df 92       	push	r13
    3e4e:	ef 92       	push	r14
    3e50:	ff 92       	push	r15
    3e52:	0f 93       	push	r16
    3e54:	1f 93       	push	r17
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));
    3e56:	82 e1       	ldi	r24, 0x12	; 18
    3e58:	e2 ea       	ldi	r30, 0xA2	; 162
    3e5a:	f6 e2       	ldi	r31, 0x26	; 38
    3e5c:	df 01       	movw	r26, r30
    3e5e:	1d 92       	st	X+, r1
    3e60:	8a 95       	dec	r24
    3e62:	e9 f7       	brne	.-6      	; 0x3e5e <ms5607_02ba03_d1_convert+0x14>
    
    gAltimeterControl.spi_send_buffer[0] = ALTIMETER_CONVERT_D1;
    3e64:	ed e9       	ldi	r30, 0x9D	; 157
    3e66:	f6 e2       	ldi	r31, 0x26	; 38
    3e68:	86 e4       	ldi	r24, 0x46	; 70
    3e6a:	85 83       	std	Z+5, r24	; 0x05

    spi_master_enqueue(gAltimeterControl.spi_master,
    3e6c:	0f 2e       	mov	r0, r31
    3e6e:	f6 ec       	ldi	r31, 0xC6	; 198
    3e70:	cf 2e       	mov	r12, r31
    3e72:	f6 e2       	ldi	r31, 0x26	; 38
    3e74:	df 2e       	mov	r13, r31
    3e76:	f0 2d       	mov	r31, r0
    3e78:	e1 2c       	mov	r14, r1
    3e7a:	f1 2c       	mov	r15, r1
    3e7c:	04 eb       	ldi	r16, 0xB4	; 180
    3e7e:	16 e2       	ldi	r17, 0x26	; 38
    3e80:	21 e0       	ldi	r18, 0x01	; 1
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	42 ea       	ldi	r20, 0xA2	; 162
    3e86:	56 e2       	ldi	r21, 0x26	; 38
    3e88:	6f e9       	ldi	r22, 0x9F	; 159
    3e8a:	76 e2       	ldi	r23, 0x26	; 38
    3e8c:	80 81       	ld	r24, Z
    3e8e:	91 81       	ldd	r25, Z+1	; 0x01
    3e90:	9c d5       	rcall	.+2872   	; 0x49ca <spi_master_enqueue>
                       gAltimeterControl.spi_send_buffer,
                       1,
                       gAltimeterControl.spi_recv_buffer,
                       0,
                       &(gAltimeterControl.send_complete));
 }
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	ff 90       	pop	r15
    3e98:	ef 90       	pop	r14
    3e9a:	df 90       	pop	r13
    3e9c:	cf 90       	pop	r12
    3e9e:	08 95       	ret

00003ea0 <ms5607_02ba03_d2_convert>:
 * After calling this you have to wait 8.2 ms between conversion and ADC read 
 * It partially relies on the pressure value and must be called after the d1 convert is called
 *
 */
 void ms5607_02ba03_d2_convert(void)
 {
    3ea0:	cf 92       	push	r12
    3ea2:	df 92       	push	r13
    3ea4:	ef 92       	push	r14
    3ea6:	ff 92       	push	r15
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
     memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));
    3eac:	82 e1       	ldi	r24, 0x12	; 18
    3eae:	e2 ea       	ldi	r30, 0xA2	; 162
    3eb0:	f6 e2       	ldi	r31, 0x26	; 38
    3eb2:	df 01       	movw	r26, r30
    3eb4:	1d 92       	st	X+, r1
    3eb6:	8a 95       	dec	r24
    3eb8:	e9 f7       	brne	.-6      	; 0x3eb4 <ms5607_02ba03_d2_convert+0x14>
     
     gAltimeterControl.spi_send_buffer[0] = ALTIMETER_CONVERT_D2;
    3eba:	ed e9       	ldi	r30, 0x9D	; 157
    3ebc:	f6 e2       	ldi	r31, 0x26	; 38
    3ebe:	86 e5       	ldi	r24, 0x56	; 86
    3ec0:	85 83       	std	Z+5, r24	; 0x05

     spi_master_enqueue(gAltimeterControl.spi_master,
    3ec2:	0f 2e       	mov	r0, r31
    3ec4:	f6 ec       	ldi	r31, 0xC6	; 198
    3ec6:	cf 2e       	mov	r12, r31
    3ec8:	f6 e2       	ldi	r31, 0x26	; 38
    3eca:	df 2e       	mov	r13, r31
    3ecc:	f0 2d       	mov	r31, r0
    3ece:	e1 2c       	mov	r14, r1
    3ed0:	f1 2c       	mov	r15, r1
    3ed2:	04 eb       	ldi	r16, 0xB4	; 180
    3ed4:	16 e2       	ldi	r17, 0x26	; 38
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	42 ea       	ldi	r20, 0xA2	; 162
    3edc:	56 e2       	ldi	r21, 0x26	; 38
    3ede:	6f e9       	ldi	r22, 0x9F	; 159
    3ee0:	76 e2       	ldi	r23, 0x26	; 38
    3ee2:	80 81       	ld	r24, Z
    3ee4:	91 81       	ldd	r25, Z+1	; 0x01
    3ee6:	71 d5       	rcall	.+2786   	; 0x49ca <spi_master_enqueue>
                        gAltimeterControl.spi_send_buffer,
                        1,
                        gAltimeterControl.spi_recv_buffer,
                        0,
                        &(gAltimeterControl.send_complete));
 }
    3ee8:	1f 91       	pop	r17
    3eea:	0f 91       	pop	r16
    3eec:	ff 90       	pop	r15
    3eee:	ef 90       	pop	r14
    3ef0:	df 90       	pop	r13
    3ef2:	cf 90       	pop	r12
    3ef4:	08 95       	ret

00003ef6 <ms5607_02ba03_read_data>:
  * into the recieve buffer
  *
  * 24 bits for pressure/temperature. NOTE: Always convert d1 and d2 first 
  */
void ms5607_02ba03_read_data(void)
{
    3ef6:	cf 92       	push	r12
    3ef8:	df 92       	push	r13
    3efa:	ef 92       	push	r14
    3efc:	ff 92       	push	r15
    3efe:	0f 93       	push	r16
    3f00:	1f 93       	push	r17
    memset((void *)gAltimeterControl.spi_send_buffer, 0, sizeof(gAltimeterControl.spi_send_buffer));
    3f02:	82 e1       	ldi	r24, 0x12	; 18
    3f04:	e2 ea       	ldi	r30, 0xA2	; 162
    3f06:	f6 e2       	ldi	r31, 0x26	; 38
    3f08:	df 01       	movw	r26, r30
    3f0a:	1d 92       	st	X+, r1
    3f0c:	8a 95       	dec	r24
    3f0e:	e9 f7       	brne	.-6      	; 0x3f0a <ms5607_02ba03_read_data+0x14>
        
    gAltimeterControl.spi_send_buffer[0] = ALTIMETER_ADC_READ;
    3f10:	ed e9       	ldi	r30, 0x9D	; 157
    3f12:	f6 e2       	ldi	r31, 0x26	; 38
    3f14:	15 82       	std	Z+5, r1	; 0x05

    spi_master_enqueue(gAltimeterControl.spi_master,
    3f16:	0f 2e       	mov	r0, r31
    3f18:	f6 ec       	ldi	r31, 0xC6	; 198
    3f1a:	cf 2e       	mov	r12, r31
    3f1c:	f6 e2       	ldi	r31, 0x26	; 38
    3f1e:	df 2e       	mov	r13, r31
    3f20:	f0 2d       	mov	r31, r0
    3f22:	68 94       	set
    3f24:	ee 24       	eor	r14, r14
    3f26:	e2 f8       	bld	r14, 2
    3f28:	f1 2c       	mov	r15, r1
    3f2a:	04 eb       	ldi	r16, 0xB4	; 180
    3f2c:	16 e2       	ldi	r17, 0x26	; 38
    3f2e:	21 e0       	ldi	r18, 0x01	; 1
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	42 ea       	ldi	r20, 0xA2	; 162
    3f34:	56 e2       	ldi	r21, 0x26	; 38
    3f36:	6f e9       	ldi	r22, 0x9F	; 159
    3f38:	76 e2       	ldi	r23, 0x26	; 38
    3f3a:	80 81       	ld	r24, Z
    3f3c:	91 81       	ldd	r25, Z+1	; 0x01
    3f3e:	45 d5       	rcall	.+2698   	; 0x49ca <spi_master_enqueue>
                       gAltimeterControl.spi_send_buffer,
                       1,
                       gAltimeterControl.spi_recv_buffer,
                       4,
                       &(gAltimeterControl.send_complete));
}
    3f40:	1f 91       	pop	r17
    3f42:	0f 91       	pop	r16
    3f44:	ff 90       	pop	r15
    3f46:	ef 90       	pop	r14
    3f48:	df 90       	pop	r13
    3f4a:	cf 90       	pop	r12
    3f4c:	08 95       	ret

00003f4e <ms5607_02ba03_calculate_temp>:
 *
 */
void ms5607_02ba03_calculate_temp(void)
{    
    /* dT = D2 - TREF = D2 - C5 * 2^8 */
    gAltimeterControl.raw_vals.t_diff = (int32_t)(gAltimeterControl.raw_vals.dig_temp - ((uint32_t)gAltimeterControl.calibration_vals.t_ref << 8));
    3f4e:	ed e9       	ldi	r30, 0x9D	; 157
    3f50:	f6 e2       	ldi	r31, 0x26	; 38
    3f52:	42 ad       	ldd	r20, Z+58	; 0x3a
    3f54:	53 ad       	ldd	r21, Z+59	; 0x3b
    3f56:	64 ad       	ldd	r22, Z+60	; 0x3c
    3f58:	75 ad       	ldd	r23, Z+61	; 0x3d
    3f5a:	82 a9       	ldd	r24, Z+50	; 0x32
    3f5c:	93 a9       	ldd	r25, Z+51	; 0x33
    3f5e:	a0 e0       	ldi	r26, 0x00	; 0
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	ba 2f       	mov	r27, r26
    3f64:	a9 2f       	mov	r26, r25
    3f66:	98 2f       	mov	r25, r24
    3f68:	88 27       	eor	r24, r24
    3f6a:	9a 01       	movw	r18, r20
    3f6c:	ab 01       	movw	r20, r22
    3f6e:	28 1b       	sub	r18, r24
    3f70:	39 0b       	sbc	r19, r25
    3f72:	4a 0b       	sbc	r20, r26
    3f74:	5b 0b       	sbc	r21, r27
    3f76:	20 93 db 26 	sts	0x26DB, r18	; 0x8026db <gAltimeterControl+0x3e>
    3f7a:	30 93 dc 26 	sts	0x26DC, r19	; 0x8026dc <gAltimeterControl+0x3f>
    3f7e:	40 93 dd 26 	sts	0x26DD, r20	; 0x8026dd <gAltimeterControl+0x40>
    3f82:	50 93 de 26 	sts	0x26DE, r21	; 0x8026de <gAltimeterControl+0x41>

    /* TEMP =20°C +dT* TEMPSENS =2000 + dT * C6 / 2^23 */
    gAltimeterControl.final_vals.temp = (int32_t)(2000 + ((gAltimeterControl.raw_vals.t_diff * (uint32_t)gAltimeterControl.calibration_vals.temp_sens) >> 23));
    3f86:	a4 a9       	ldd	r26, Z+52	; 0x34
    3f88:	b5 a9       	ldd	r27, Z+53	; 0x35
    3f8a:	c1 d6       	rcall	.+3458   	; 0x4d0e <__muluhisi3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	07 2e       	mov	r0, r23
    3f92:	77 e1       	ldi	r23, 0x17	; 23
    3f94:	b6 95       	lsr	r27
    3f96:	a7 95       	ror	r26
    3f98:	97 95       	ror	r25
    3f9a:	87 95       	ror	r24
    3f9c:	7a 95       	dec	r23
    3f9e:	d1 f7       	brne	.-12     	; 0x3f94 <ms5607_02ba03_calculate_temp+0x46>
    3fa0:	70 2d       	mov	r23, r0
    3fa2:	80 53       	subi	r24, 0x30	; 48
    3fa4:	98 4f       	sbci	r25, 0xF8	; 248
    3fa6:	af 4f       	sbci	r26, 0xFF	; 255
    3fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    3faa:	80 93 df 26 	sts	0x26DF, r24	; 0x8026df <gAltimeterControl+0x42>
    3fae:	90 93 e0 26 	sts	0x26E0, r25	; 0x8026e0 <gAltimeterControl+0x43>
    3fb2:	a0 93 e1 26 	sts	0x26E1, r26	; 0x8026e1 <gAltimeterControl+0x44>
    3fb6:	b0 93 e2 26 	sts	0x26E2, r27	; 0x8026e2 <gAltimeterControl+0x45>
    3fba:	08 95       	ret

00003fbc <ms5607_02ba03_calculate_press>:
 * This does some fun math to figure out the pressure.
 * If you want details I suggest seeing the driver doc 
 *
 */
void ms5607_02ba03_calculate_press(void)
{
    3fbc:	2f 92       	push	r2
    3fbe:	3f 92       	push	r3
    3fc0:	4f 92       	push	r4
    3fc2:	5f 92       	push	r5
    3fc4:	6f 92       	push	r6
    3fc6:	7f 92       	push	r7
    3fc8:	8f 92       	push	r8
    3fca:	9f 92       	push	r9
    3fcc:	af 92       	push	r10
    3fce:	bf 92       	push	r11
    3fd0:	cf 92       	push	r12
    3fd2:	df 92       	push	r13
    3fd4:	ef 92       	push	r14
    3fd6:	ff 92       	push	r15
    3fd8:	0f 93       	push	r16
    3fda:	1f 93       	push	r17
    3fdc:	cf 93       	push	r28
    3fde:	df 93       	push	r29
    3fe0:	cd b7       	in	r28, 0x3d	; 61
    3fe2:	de b7       	in	r29, 0x3e	; 62
    3fe4:	69 97       	sbiw	r28, 0x19	; 25
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	de bf       	out	0x3e, r29	; 62
    int64_t press_offs, press_sens;

    /* OFF = OFFT1 +TCO* dT = C2 * 2^17 +(C4 *dT )/2^6 */
    press_offs = (int64_t)(((int64_t)gAltimeterControl.calibration_vals.offset << 17) +
    3fea:	0f 2e       	mov	r0, r31
    3fec:	fd e9       	ldi	r31, 0x9D	; 157
    3fee:	2f 2e       	mov	r2, r31
    3ff0:	f6 e2       	ldi	r31, 0x26	; 38
    3ff2:	3f 2e       	mov	r3, r31
    3ff4:	f0 2d       	mov	r31, r0
    3ff6:	f1 01       	movw	r30, r2
    3ff8:	84 a5       	ldd	r24, Z+44	; 0x2c
    3ffa:	95 a5       	ldd	r25, Z+45	; 0x2d
    3ffc:	8c 01       	movw	r16, r24
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e0       	ldi	r20, 0x00	; 0
    4004:	50 e0       	ldi	r21, 0x00	; 0
    4006:	ba 01       	movw	r22, r20
    4008:	89 8b       	std	Y+17, r24	; 0x11
    400a:	1a 8b       	std	Y+18, r17	; 0x12
    400c:	2b 8b       	std	Y+19, r18	; 0x13
    400e:	3c 8b       	std	Y+20, r19	; 0x14
    4010:	4d 8b       	std	Y+21, r20	; 0x15
    4012:	5e 8b       	std	Y+22, r21	; 0x16
    4014:	6f 8b       	std	Y+23, r22	; 0x17
    4016:	78 8f       	std	Y+24, r23	; 0x18
    4018:	28 2f       	mov	r18, r24
    401a:	31 2f       	mov	r19, r17
    401c:	40 e0       	ldi	r20, 0x00	; 0
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	70 e0       	ldi	r23, 0x00	; 0
    4024:	80 e0       	ldi	r24, 0x00	; 0
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	01 e1       	ldi	r16, 0x11	; 17
    402a:	cc d6       	rcall	.+3480   	; 0x4dc4 <__ashldi3>
    402c:	2d 83       	std	Y+5, r18	; 0x05
    402e:	3e 83       	std	Y+6, r19	; 0x06
    4030:	4f 83       	std	Y+7, r20	; 0x07
    4032:	58 87       	std	Y+8, r21	; 0x08
    4034:	86 2e       	mov	r8, r22
    4036:	97 2e       	mov	r9, r23
    4038:	8a 87       	std	Y+10, r24	; 0x0a
    403a:	99 87       	std	Y+9, r25	; 0x09
               (((int64_t)gAltimeterControl.calibration_vals.tco * (int64_t)gAltimeterControl.raw_vals.t_diff) >> 6));
    403c:	40 a9       	ldd	r20, Z+48	; 0x30
    403e:	51 a9       	ldd	r21, Z+49	; 0x31
    4040:	40 90 db 26 	lds	r4, 0x26DB	; 0x8026db <gAltimeterControl+0x3e>
    4044:	50 90 dc 26 	lds	r5, 0x26DC	; 0x8026dc <gAltimeterControl+0x3f>
    4048:	60 90 dd 26 	lds	r6, 0x26DD	; 0x8026dd <gAltimeterControl+0x40>
    404c:	70 90 de 26 	lds	r7, 0x26DE	; 0x8026de <gAltimeterControl+0x41>
    4050:	93 01       	movw	r18, r6
    4052:	82 01       	movw	r16, r4
    4054:	33 0f       	add	r19, r19
    4056:	00 0b       	sbc	r16, r16
    4058:	10 2f       	mov	r17, r16
    405a:	98 01       	movw	r18, r16
    405c:	09 83       	std	Y+1, r16	; 0x01
    405e:	1a 83       	std	Y+2, r17	; 0x02
    4060:	2b 83       	std	Y+3, r18	; 0x03
    4062:	3c 83       	std	Y+4, r19	; 0x04
    4064:	a4 2c       	mov	r10, r4
    4066:	b5 2c       	mov	r11, r5
    4068:	c6 2c       	mov	r12, r6
    406a:	d7 2c       	mov	r13, r7
    406c:	e9 80       	ldd	r14, Y+1	; 0x01
    406e:	fe 2c       	mov	r15, r14
    4070:	0e 2d       	mov	r16, r14
    4072:	1e 2d       	mov	r17, r14
    4074:	24 2f       	mov	r18, r20
    4076:	35 2f       	mov	r19, r21
    4078:	40 e0       	ldi	r20, 0x00	; 0
    407a:	50 e0       	ldi	r21, 0x00	; 0
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	70 e0       	ldi	r23, 0x00	; 0
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	4e d6       	rcall	.+3228   	; 0x4d22 <__muldi3>
    4086:	06 e0       	ldi	r16, 0x06	; 6
    4088:	b6 d6       	rcall	.+3436   	; 0x4df6 <__ashrdi3>
    408a:	a2 2e       	mov	r10, r18
    408c:	b3 2e       	mov	r11, r19
    408e:	c4 2e       	mov	r12, r20
    4090:	d5 2e       	mov	r13, r21
    4092:	e6 2e       	mov	r14, r22
    4094:	f7 2e       	mov	r15, r23
    4096:	08 2f       	mov	r16, r24
    4098:	19 2f       	mov	r17, r25
void ms5607_02ba03_calculate_press(void)
{
    int64_t press_offs, press_sens;

    /* OFF = OFFT1 +TCO* dT = C2 * 2^17 +(C4 *dT )/2^6 */
    press_offs = (int64_t)(((int64_t)gAltimeterControl.calibration_vals.offset << 17) +
    409a:	2d 81       	ldd	r18, Y+5	; 0x05
    409c:	3e 81       	ldd	r19, Y+6	; 0x06
    409e:	4f 81       	ldd	r20, Y+7	; 0x07
    40a0:	58 85       	ldd	r21, Y+8	; 0x08
    40a2:	68 2d       	mov	r22, r8
    40a4:	79 2d       	mov	r23, r9
    40a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    40a8:	99 85       	ldd	r25, Y+9	; 0x09
    40aa:	c3 d6       	rcall	.+3462   	; 0x4e32 <__adddi3>
    40ac:	2d 83       	std	Y+5, r18	; 0x05
    40ae:	3e 83       	std	Y+6, r19	; 0x06
    40b0:	4f 83       	std	Y+7, r20	; 0x07
    40b2:	58 87       	std	Y+8, r21	; 0x08
    40b4:	69 87       	std	Y+9, r22	; 0x09
    40b6:	7a 87       	std	Y+10, r23	; 0x0a
    40b8:	8b 87       	std	Y+11, r24	; 0x0b
    40ba:	9c 87       	std	Y+12, r25	; 0x0c
               (((int64_t)gAltimeterControl.calibration_vals.tco * (int64_t)gAltimeterControl.raw_vals.t_diff) >> 6));

    /* SENS = SENST1 + TCS* dT= C1 * 2^16 + (C3 * dT ) / 2^7 */
    press_sens = (int64_t)(((int64_t)gAltimeterControl.calibration_vals.sens << 16) + 
    40bc:	f1 01       	movw	r30, r2
    40be:	82 a5       	ldd	r24, Z+42	; 0x2a
    40c0:	93 a5       	ldd	r25, Z+43	; 0x2b
    40c2:	8c 01       	movw	r16, r24
    40c4:	20 e0       	ldi	r18, 0x00	; 0
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	ba 01       	movw	r22, r20
    40ce:	1a 8b       	std	Y+18, r17	; 0x12
    40d0:	2b 8b       	std	Y+19, r18	; 0x13
    40d2:	3c 8b       	std	Y+20, r19	; 0x14
    40d4:	4d 8b       	std	Y+21, r20	; 0x15
    40d6:	5e 8b       	std	Y+22, r21	; 0x16
    40d8:	6f 8b       	std	Y+23, r22	; 0x17
    40da:	78 8f       	std	Y+24, r23	; 0x18
    40dc:	28 2f       	mov	r18, r24
    40de:	31 2f       	mov	r19, r17
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	60 e0       	ldi	r22, 0x00	; 0
    40e6:	70 e0       	ldi	r23, 0x00	; 0
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	00 e1       	ldi	r16, 0x10	; 16
    40ee:	6a d6       	rcall	.+3284   	; 0x4dc4 <__ashldi3>
    40f0:	2d 87       	std	Y+13, r18	; 0x0d
    40f2:	3e 87       	std	Y+14, r19	; 0x0e
    40f4:	4f 87       	std	Y+15, r20	; 0x0f
    40f6:	58 8b       	std	Y+16, r21	; 0x10
    40f8:	86 2e       	mov	r8, r22
    40fa:	97 2e       	mov	r9, r23
    40fc:	89 8f       	std	Y+25, r24	; 0x19
    40fe:	99 8b       	std	Y+17, r25	; 0x11
                (((int64_t)gAltimeterControl.calibration_vals.tcs * (int64_t)gAltimeterControl.raw_vals.t_diff) >> 7));
    4100:	06 a5       	ldd	r16, Z+46	; 0x2e
    4102:	17 a5       	ldd	r17, Z+47	; 0x2f
    4104:	a0 2e       	mov	r10, r16
    4106:	b1 2e       	mov	r11, r17
    4108:	c1 2c       	mov	r12, r1
    410a:	d1 2c       	mov	r13, r1
    410c:	e1 2c       	mov	r14, r1
    410e:	f1 2c       	mov	r15, r1
    4110:	00 e0       	ldi	r16, 0x00	; 0
    4112:	10 e0       	ldi	r17, 0x00	; 0
    4114:	24 2d       	mov	r18, r4
    4116:	35 2d       	mov	r19, r5
    4118:	46 2d       	mov	r20, r6
    411a:	57 2d       	mov	r21, r7
    411c:	69 81       	ldd	r22, Y+1	; 0x01
    411e:	76 2f       	mov	r23, r22
    4120:	86 2f       	mov	r24, r22
    4122:	96 2f       	mov	r25, r22
    4124:	fe d5       	rcall	.+3068   	; 0x4d22 <__muldi3>
    4126:	07 e0       	ldi	r16, 0x07	; 7
    4128:	66 d6       	rcall	.+3276   	; 0x4df6 <__ashrdi3>
    412a:	a2 2e       	mov	r10, r18
    412c:	b3 2e       	mov	r11, r19
    412e:	c4 2e       	mov	r12, r20
    4130:	d5 2e       	mov	r13, r21
    4132:	e6 2e       	mov	r14, r22
    4134:	f7 2e       	mov	r15, r23
    4136:	08 2f       	mov	r16, r24
    4138:	19 2f       	mov	r17, r25
    /* OFF = OFFT1 +TCO* dT = C2 * 2^17 +(C4 *dT )/2^6 */
    press_offs = (int64_t)(((int64_t)gAltimeterControl.calibration_vals.offset << 17) +
               (((int64_t)gAltimeterControl.calibration_vals.tco * (int64_t)gAltimeterControl.raw_vals.t_diff) >> 6));

    /* SENS = SENST1 + TCS* dT= C1 * 2^16 + (C3 * dT ) / 2^7 */
    press_sens = (int64_t)(((int64_t)gAltimeterControl.calibration_vals.sens << 16) + 
    413a:	2d 85       	ldd	r18, Y+13	; 0x0d
    413c:	3e 85       	ldd	r19, Y+14	; 0x0e
    413e:	4f 85       	ldd	r20, Y+15	; 0x0f
    4140:	58 89       	ldd	r21, Y+16	; 0x10
    4142:	68 2d       	mov	r22, r8
    4144:	79 2d       	mov	r23, r9
    4146:	89 8d       	ldd	r24, Y+25	; 0x19
    4148:	99 89       	ldd	r25, Y+17	; 0x11
    414a:	73 d6       	rcall	.+3302   	; 0x4e32 <__adddi3>
                (((int64_t)gAltimeterControl.calibration_vals.tcs * (int64_t)gAltimeterControl.raw_vals.t_diff) >> 7));

    /* P = D1 * SENS - OFF = (D1 * SENS / 2^21 - OFF) / 2^15  */
    gAltimeterControl.final_vals.pressure = (int32_t)( ( ( ((int64_t)gAltimeterControl.raw_vals.dig_press * press_sens) >> 21) - press_offs) >> 15 );
    414c:	f1 01       	movw	r30, r2
    414e:	46 a8       	ldd	r4, Z+54	; 0x36
    4150:	57 a8       	ldd	r5, Z+55	; 0x37
    4152:	60 ac       	ldd	r6, Z+56	; 0x38
    4154:	71 ac       	ldd	r7, Z+57	; 0x39
    4156:	12 01       	movw	r2, r4
    4158:	23 01       	movw	r4, r6
    415a:	a2 2c       	mov	r10, r2
    415c:	b3 2c       	mov	r11, r3
    415e:	c4 2c       	mov	r12, r4
    4160:	d5 2c       	mov	r13, r5
    4162:	e1 2c       	mov	r14, r1
    4164:	f1 2c       	mov	r15, r1
    4166:	00 e0       	ldi	r16, 0x00	; 0
    4168:	10 e0       	ldi	r17, 0x00	; 0
    416a:	db d5       	rcall	.+2998   	; 0x4d22 <__muldi3>
    416c:	05 e1       	ldi	r16, 0x15	; 21
    416e:	43 d6       	rcall	.+3206   	; 0x4df6 <__ashrdi3>
    4170:	ad 80       	ldd	r10, Y+5	; 0x05
    4172:	be 80       	ldd	r11, Y+6	; 0x06
    4174:	cf 80       	ldd	r12, Y+7	; 0x07
    4176:	d8 84       	ldd	r13, Y+8	; 0x08
    4178:	e9 84       	ldd	r14, Y+9	; 0x09
    417a:	fa 84       	ldd	r15, Y+10	; 0x0a
    417c:	0b 85       	ldd	r16, Y+11	; 0x0b
    417e:	1c 85       	ldd	r17, Y+12	; 0x0c
    4180:	61 d6       	rcall	.+3266   	; 0x4e44 <__subdi3>
    4182:	0f e0       	ldi	r16, 0x0F	; 15
    4184:	38 d6       	rcall	.+3184   	; 0x4df6 <__ashrdi3>
    4186:	20 93 e3 26 	sts	0x26E3, r18	; 0x8026e3 <gAltimeterControl+0x46>
    418a:	30 93 e4 26 	sts	0x26E4, r19	; 0x8026e4 <gAltimeterControl+0x47>
    418e:	40 93 e5 26 	sts	0x26E5, r20	; 0x8026e5 <gAltimeterControl+0x48>
    4192:	50 93 e6 26 	sts	0x26E6, r21	; 0x8026e6 <gAltimeterControl+0x49>

}
    4196:	69 96       	adiw	r28, 0x19	; 25
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	de bf       	out	0x3e, r29	; 62
    419c:	df 91       	pop	r29
    419e:	cf 91       	pop	r28
    41a0:	1f 91       	pop	r17
    41a2:	0f 91       	pop	r16
    41a4:	ff 90       	pop	r15
    41a6:	ef 90       	pop	r14
    41a8:	df 90       	pop	r13
    41aa:	cf 90       	pop	r12
    41ac:	bf 90       	pop	r11
    41ae:	af 90       	pop	r10
    41b0:	9f 90       	pop	r9
    41b2:	8f 90       	pop	r8
    41b4:	7f 90       	pop	r7
    41b6:	6f 90       	pop	r6
    41b8:	5f 90       	pop	r5
    41ba:	4f 90       	pop	r4
    41bc:	3f 90       	pop	r3
    41be:	2f 90       	pop	r2
    41c0:	08 95       	ret

000041c2 <ms5607_02ba03_run>:
 * this objects state to the next value. 
 * Eventually this will return successful and the data will be pulled out of the
 * appropriate global buffers.
 */
 sensor_status_t ms5607_02ba03_run(void)
 {
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    /** 8. Do adc read to get D2 */
    /** 9. Calculate new temperature and pressure */

    sensor_status_t returnStatus = SENSOR_BUSY;

    switch(gAltimeterControl.get_data_state)
    41c6:	80 91 e7 26 	lds	r24, 0x26E7	; 0x8026e7 <gAltimeterControl+0x4a>
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	88 30       	cpi	r24, 0x08	; 8
    41ce:	91 05       	cpc	r25, r1
    41d0:	08 f0       	brcs	.+2      	; 0x41d4 <ms5607_02ba03_run+0x12>
    41d2:	b6 c0       	rjmp	.+364    	; 0x4340 <ms5607_02ba03_run+0x17e>
    41d4:	fc 01       	movw	r30, r24
    41d6:	88 27       	eor	r24, r24
    41d8:	eb 5f       	subi	r30, 0xFB	; 251
    41da:	fe 4f       	sbci	r31, 0xFE	; 254
    41dc:	8f 4f       	sbci	r24, 0xFF	; 255
    {
        case ENQUEUE_D1_CONVERT:
            ms5607_02ba03_d1_convert();
    41de:	8f c5       	rjmp	.+2846   	; 0x4cfe <__tablejump2__>
    41e0:	34 de       	rcall	.-920    	; 0x3e4a <ms5607_02ba03_d1_convert>
            gAltimeterControl.get_data_state = WAIT_D1_CONVERT;
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
            break;        
    41e8:	b8 c0       	rjmp	.+368    	; 0x435a <ms5607_02ba03_run+0x198>
        case WAIT_D1_CONVERT:
            if(true == gAltimeterControl.send_complete)
    41ea:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <gAltimeterControl+0x29>
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	09 f0       	breq	.+2      	; 0x41f4 <ms5607_02ba03_run+0x32>
            {
                /* Record time when we started conversion */
                gAltimeterControl.time_start = get_timer_count();
    41f2:	a8 c0       	rjmp	.+336    	; 0x4344 <ms5607_02ba03_run+0x182>
    41f4:	b9 d1       	rcall	.+882    	; 0x4568 <get_timer_count>
    41f6:	60 93 e8 26 	sts	0x26E8, r22	; 0x8026e8 <gAltimeterControl+0x4b>
    41fa:	70 93 e9 26 	sts	0x26E9, r23	; 0x8026e9 <gAltimeterControl+0x4c>
    41fe:	80 93 ea 26 	sts	0x26EA, r24	; 0x8026ea <gAltimeterControl+0x4d>
    4202:	90 93 eb 26 	sts	0x26EB, r25	; 0x8026eb <gAltimeterControl+0x4e>
                gAltimeterControl.get_data_state = WAIT_8ms_D1;
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
    /** 6. Wait for that to finish */
    /** 7. Wait additional 8.2ms for conversion */
    /** 8. Do adc read to get D2 */
    /** 9. Calculate new temperature and pressure */

    sensor_status_t returnStatus = SENSOR_BUSY;
    420c:	81 e0       	ldi	r24, 0x01	; 1
            }
            break;
        case WAIT_8ms_D1:
            /* wait 8ms */
            /* if 8ms done */
            if(get_timer_count() - gAltimeterControl.time_start > EIGHT_MS)
    420e:	a5 c0       	rjmp	.+330    	; 0x435a <ms5607_02ba03_run+0x198>
    4210:	ab d1       	rcall	.+854    	; 0x4568 <get_timer_count>
    4212:	00 91 e8 26 	lds	r16, 0x26E8	; 0x8026e8 <gAltimeterControl+0x4b>
    4216:	10 91 e9 26 	lds	r17, 0x26E9	; 0x8026e9 <gAltimeterControl+0x4c>
    421a:	20 91 ea 26 	lds	r18, 0x26EA	; 0x8026ea <gAltimeterControl+0x4d>
    421e:	30 91 eb 26 	lds	r19, 0x26EB	; 0x8026eb <gAltimeterControl+0x4e>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	80 1b       	sub	r24, r16
    4228:	91 0b       	sbc	r25, r17
    422a:	a2 0b       	sbc	r26, r18
    422c:	b3 0b       	sbc	r27, r19
    422e:	89 97       	sbiw	r24, 0x29	; 41
    4230:	a1 05       	cpc	r26, r1
    4232:	b1 05       	cpc	r27, r1
    4234:	08 f4       	brcc	.+2      	; 0x4238 <ms5607_02ba03_run+0x76>
            {
                ms5607_02ba03_read_data();
    4236:	88 c0       	rjmp	.+272    	; 0x4348 <ms5607_02ba03_run+0x186>
    4238:	5e de       	rcall	.-836    	; 0x3ef6 <ms5607_02ba03_read_data>
                gAltimeterControl.get_data_state = WAIT_D1_READ;
    423a:	83 e0       	ldi	r24, 0x03	; 3
    423c:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
                returnStatus = SENSOR_WAITING;
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	8b c0       	rjmp	.+278    	; 0x435a <ms5607_02ba03_run+0x198>
            }
            break;
        case WAIT_D1_READ:
            if(true == gAltimeterControl.send_complete)
    4244:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <gAltimeterControl+0x29>
    4248:	81 30       	cpi	r24, 0x01	; 1
    424a:	09 f0       	breq	.+2      	; 0x424e <ms5607_02ba03_run+0x8c>
    424c:	7f c0       	rjmp	.+254    	; 0x434c <ms5607_02ba03_run+0x18a>
 *
 * This is what is called to actually pull the data out of the buffer the data is pushed to
 */
 static inline uint32_t get_data_from_buffer24(volatile uint8_t *buff)
 {
    return (uint32_t)(((uint32_t)buff[1] << 16) | ((uint32_t)buff[2] << 8) | (uint32_t)buff[3]);
    424e:	ed e9       	ldi	r30, 0x9D	; 157
    4250:	f6 e2       	ldi	r31, 0x26	; 38
    4252:	80 8d       	ldd	r24, Z+24	; 0x18
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	a0 e0       	ldi	r26, 0x00	; 0
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	bc 01       	movw	r22, r24
    425c:	55 27       	eor	r21, r21
    425e:	44 27       	eor	r20, r20
    4260:	91 8d       	ldd	r25, Z+25	; 0x19
    4262:	89 2f       	mov	r24, r25
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	a0 e0       	ldi	r26, 0x00	; 0
    4268:	b0 e0       	ldi	r27, 0x00	; 0
    426a:	ba 2f       	mov	r27, r26
    426c:	a9 2f       	mov	r26, r25
    426e:	98 2f       	mov	r25, r24
    4270:	88 27       	eor	r24, r24
    4272:	84 2b       	or	r24, r20
    4274:	95 2b       	or	r25, r21
    4276:	a6 2b       	or	r26, r22
    4278:	b7 2b       	or	r27, r23
    427a:	22 8d       	ldd	r18, Z+26	; 0x1a
    427c:	82 2b       	or	r24, r18
            }
            break;
        case WAIT_D1_READ:
            if(true == gAltimeterControl.send_complete)
            {
                gAltimeterControl.raw_vals.dig_press = get_data_from_buffer24(gAltimeterControl.spi_recv_buffer);
    427e:	86 ab       	std	Z+54, r24	; 0x36
    4280:	97 ab       	std	Z+55, r25	; 0x37
    4282:	a0 af       	std	Z+56, r26	; 0x38
                gAltimeterControl.get_data_state = ENQUEUE_D2_CONVERT;
    4284:	b1 af       	std	Z+57, r27	; 0x39
    4286:	84 e0       	ldi	r24, 0x04	; 4
    /** 6. Wait for that to finish */
    /** 7. Wait additional 8.2ms for conversion */
    /** 8. Do adc read to get D2 */
    /** 9. Calculate new temperature and pressure */

    sensor_status_t returnStatus = SENSOR_BUSY;
    4288:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
                gAltimeterControl.raw_vals.dig_press = get_data_from_buffer24(gAltimeterControl.spi_recv_buffer);
                gAltimeterControl.get_data_state = ENQUEUE_D2_CONVERT;
            }
            break;
        case ENQUEUE_D2_CONVERT:
            ms5607_02ba03_d2_convert();
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	65 c0       	rjmp	.+202    	; 0x435a <ms5607_02ba03_run+0x198>
            gAltimeterControl.get_data_state = WAIT_D2_CONVERT;
    4290:	07 de       	rcall	.-1010   	; 0x3ea0 <ms5607_02ba03_d2_convert>
    4292:	85 e0       	ldi	r24, 0x05	; 5
    4294:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
            break;
        case WAIT_D2_CONVERT:
            if(true == gAltimeterControl.send_complete)
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	5f c0       	rjmp	.+190    	; 0x435a <ms5607_02ba03_run+0x198>
    429c:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <gAltimeterControl+0x29>
            {
                /* Record time when we started conversion */
                gAltimeterControl.time_start = get_timer_count();
    42a0:	81 30       	cpi	r24, 0x01	; 1
    42a2:	09 f0       	breq	.+2      	; 0x42a6 <ms5607_02ba03_run+0xe4>
    42a4:	55 c0       	rjmp	.+170    	; 0x4350 <ms5607_02ba03_run+0x18e>
    42a6:	60 d1       	rcall	.+704    	; 0x4568 <get_timer_count>
    42a8:	60 93 e8 26 	sts	0x26E8, r22	; 0x8026e8 <gAltimeterControl+0x4b>
    42ac:	70 93 e9 26 	sts	0x26E9, r23	; 0x8026e9 <gAltimeterControl+0x4c>
    42b0:	80 93 ea 26 	sts	0x26EA, r24	; 0x8026ea <gAltimeterControl+0x4d>
                gAltimeterControl.get_data_state = WAIT_8ms_D2;
    42b4:	90 93 eb 26 	sts	0x26EB, r25	; 0x8026eb <gAltimeterControl+0x4e>
    /** 6. Wait for that to finish */
    /** 7. Wait additional 8.2ms for conversion */
    /** 8. Do adc read to get D2 */
    /** 9. Calculate new temperature and pressure */

    sensor_status_t returnStatus = SENSOR_BUSY;
    42b8:	86 e0       	ldi	r24, 0x06	; 6
    42ba:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
            }
            break;
        case WAIT_8ms_D2:
            /* wait 8ms */
            /* if 8ms done */
            if(get_timer_count() - gAltimeterControl.time_start > EIGHT_MS)
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	4c c0       	rjmp	.+152    	; 0x435a <ms5607_02ba03_run+0x198>
    42c2:	52 d1       	rcall	.+676    	; 0x4568 <get_timer_count>
    42c4:	00 91 e8 26 	lds	r16, 0x26E8	; 0x8026e8 <gAltimeterControl+0x4b>
    42c8:	10 91 e9 26 	lds	r17, 0x26E9	; 0x8026e9 <gAltimeterControl+0x4c>
    42cc:	20 91 ea 26 	lds	r18, 0x26EA	; 0x8026ea <gAltimeterControl+0x4d>
    42d0:	30 91 eb 26 	lds	r19, 0x26EB	; 0x8026eb <gAltimeterControl+0x4e>
    42d4:	dc 01       	movw	r26, r24
    42d6:	cb 01       	movw	r24, r22
    42d8:	80 1b       	sub	r24, r16
    42da:	91 0b       	sbc	r25, r17
    42dc:	a2 0b       	sbc	r26, r18
    42de:	b3 0b       	sbc	r27, r19
    42e0:	89 97       	sbiw	r24, 0x29	; 41
            {
                ms5607_02ba03_read_data();
    42e2:	a1 05       	cpc	r26, r1
    42e4:	b1 05       	cpc	r27, r1
                gAltimeterControl.get_data_state = WAIT_D2_READ;
    42e6:	b0 f1       	brcs	.+108    	; 0x4354 <ms5607_02ba03_run+0x192>
    42e8:	06 de       	rcall	.-1012   	; 0x3ef6 <ms5607_02ba03_read_data>
    42ea:	87 e0       	ldi	r24, 0x07	; 7
                returnStatus = SENSOR_WAITING;
    42ec:	80 93 e7 26 	sts	0x26E7, r24	; 0x8026e7 <gAltimeterControl+0x4a>
            }
            break;
        case WAIT_D2_READ:
            if(true == gAltimeterControl.send_complete)
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	33 c0       	rjmp	.+102    	; 0x435a <ms5607_02ba03_run+0x198>
    42f4:	80 91 c6 26 	lds	r24, 0x26C6	; 0x8026c6 <gAltimeterControl+0x29>
 *
 * This is what is called to actually pull the data out of the buffer the data is pushed to
 */
 static inline uint32_t get_data_from_buffer24(volatile uint8_t *buff)
 {
    return (uint32_t)(((uint32_t)buff[1] << 16) | ((uint32_t)buff[2] << 8) | (uint32_t)buff[3]);
    42f8:	81 30       	cpi	r24, 0x01	; 1
    42fa:	71 f5       	brne	.+92     	; 0x4358 <ms5607_02ba03_run+0x196>
    42fc:	ed e9       	ldi	r30, 0x9D	; 157
    42fe:	f6 e2       	ldi	r31, 0x26	; 38
    4300:	80 8d       	ldd	r24, Z+24	; 0x18
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	a0 e0       	ldi	r26, 0x00	; 0
    4306:	b0 e0       	ldi	r27, 0x00	; 0
    4308:	bc 01       	movw	r22, r24
    430a:	55 27       	eor	r21, r21
    430c:	44 27       	eor	r20, r20
    430e:	91 8d       	ldd	r25, Z+25	; 0x19
    4310:	89 2f       	mov	r24, r25
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	a0 e0       	ldi	r26, 0x00	; 0
    4316:	b0 e0       	ldi	r27, 0x00	; 0
    4318:	ba 2f       	mov	r27, r26
    431a:	a9 2f       	mov	r26, r25
    431c:	98 2f       	mov	r25, r24
    431e:	88 27       	eor	r24, r24
    4320:	84 2b       	or	r24, r20
    4322:	95 2b       	or	r25, r21
            }
            break;
        case WAIT_D2_READ:
            if(true == gAltimeterControl.send_complete)
            {
                gAltimeterControl.raw_vals.dig_temp = get_data_from_buffer24(gAltimeterControl.spi_recv_buffer);
    4324:	a6 2b       	or	r26, r22
    4326:	b7 2b       	or	r27, r23
    4328:	22 8d       	ldd	r18, Z+26	; 0x1a
    432a:	82 2b       	or	r24, r18
                /* Do math */
                ms5607_02ba03_calculate_temp();
    432c:	82 af       	std	Z+58, r24	; 0x3a
    432e:	93 af       	std	Z+59, r25	; 0x3b
                ms5607_02ba03_calculate_press();
    4330:	a4 af       	std	Z+60, r26	; 0x3c
    4332:	b5 af       	std	Z+61, r27	; 0x3d
                gAltimeterControl.get_data_state = ENQUEUE_D1_CONVERT;
    4334:	0c de       	rcall	.-1000   	; 0x3f4e <ms5607_02ba03_calculate_temp>
    4336:	42 de       	rcall	.-892    	; 0x3fbc <ms5607_02ba03_calculate_press>
                returnStatus = SENSOR_COMPLETE;
    4338:	10 92 e7 26 	sts	0x26E7, r1	; 0x8026e7 <gAltimeterControl+0x4a>
    /** 6. Wait for that to finish */
    /** 7. Wait additional 8.2ms for conversion */
    /** 8. Do adc read to get D2 */
    /** 9. Calculate new temperature and pressure */

    sensor_status_t returnStatus = SENSOR_BUSY;
    433c:	82 e0       	ldi	r24, 0x02	; 2
    433e:	0d c0       	rjmp	.+26     	; 0x435a <ms5607_02ba03_run+0x198>
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	0b c0       	rjmp	.+22     	; 0x435a <ms5607_02ba03_run+0x198>
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	09 c0       	rjmp	.+18     	; 0x435a <ms5607_02ba03_run+0x198>
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	07 c0       	rjmp	.+14     	; 0x435a <ms5607_02ba03_run+0x198>
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	05 c0       	rjmp	.+10     	; 0x435a <ms5607_02ba03_run+0x198>
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	03 c0       	rjmp	.+6      	; 0x435a <ms5607_02ba03_run+0x198>
    4354:	81 e0       	ldi	r24, 0x01	; 1
                returnStatus = SENSOR_COMPLETE;
            }
            break;
    }
    return returnStatus;
 }
    4356:	01 c0       	rjmp	.+2      	; 0x435a <ms5607_02ba03_run+0x198>
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	1f 91       	pop	r17
    435c:	0f 91       	pop	r16
    435e:	08 95       	ret

00004360 <ms5607_02ba03_get_data>:
 *
 * @param[out] out_data The caller's struct that data will be copied into
 */
void ms5607_02ba03_get_data(ms5607_02ba03_data_t *out_data)
{
    out_data->temp = gAltimeterControl.final_vals.temp;
    4360:	40 91 df 26 	lds	r20, 0x26DF	; 0x8026df <gAltimeterControl+0x42>
    4364:	50 91 e0 26 	lds	r21, 0x26E0	; 0x8026e0 <gAltimeterControl+0x43>
    4368:	60 91 e1 26 	lds	r22, 0x26E1	; 0x8026e1 <gAltimeterControl+0x44>
    436c:	70 91 e2 26 	lds	r23, 0x26E2	; 0x8026e2 <gAltimeterControl+0x45>
    4370:	fc 01       	movw	r30, r24
    4372:	40 83       	st	Z, r20
    4374:	51 83       	std	Z+1, r21	; 0x01
    4376:	62 83       	std	Z+2, r22	; 0x02
    4378:	73 83       	std	Z+3, r23	; 0x03
    out_data->pressure = gAltimeterControl.final_vals.pressure;
    437a:	40 91 e3 26 	lds	r20, 0x26E3	; 0x8026e3 <gAltimeterControl+0x46>
    437e:	50 91 e4 26 	lds	r21, 0x26E4	; 0x8026e4 <gAltimeterControl+0x47>
    4382:	60 91 e5 26 	lds	r22, 0x26E5	; 0x8026e5 <gAltimeterControl+0x48>
    4386:	70 91 e6 26 	lds	r23, 0x26E6	; 0x8026e6 <gAltimeterControl+0x49>
    438a:	44 83       	std	Z+4, r20	; 0x04
    438c:	55 83       	std	Z+5, r21	; 0x05
    438e:	66 83       	std	Z+6, r22	; 0x06
    4390:	77 83       	std	Z+7, r23	; 0x07
    4392:	08 95       	ret

00004394 <__vector_28>:
    extflash_initialize_regs();
}

/** Interrupt service routine for the USART interrupt. */
ISR(FLASH_SPI_INT)
{
    4394:	1f 92       	push	r1
    4396:	0f 92       	push	r0
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	0f 92       	push	r0
    439c:	11 24       	eor	r1, r1
    439e:	0b b6       	in	r0, 0x3b	; 59
    43a0:	0f 92       	push	r0
    43a2:	2f 93       	push	r18
    43a4:	3f 93       	push	r19
    43a6:	4f 93       	push	r20
    43a8:	5f 93       	push	r21
    43aa:	6f 93       	push	r22
    43ac:	7f 93       	push	r23
    43ae:	8f 93       	push	r24
    43b0:	9f 93       	push	r25
    43b2:	af 93       	push	r26
    43b4:	bf 93       	push	r27
    43b6:	ef 93       	push	r30
    43b8:	ff 93       	push	r31
    spi_master_ISR(&extflashSpiMaster);
    43ba:	8e ef       	ldi	r24, 0xFE	; 254
    43bc:	98 e2       	ldi	r25, 0x28	; 40
    43be:	86 d3       	rcall	.+1804   	; 0x4acc <spi_master_ISR>
}
    43c0:	ff 91       	pop	r31
    43c2:	ef 91       	pop	r30
    43c4:	bf 91       	pop	r27
    43c6:	af 91       	pop	r26
    43c8:	9f 91       	pop	r25
    43ca:	8f 91       	pop	r24
    43cc:	7f 91       	pop	r23
    43ce:	6f 91       	pop	r22
    43d0:	5f 91       	pop	r21
    43d2:	4f 91       	pop	r20
    43d4:	3f 91       	pop	r19
    43d6:	2f 91       	pop	r18
    43d8:	0f 90       	pop	r0
    43da:	0b be       	out	0x3b, r0	; 59
    43dc:	0f 90       	pop	r0
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	0f 90       	pop	r0
    43e2:	1f 90       	pop	r1
    43e4:	18 95       	reti

000043e6 <init_scheduler>:
/**
    @brief Intialize the scheduler.

    Sets up the scheduler's global data.
*/
void init_scheduler(void){
    43e6:	8d d0       	rcall	.+282    	; 0x4502 <get_task_list>
    43e8:	80 93 7f 25 	sts	0x257F, r24	; 0x80257f <taskArry>
    43ec:	90 93 80 25 	sts	0x2580, r25	; 0x802580 <taskArry+0x1>
    43f0:	8b d0       	rcall	.+278    	; 0x4508 <get_num_tasks>
    43f2:	80 93 7e 25 	sts	0x257E, r24	; 0x80257e <numTasks>
    43f6:	08 95       	ret

000043f8 <run_scheduler>:
    43f8:	b7 d0       	rcall	.+366    	; 0x4568 <get_timer_count>
    43fa:	60 93 7a 25 	sts	0x257A, r22	; 0x80257a <timeCount.6860>
    43fe:	70 93 7b 25 	sts	0x257B, r23	; 0x80257b <timeCount.6860+0x1>
    4402:	80 93 7c 25 	sts	0x257C, r24	; 0x80257c <timeCount.6860+0x2>
    4406:	90 93 7d 25 	sts	0x257D, r25	; 0x80257d <timeCount.6860+0x3>
    440a:	40 91 7a 25 	lds	r20, 0x257A	; 0x80257a <timeCount.6860>
    440e:	50 91 7b 25 	lds	r21, 0x257B	; 0x80257b <timeCount.6860+0x1>
    4412:	60 91 7c 25 	lds	r22, 0x257C	; 0x80257c <timeCount.6860+0x2>
    4416:	70 91 7d 25 	lds	r23, 0x257D	; 0x80257d <timeCount.6860+0x3>
    441a:	80 91 76 25 	lds	r24, 0x2576	; 0x802576 <prevTimeCount.6861>
    441e:	90 91 77 25 	lds	r25, 0x2577	; 0x802577 <prevTimeCount.6861+0x1>
    4422:	a0 91 78 25 	lds	r26, 0x2578	; 0x802578 <prevTimeCount.6861+0x2>
    4426:	b0 91 79 25 	lds	r27, 0x2579	; 0x802579 <prevTimeCount.6861+0x3>
    442a:	48 17       	cp	r20, r24
    442c:	59 07       	cpc	r21, r25
    442e:	6a 07       	cpc	r22, r26
    4430:	7b 07       	cpc	r23, r27
    4432:	11 f3       	breq	.-60     	; 0x43f8 <run_scheduler>
    4434:	80 91 7a 25 	lds	r24, 0x257A	; 0x80257a <timeCount.6860>
    4438:	90 91 7b 25 	lds	r25, 0x257B	; 0x80257b <timeCount.6860+0x1>
    443c:	a0 91 7c 25 	lds	r26, 0x257C	; 0x80257c <timeCount.6860+0x2>
    4440:	b0 91 7d 25 	lds	r27, 0x257D	; 0x80257d <timeCount.6860+0x3>
    4444:	80 93 76 25 	sts	0x2576, r24	; 0x802576 <prevTimeCount.6861>
    4448:	90 93 77 25 	sts	0x2577, r25	; 0x802577 <prevTimeCount.6861+0x1>
    444c:	a0 93 78 25 	sts	0x2578, r26	; 0x802578 <prevTimeCount.6861+0x2>
    4450:	b0 93 79 25 	sts	0x2579, r27	; 0x802579 <prevTimeCount.6861+0x3>
    4454:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <i.6859>
    4458:	4c c0       	rjmp	.+152    	; 0x44f2 <run_scheduler+0xfa>
    445a:	f0 e0       	ldi	r31, 0x00	; 0
    445c:	ee 0f       	add	r30, r30
    445e:	ff 1f       	adc	r31, r31
    4460:	ee 0f       	add	r30, r30
    4462:	ff 1f       	adc	r31, r31
    4464:	ee 0f       	add	r30, r30
    4466:	ff 1f       	adc	r31, r31
    4468:	80 91 7f 25 	lds	r24, 0x257F	; 0x80257f <taskArry>
    446c:	90 91 80 25 	lds	r25, 0x2580	; 0x802580 <taskArry+0x1>
    4470:	e8 0f       	add	r30, r24
    4472:	f9 1f       	adc	r31, r25
    4474:	80 81       	ld	r24, Z
    4476:	91 81       	ldd	r25, Z+1	; 0x01
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	b9 f0       	breq	.+46     	; 0x44aa <run_scheduler+0xb2>
    447c:	40 91 7a 25 	lds	r20, 0x257A	; 0x80257a <timeCount.6860>
    4480:	50 91 7b 25 	lds	r21, 0x257B	; 0x80257b <timeCount.6860+0x1>
    4484:	60 91 7c 25 	lds	r22, 0x257C	; 0x80257c <timeCount.6860+0x2>
    4488:	70 91 7d 25 	lds	r23, 0x257D	; 0x80257d <timeCount.6860+0x3>
    448c:	02 81       	ldd	r16, Z+2	; 0x02
    448e:	13 81       	ldd	r17, Z+3	; 0x03
    4490:	24 81       	ldd	r18, Z+4	; 0x04
    4492:	35 81       	ldd	r19, Z+5	; 0x05
    4494:	40 1b       	sub	r20, r16
    4496:	51 0b       	sbc	r21, r17
    4498:	62 0b       	sbc	r22, r18
    449a:	73 0b       	sbc	r23, r19
    449c:	a0 e0       	ldi	r26, 0x00	; 0
    449e:	b0 e0       	ldi	r27, 0x00	; 0
    44a0:	48 17       	cp	r20, r24
    44a2:	59 07       	cpc	r21, r25
    44a4:	6a 07       	cpc	r22, r26
    44a6:	7b 07       	cpc	r23, r27
    44a8:	f8 f0       	brcs	.+62     	; 0x44e8 <run_scheduler+0xf0>
    44aa:	06 80       	ldd	r0, Z+6	; 0x06
    44ac:	f7 81       	ldd	r31, Z+7	; 0x07
    44ae:	e0 2d       	mov	r30, r0
    44b0:	19 95       	eicall
    44b2:	e0 91 75 25 	lds	r30, 0x2575	; 0x802575 <i.6859>
    44b6:	f0 e0       	ldi	r31, 0x00	; 0
    44b8:	ee 0f       	add	r30, r30
    44ba:	ff 1f       	adc	r31, r31
    44bc:	ee 0f       	add	r30, r30
    44be:	ff 1f       	adc	r31, r31
    44c0:	ee 0f       	add	r30, r30
    44c2:	ff 1f       	adc	r31, r31
    44c4:	80 91 7f 25 	lds	r24, 0x257F	; 0x80257f <taskArry>
    44c8:	90 91 80 25 	lds	r25, 0x2580	; 0x802580 <taskArry+0x1>
    44cc:	e8 0f       	add	r30, r24
    44ce:	f9 1f       	adc	r31, r25
    44d0:	80 91 7a 25 	lds	r24, 0x257A	; 0x80257a <timeCount.6860>
    44d4:	90 91 7b 25 	lds	r25, 0x257B	; 0x80257b <timeCount.6860+0x1>
    44d8:	a0 91 7c 25 	lds	r26, 0x257C	; 0x80257c <timeCount.6860+0x2>
    44dc:	b0 91 7d 25 	lds	r27, 0x257D	; 0x80257d <timeCount.6860+0x3>
    44e0:	82 83       	std	Z+2, r24	; 0x02
    44e2:	93 83       	std	Z+3, r25	; 0x03
    44e4:	a4 83       	std	Z+4, r26	; 0x04
    44e6:	b5 83       	std	Z+5, r27	; 0x05
    44e8:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <i.6859>
    44ec:	8f 5f       	subi	r24, 0xFF	; 255
    44ee:	80 93 75 25 	sts	0x2575, r24	; 0x802575 <i.6859>
    44f2:	e0 91 75 25 	lds	r30, 0x2575	; 0x802575 <i.6859>
    44f6:	80 91 7e 25 	lds	r24, 0x257E	; 0x80257e <numTasks>
    44fa:	e8 17       	cp	r30, r24
    44fc:	08 f4       	brcc	.+2      	; 0x4500 <run_scheduler+0x108>
    44fe:	ad cf       	rjmp	.-166    	; 0x445a <run_scheduler+0x62>
    4500:	7b cf       	rjmp	.-266    	; 0x43f8 <run_scheduler>

00004502 <get_task_list>:
};

/** Inline function that returns a pointer to the task list */
inline simple_task_t *get_task_list(void){
    return TaskList;
}
    4502:	82 ec       	ldi	r24, 0xC2	; 194
    4504:	90 e2       	ldi	r25, 0x20	; 32
    4506:	08 95       	ret

00004508 <get_num_tasks>:

/** Inline function that returns the number of tasks in the list */
inline uint8_t get_num_tasks(void){
    return sizeof(TaskList)/sizeof(simple_task_t);
}
    4508:	82 e0       	ldi	r24, 0x02	; 2
    450a:	08 95       	ret

0000450c <timer0_callback>:
    @brief Callback for the TCC0 interrupt

    Increments ::timerCount every time TCC0 overflows
*/
void timer0_callback(void){
    timerCount++;
    450c:	80 91 81 25 	lds	r24, 0x2581	; 0x802581 <timerCount>
    4510:	90 91 82 25 	lds	r25, 0x2582	; 0x802582 <timerCount+0x1>
    4514:	a0 91 83 25 	lds	r26, 0x2583	; 0x802583 <timerCount+0x2>
    4518:	b0 91 84 25 	lds	r27, 0x2584	; 0x802584 <timerCount+0x3>
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	a1 1d       	adc	r26, r1
    4520:	b1 1d       	adc	r27, r1
    4522:	80 93 81 25 	sts	0x2581, r24	; 0x802581 <timerCount>
    4526:	90 93 82 25 	sts	0x2582, r25	; 0x802582 <timerCount+0x1>
    452a:	a0 93 83 25 	sts	0x2583, r26	; 0x802583 <timerCount+0x2>
    452e:	b0 93 84 25 	sts	0x2584, r27	; 0x802584 <timerCount+0x3>
    4532:	08 95       	ret

00004534 <timer_init>:
    /** Enable Timer Counter Compare 0, register timer0_callback with the ASF
     *  interrupt, set the timer to standard mode, and the overflow period to
     *  6400 counts. At 32MHz, that gives us a period of 200us. 
     *  Finally, set the interrupt level to Low.
    */
    tc_enable(&TCC0);
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	98 e0       	ldi	r25, 0x08	; 8
    4538:	0e 94 05 13 	call	0x260a	; 0x260a <tc_enable>
    tc_set_overflow_interrupt_callback(&TCC0, timer0_callback);
    453c:	66 e8       	ldi	r22, 0x86	; 134
    453e:	72 e2       	ldi	r23, 0x22	; 34
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	98 e0       	ldi	r25, 0x08	; 8
    4544:	0e 94 84 13 	call	0x2708	; 0x2708 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    4548:	e0 e0       	ldi	r30, 0x00	; 0
    454a:	f8 e0       	ldi	r31, 0x08	; 8
    454c:	81 81       	ldd	r24, Z+1	; 0x01
    454e:	88 7f       	andi	r24, 0xF8	; 248
    4550:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	99 e1       	ldi	r25, 0x19	; 25
    4556:	86 a3       	std	Z+38, r24	; 0x26
    4558:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    455a:	86 81       	ldd	r24, Z+6	; 0x06
    455c:	8c 7f       	andi	r24, 0xFC	; 252
    455e:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    4560:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    4562:	81 60       	ori	r24, 0x01	; 1
    4564:	86 83       	std	Z+6, r24	; 0x06
    4566:	08 95       	ret

00004568 <get_timer_count>:

/**
    @brief Provides interrupt-safe access to the current time count.
    @return The current time count
*/
inline uint32_t get_timer_count(void){
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	1f 92       	push	r1
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4572:	8f b7       	in	r24, 0x3f	; 63
    4574:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4576:	f8 94       	cli
	return flags;
    4578:	29 81       	ldd	r18, Y+1	; 0x01
    /** Save the current IRQ status and disable interrupts. Then, save our timer
     * variable locally, and re-enable interrupts before returning the current time.
    */
    irqflags_t flags = cpu_irq_save();
    uint32_t timerVal = timerCount;
    457a:	60 91 81 25 	lds	r22, 0x2581	; 0x802581 <timerCount>
    457e:	70 91 82 25 	lds	r23, 0x2582	; 0x802582 <timerCount+0x1>
    4582:	80 91 83 25 	lds	r24, 0x2583	; 0x802583 <timerCount+0x2>
    4586:	90 91 84 25 	lds	r25, 0x2584	; 0x802584 <timerCount+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    458a:	2f bf       	out	0x3f, r18	; 63
    cpu_irq_restore(flags);
    return timerVal;
}
    458c:	0f 90       	pop	r0
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	08 95       	ret

00004594 <timer_delay_ms>:
/**
    @brief Sleep for \a millis \a milliseconds
    @param millis The number of milliseconds to wait.
*/
void timer_delay_ms(uint8_t millis)
{
    4594:	cf 92       	push	r12
    4596:	df 92       	push	r13
    4598:	ef 92       	push	r14
    459a:	ff 92       	push	r15
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17
    45a0:	cf 93       	push	r28
    45a2:	df 93       	push	r29
    45a4:	1f 92       	push	r1
    45a6:	1f 92       	push	r1
    45a8:	cd b7       	in	r28, 0x3d	; 61
    45aa:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    45ac:	9f b7       	in	r25, 0x3f	; 63
    45ae:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    45b0:	f8 94       	cli
	return flags;
    45b2:	9a 81       	ldd	r25, Y+2	; 0x02
inline uint32_t get_timer_count(void){
    /** Save the current IRQ status and disable interrupts. Then, save our timer
     * variable locally, and re-enable interrupts before returning the current time.
    */
    irqflags_t flags = cpu_irq_save();
    uint32_t timerVal = timerCount;
    45b4:	c0 90 81 25 	lds	r12, 0x2581	; 0x802581 <timerCount>
    45b8:	d0 90 82 25 	lds	r13, 0x2582	; 0x802582 <timerCount+0x1>
    45bc:	e0 90 83 25 	lds	r14, 0x2583	; 0x802583 <timerCount+0x2>
    45c0:	f0 90 84 25 	lds	r15, 0x2584	; 0x802584 <timerCount+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45c4:	9f bf       	out	0x3f, r25	; 63
    /** Get the start time and calculate the duration in counts.
     *  Then, twiddle thumbs until \a millis \a milliseconds have
     *  expired.
     */
    uint32_t timer_begin = get_timer_count();
    uint32_t wait_len = TICKS_PER_MS*millis;
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	8c 01       	movw	r16, r24
    45ca:	00 0f       	add	r16, r16
    45cc:	11 1f       	adc	r17, r17
    45ce:	00 0f       	add	r16, r16
    45d0:	11 1f       	adc	r17, r17
    45d2:	08 0f       	add	r16, r24
    45d4:	19 1f       	adc	r17, r25
    45d6:	01 2e       	mov	r0, r17
    45d8:	00 0c       	add	r0, r0
    45da:	22 0b       	sbc	r18, r18
    45dc:	33 0b       	sbc	r19, r19

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    45de:	9f b7       	in	r25, 0x3f	; 63
    45e0:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    45e2:	f8 94       	cli
	return flags;
    45e4:	99 81       	ldd	r25, Y+1	; 0x01
inline uint32_t get_timer_count(void){
    /** Save the current IRQ status and disable interrupts. Then, save our timer
     * variable locally, and re-enable interrupts before returning the current time.
    */
    irqflags_t flags = cpu_irq_save();
    uint32_t timerVal = timerCount;
    45e6:	40 91 81 25 	lds	r20, 0x2581	; 0x802581 <timerCount>
    45ea:	50 91 82 25 	lds	r21, 0x2582	; 0x802582 <timerCount+0x1>
    45ee:	60 91 83 25 	lds	r22, 0x2583	; 0x802583 <timerCount+0x2>
    45f2:	70 91 84 25 	lds	r23, 0x2584	; 0x802584 <timerCount+0x3>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    45f6:	9f bf       	out	0x3f, r25	; 63
     *  Then, twiddle thumbs until \a millis \a milliseconds have
     *  expired.
     */
    uint32_t timer_begin = get_timer_count();
    uint32_t wait_len = TICKS_PER_MS*millis;
    while((get_timer_count() - timer_begin) < wait_len)
    45f8:	4c 19       	sub	r20, r12
    45fa:	5d 09       	sbc	r21, r13
    45fc:	6e 09       	sbc	r22, r14
    45fe:	7f 09       	sbc	r23, r15
    4600:	40 17       	cp	r20, r16
    4602:	51 07       	cpc	r21, r17
    4604:	62 07       	cpc	r22, r18
    4606:	73 07       	cpc	r23, r19
    4608:	50 f3       	brcs	.-44     	; 0x45de <timer_delay_ms+0x4a>
    {
        /* Do nothing */
    }
}
    460a:	0f 90       	pop	r0
    460c:	0f 90       	pop	r0
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	1f 91       	pop	r17
    4614:	0f 91       	pop	r16
    4616:	ff 90       	pop	r15
    4618:	ef 90       	pop	r14
    461a:	df 90       	pop	r13
    461c:	cf 90       	pop	r12
    461e:	08 95       	ret

00004620 <main>:
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    4620:	87 e0       	ldi	r24, 0x07	; 7
    4622:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 *
*/
__attribute__((OS_main)) int main(void)
{
    pmic_init(); /** Enable the Programmable Multiple Interrupt Controller */
    sysclk_init(); /** Enable the system clock (32MHz). See conf_clock.h */
    4626:	0e 94 e6 03 	call	0x7cc	; 0x7cc <sysclk_init>

    /** Enable global interrupts and enable timer */
    cpu_irq_enable();
    timer_init(); /** Initialize timer. DO NO REMOVE*/
    462a:	78 94       	sei
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    462c:	83 df       	rcall	.-250    	; 0x4534 <timer_init>
    462e:	e0 e0       	ldi	r30, 0x00	; 0
    4630:	f8 e0       	ldi	r31, 0x08	; 8
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    4632:	80 81       	ld	r24, Z
    4634:	80 7f       	andi	r24, 0xF0	; 240
    4636:	81 60       	ori	r24, 0x01	; 1

    board_init(); /** Do board initialization steps. */
                  /** Function defined in src/ASF/common/boards/user_board/init.c */

    /** Initalize, then start the task scheduler */
    init_scheduler();
    4638:	80 83       	st	Z, r24
    run_scheduler();
    463a:	0e 94 1a 03 	call	0x634	; 0x634 <board_init>
    463e:	d3 de       	rcall	.-602    	; 0x43e6 <init_scheduler>
    4640:	db de       	rcall	.-586    	; 0x43f8 <run_scheduler>

00004642 <background_task_func>:
 */
void background_task_func(void){
    /* Run everybody's background stuff here,
     * This includes polling, calculations, etc */
    static uint8_t funcArryIdx = 0;
    for(funcArryIdx = 0; funcArryIdx < numBackgroundFunc; funcArryIdx++)
    4642:	10 92 85 25 	sts	0x2585, r1	; 0x802585 <funcArryIdx.4563>
    4646:	10 c0       	rjmp	.+32     	; 0x4668 <background_task_func+0x26>
    {
        if(backgroundFuncArry[funcArryIdx] == NULL)
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	ee 0f       	add	r30, r30
    464c:	ff 1f       	adc	r31, r31
    464e:	e9 57       	subi	r30, 0x79	; 121
    4650:	fa 4d       	sbci	r31, 0xDA	; 218
    4652:	01 90       	ld	r0, Z+
    4654:	f0 81       	ld	r31, Z
    4656:	e0 2d       	mov	r30, r0
    4658:	30 97       	sbiw	r30, 0x00	; 0
    465a:	09 f0       	breq	.+2      	; 0x465e <background_task_func+0x1c>
            continue;
        }
        else
        {
            /* Call background functions that have been registered */
            backgroundFuncArry[funcArryIdx]();
    465c:	19 95       	eicall
 */
void background_task_func(void){
    /* Run everybody's background stuff here,
     * This includes polling, calculations, etc */
    static uint8_t funcArryIdx = 0;
    for(funcArryIdx = 0; funcArryIdx < numBackgroundFunc; funcArryIdx++)
    465e:	80 91 85 25 	lds	r24, 0x2585	; 0x802585 <funcArryIdx.4563>
    4662:	8f 5f       	subi	r24, 0xFF	; 255
    4664:	80 93 85 25 	sts	0x2585, r24	; 0x802585 <funcArryIdx.4563>
    4668:	e0 91 85 25 	lds	r30, 0x2585	; 0x802585 <funcArryIdx.4563>
    466c:	80 91 86 25 	lds	r24, 0x2586	; 0x802586 <numBackgroundFunc>
    4670:	e8 17       	cp	r30, r24
    4672:	50 f3       	brcs	.-44     	; 0x4648 <background_task_func+0x6>
        {
            /* Call background functions that have been registered */
            backgroundFuncArry[funcArryIdx]();
        }
    }
}
    4674:	08 95       	ret

00004676 <add_background_function>:
 * Communicate with your background function via global variables,
 * i.e. a mailbox: A structure with a "doOperation" flag, a "operationDone" flag
 * and possibly some information for the background function to use.
 * background functions should be registered inside some init function.
 */
uint8_t add_background_function(background_func_t function){
    4676:	9c 01       	movw	r18, r24
    uint8_t retVal = BKGND_FUNC_SUCCESS;
    
    if(numBackgroundFunc < MAX_BACKGROUND_FUNCS)
    4678:	90 91 86 25 	lds	r25, 0x2586	; 0x802586 <numBackgroundFunc>
    467c:	94 31       	cpi	r25, 0x14	; 20
    467e:	80 f4       	brcc	.+32     	; 0x46a0 <add_background_function+0x2a>
    {
        backgroundFuncArry[numBackgroundFunc] = function;
    4680:	e0 91 86 25 	lds	r30, 0x2586	; 0x802586 <numBackgroundFunc>
    4684:	f0 e0       	ldi	r31, 0x00	; 0
    4686:	ee 0f       	add	r30, r30
    4688:	ff 1f       	adc	r31, r31
    468a:	e9 57       	subi	r30, 0x79	; 121
    468c:	fa 4d       	sbci	r31, 0xDA	; 218
    468e:	20 83       	st	Z, r18
    4690:	31 83       	std	Z+1, r19	; 0x01
        numBackgroundFunc++;
    4692:	80 91 86 25 	lds	r24, 0x2586	; 0x802586 <numBackgroundFunc>
    4696:	8f 5f       	subi	r24, 0xFF	; 255
    4698:	80 93 86 25 	sts	0x2586, r24	; 0x802586 <numBackgroundFunc>
 * i.e. a mailbox: A structure with a "doOperation" flag, a "operationDone" flag
 * and possibly some information for the background function to use.
 * background functions should be registered inside some init function.
 */
uint8_t add_background_function(background_func_t function){
    uint8_t retVal = BKGND_FUNC_SUCCESS;
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	08 95       	ret
        backgroundFuncArry[numBackgroundFunc] = function;
        numBackgroundFunc++;
    }
    else
    {
        retVal = BKGND_FUNC_FAILURE;    
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    }
    return retVal;
}
    46a2:	08 95       	ret

000046a4 <is_background_function>:
 * @param key The backround funciton to check
 * @returns true if found, false if not found
 *
 */
Bool is_background_function(background_func_t key)
{
    46a4:	ac 01       	movw	r20, r24
    uint8_t idx;
    Bool found = false;
    for (idx = 0; idx < numBackgroundFunc; idx++)
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	0c c0       	rjmp	.+24     	; 0x46c2 <is_background_function+0x1e>
    {
        if(backgroundFuncArry[idx] == key)
    46aa:	e9 2f       	mov	r30, r25
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	ee 0f       	add	r30, r30
    46b0:	ff 1f       	adc	r31, r31
    46b2:	e9 57       	subi	r30, 0x79	; 121
    46b4:	fa 4d       	sbci	r31, 0xDA	; 218
    46b6:	20 81       	ld	r18, Z
    46b8:	31 81       	ldd	r19, Z+1	; 0x01
    46ba:	24 17       	cp	r18, r20
    46bc:	35 07       	cpc	r19, r21
    46be:	39 f0       	breq	.+14     	; 0x46ce <is_background_function+0x2a>
 */
Bool is_background_function(background_func_t key)
{
    uint8_t idx;
    Bool found = false;
    for (idx = 0; idx < numBackgroundFunc; idx++)
    46c0:	9f 5f       	subi	r25, 0xFF	; 255
    46c2:	20 91 86 25 	lds	r18, 0x2586	; 0x802586 <numBackgroundFunc>
    46c6:	92 17       	cp	r25, r18
    46c8:	80 f3       	brcs	.-32     	; 0x46aa <is_background_function+0x6>
 *
 */
Bool is_background_function(background_func_t key)
{
    uint8_t idx;
    Bool found = false;
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	08 95       	ret
    for (idx = 0; idx < numBackgroundFunc; idx++)
    {
        if(backgroundFuncArry[idx] == key)
        {
            found = true;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
			break;
        }
    }
    return found;
}
    46d0:	08 95       	ret

000046d2 <__vector_61>:
   /* Do the stuff*/
}

/** Interrupt service routine for the USART RXC interrupt on port E. */
ISR(RADIO_SPI_INT)
{
    46d2:	1f 92       	push	r1
    46d4:	0f 92       	push	r0
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	0f 92       	push	r0
    46da:	11 24       	eor	r1, r1
    46dc:	0b b6       	in	r0, 0x3b	; 59
    46de:	0f 92       	push	r0
    46e0:	2f 93       	push	r18
    46e2:	3f 93       	push	r19
    46e4:	4f 93       	push	r20
    46e6:	5f 93       	push	r21
    46e8:	6f 93       	push	r22
    46ea:	7f 93       	push	r23
    46ec:	8f 93       	push	r24
    46ee:	9f 93       	push	r25
    46f0:	af 93       	push	r26
    46f2:	bf 93       	push	r27
    46f4:	ef 93       	push	r30
    46f6:	ff 93       	push	r31
    spi_master_ISR(&radioSpiMaster);
    46f8:	8f ea       	ldi	r24, 0xAF	; 175
    46fa:	99 e2       	ldi	r25, 0x29	; 41
    46fc:	e7 d1       	rcall	.+974    	; 0x4acc <spi_master_ISR>
}
    46fe:	ff 91       	pop	r31
    4700:	ef 91       	pop	r30
    4702:	bf 91       	pop	r27
    4704:	af 91       	pop	r26
    4706:	9f 91       	pop	r25
    4708:	8f 91       	pop	r24
    470a:	7f 91       	pop	r23
    470c:	6f 91       	pop	r22
    470e:	5f 91       	pop	r21
    4710:	4f 91       	pop	r20
    4712:	3f 91       	pop	r19
    4714:	2f 91       	pop	r18
    4716:	0f 90       	pop	r0
    4718:	0b be       	out	0x3b, r0	; 59
    471a:	0f 90       	pop	r0
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	0f 90       	pop	r0
    4720:	1f 90       	pop	r1
    4722:	18 95       	reti

00004724 <init_sensor_task>:
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4724:	60 e1       	ldi	r22, 0x10	; 16
    4726:	84 e0       	ldi	r24, 0x04	; 4
    4728:	0e 94 58 04 	call	0x8b0	; 0x8b0 <sysclk_enable_module>
    /* NOTE PINS ARE SETUP TO USE USART IN SPI MASTER MODE! */

    uint16_t baudrate = SPI_BAUDCTRLVAL(SPI_BAUD_RATE);

    sysclk_enable_peripheral_clock(&SENSOR_SPI);
    SENSOR_SPI.BAUDCTRLB = (uint8_t)((baudrate) >> 8); /* MSBs of Baud rate value. */
    472c:	e0 ea       	ldi	r30, 0xA0	; 160
    472e:	f9 e0       	ldi	r31, 0x09	; 9
    4730:	17 82       	std	Z+7, r1	; 0x07
    SENSOR_SPI.BAUDCTRLA = (uint8_t)(baudrate & 0xFF); /* LSBs of Baud rate value. */
    4732:	8f e0       	ldi	r24, 0x0F	; 15
    4734:	86 83       	std	Z+6, r24	; 0x06
    SENSOR_SPI.CTRLA = 0x10; /* RXCINTLVL = 1, other 2 disabled */
    4736:	80 e1       	ldi	r24, 0x10	; 16
    4738:	83 83       	std	Z+3, r24	; 0x03
    SENSOR_SPI.CTRLB = 0x18; /* Enable RX and TX */
    473a:	88 e1       	ldi	r24, 0x18	; 24
    473c:	84 83       	std	Z+4, r24	; 0x04
    SENSOR_SPI.CTRLC = 0xC0; /* MSB first, mode 0. PMODE, SBMODE, CHSIZE ignored by SPI */
    473e:	80 ec       	ldi	r24, 0xC0	; 192
    4740:	85 83       	std	Z+5, r24	; 0x05

    init_spi_master_service(&sensorSpiMaster, &SENSOR_SPI, &SENSOR_SPI_PORT, spi_bg_task);
    4742:	25 ef       	ldi	r18, 0xF5	; 245
    4744:	33 e2       	ldi	r19, 0x23	; 35
    4746:	40 e6       	ldi	r20, 0x60	; 96
    4748:	56 e0       	ldi	r21, 0x06	; 6
    474a:	60 ea       	ldi	r22, 0xA0	; 160
    474c:	79 e0       	ldi	r23, 0x09	; 9
    474e:	88 e6       	ldi	r24, 0x68	; 104
    4750:	9a e2       	ldi	r25, 0x2A	; 42
    4752:	67 d0       	rcall	.+206    	; 0x4822 <init_spi_master_service>
    spi_bg_add_master(&sensorSpiMaster);
    4754:	88 e6       	ldi	r24, 0x68	; 104
    4756:	9a e2       	ldi	r25, 0x2A	; 42

    /* temp/humidity */
    /* init_si7021-a20() */

    /* altimeter/pressure */
    ms5607_02ba03_init(&sensorSpiMaster);
    4758:	34 d0       	rcall	.+104    	; 0x47c2 <spi_bg_add_master>
    475a:	88 e6       	ldi	r24, 0x68	; 104
    475c:	9a e2       	ldi	r25, 0x2A	; 42
    475e:	41 cb       	rjmp	.-2430   	; 0x3de2 <ms5607_02ba03_init>
    4760:	08 95       	ret

00004762 <sensor_task_func>:
 *
 * This task runs all sensor state machine functions and passes the updated data to
 * the main control loop and the radio.
 */
void sensor_task_func(void)
{
    4762:	2f dd       	rcall	.-1442   	; 0x41c2 <ms5607_02ba03_run>
    4764:	82 30       	cpi	r24, 0x02	; 2
    4766:	19 f4       	brne	.+6      	; 0x476e <sensor_task_func+0xc>
    4768:	80 e6       	ldi	r24, 0x60	; 96
    476a:	9a e2       	ldi	r25, 0x2A	; 42
    476c:	f9 cd       	rjmp	.-1038   	; 0x4360 <ms5607_02ba03_get_data>
    476e:	08 95       	ret

00004770 <__vector_88>:
    4770:	1f 92       	push	r1
    4772:	0f 92       	push	r0
    4774:	0f b6       	in	r0, 0x3f	; 63
    4776:	0f 92       	push	r0
    4778:	11 24       	eor	r1, r1
    477a:	0b b6       	in	r0, 0x3b	; 59
    477c:	0f 92       	push	r0
    477e:	2f 93       	push	r18
    4780:	3f 93       	push	r19
    4782:	4f 93       	push	r20
    4784:	5f 93       	push	r21
    4786:	6f 93       	push	r22
    4788:	7f 93       	push	r23
    478a:	8f 93       	push	r24
    478c:	9f 93       	push	r25
    478e:	af 93       	push	r26
    4790:	bf 93       	push	r27
    4792:	ef 93       	push	r30
    4794:	ff 93       	push	r31
    4796:	88 e6       	ldi	r24, 0x68	; 104
    4798:	9a e2       	ldi	r25, 0x2A	; 42
    479a:	98 d1       	rcall	.+816    	; 0x4acc <spi_master_ISR>
    479c:	ff 91       	pop	r31
    479e:	ef 91       	pop	r30
    47a0:	bf 91       	pop	r27
    47a2:	af 91       	pop	r26
    47a4:	9f 91       	pop	r25
    47a6:	8f 91       	pop	r24
    47a8:	7f 91       	pop	r23
    47aa:	6f 91       	pop	r22
    47ac:	5f 91       	pop	r21
    47ae:	4f 91       	pop	r20
    47b0:	3f 91       	pop	r19
    47b2:	2f 91       	pop	r18
    47b4:	0f 90       	pop	r0
    47b6:	0b be       	out	0x3b, r0	; 59
    47b8:	0f 90       	pop	r0
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	0f 90       	pop	r0
    47be:	1f 90       	pop	r1
    47c0:	18 95       	reti

000047c2 <spi_bg_add_master>:
 *
 * @param master The SPI master to add to the processing list
 * @return True on success, false on failure
 */
Bool spi_bg_add_master(spi_master_t *master)
{
    47c2:	9c 01       	movw	r18, r24
    static uint8_t currMasterIdx = 0;
    Bool addMasterStatus = true;

    if(!(currMasterIdx < MAX_SPI_MASTER_MODULES))
    47c4:	90 91 af 25 	lds	r25, 0x25AF	; 0x8025af <currMasterIdx.6917>
    47c8:	93 30       	cpi	r25, 0x03	; 3
    47ca:	68 f4       	brcc	.+26     	; 0x47e6 <spi_bg_add_master+0x24>
    {
        addMasterStatus = false;
    }
    else
    {
        gSpiMasters[currMasterIdx] = master;
    47cc:	e9 2f       	mov	r30, r25
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	e7 5e       	subi	r30, 0xE7	; 231
    47d6:	f4 4d       	sbci	r31, 0xD4	; 212
    47d8:	20 83       	st	Z, r18
    47da:	31 83       	std	Z+1, r19	; 0x01
        currMasterIdx++;
    47dc:	9f 5f       	subi	r25, 0xFF	; 255
    47de:	90 93 af 25 	sts	0x25AF, r25	; 0x8025af <currMasterIdx.6917>
 * @return True on success, false on failure
 */
Bool spi_bg_add_master(spi_master_t *master)
{
    static uint8_t currMasterIdx = 0;
    Bool addMasterStatus = true;
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	08 95       	ret

    if(!(currMasterIdx < MAX_SPI_MASTER_MODULES))
    {
        addMasterStatus = false;
    47e6:	80 e0       	ldi	r24, 0x00	; 0
    {
        gSpiMasters[currMasterIdx] = master;
        currMasterIdx++;
    }
    return addMasterStatus;
}
    47e8:	08 95       	ret

000047ea <spi_bg_task>:
 * attempts to initiate a request from the front of the queue on the idle ones. 
 * If there is no request in the queue for the currently indexed master, it
 * should do nothing, and simply move onto the next one. 
*/
void spi_bg_task(void)
{
    47ea:	1f 93       	push	r17
    47ec:	cf 93       	push	r28
    47ee:	df 93       	push	r29
    uint8_t idx = 0;
    spi_master_t *currMaster = gSpiMasters[0];
    47f0:	c0 91 19 2b 	lds	r28, 0x2B19	; 0x802b19 <gSpiMasters>
    47f4:	d0 91 1a 2b 	lds	r29, 0x2B1A	; 0x802b1a <gSpiMasters+0x1>

    for(idx = 0; idx < MAX_SPI_MASTER_MODULES; idx++, currMaster++)
    47f8:	10 e0       	ldi	r17, 0x00	; 0
    47fa:	0d c0       	rjmp	.+26     	; 0x4816 <spi_bg_task+0x2c>
    {
        if(currMaster != NULL)
    47fc:	20 97       	sbiw	r28, 0x00	; 0
    47fe:	41 f0       	breq	.+16     	; 0x4810 <spi_bg_task+0x26>
        {
            if(!currMaster->masterBusy)
    4800:	fe 01       	movw	r30, r28
    4802:	e0 55       	subi	r30, 0x50	; 80
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	80 81       	ld	r24, Z
    4808:	81 11       	cpse	r24, r1
    480a:	02 c0       	rjmp	.+4      	; 0x4810 <spi_bg_task+0x26>
            {
                (void)spi_master_initate_request(currMaster);
    480c:	ce 01       	movw	r24, r28
    480e:	1a d1       	rcall	.+564    	; 0x4a44 <spi_master_initate_request>
void spi_bg_task(void)
{
    uint8_t idx = 0;
    spi_master_t *currMaster = gSpiMasters[0];

    for(idx = 0; idx < MAX_SPI_MASTER_MODULES; idx++, currMaster++)
    4810:	1f 5f       	subi	r17, 0xFF	; 255
    4812:	cf 54       	subi	r28, 0x4F	; 79
    4814:	df 4f       	sbci	r29, 0xFF	; 255
    4816:	13 30       	cpi	r17, 0x03	; 3
    4818:	88 f3       	brcs	.-30     	; 0x47fc <spi_bg_task+0x12>
            {
                (void)spi_master_initate_request(currMaster);
            } /* End of check on busy */
        } /* End of NULL check */
    } /* End of loop over master modules */
}
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	1f 91       	pop	r17
    4820:	08 95       	ret

00004822 <init_spi_master_service>:
                              volatile void *recvBuff,
                              uint16_t recvLen,
                              volatile Bool *complete)
{
    return spi_master_enqueue_internal(spi_interface, csInfo, sendBuff, sendLen, recvBuff, recvLen, complete, true);
}
    4822:	cf 93       	push	r28
    4824:	df 93       	push	r29
    4826:	e9 01       	movw	r28, r18
    4828:	dc 01       	movw	r26, r24
    482a:	6d 93       	st	X+, r22
    482c:	7c 93       	st	X, r23
    482e:	11 97       	sbiw	r26, 0x01	; 1
    4830:	12 96       	adiw	r26, 0x02	; 2
    4832:	4d 93       	st	X+, r20
    4834:	5c 93       	st	X, r21
    4836:	13 97       	sbiw	r26, 0x03	; 3
    4838:	fc 01       	movw	r30, r24
    483a:	34 96       	adiw	r30, 0x04	; 4
    483c:	2a ea       	ldi	r18, 0xAA	; 170
    483e:	df 01       	movw	r26, r30
    4840:	1d 92       	st	X+, r1
    4842:	2a 95       	dec	r18
    4844:	e9 f7       	brne	.-6      	; 0x4840 <init_spi_master_service+0x1e>
    4846:	e6 55       	subi	r30, 0x56	; 86
    4848:	ff 4f       	sbci	r31, 0xFF	; 255
    484a:	10 82       	st	Z, r1
    484c:	31 96       	adiw	r30, 0x01	; 1
    484e:	10 82       	st	Z, r1
    4850:	ce 01       	movw	r24, r28
    4852:	28 df       	rcall	.-432    	; 0x46a4 <is_background_function>
    4854:	81 11       	cpse	r24, r1
    4856:	06 c0       	rjmp	.+12     	; 0x4864 <init_spi_master_service+0x42>
    4858:	ce 01       	movw	r24, r28
    485a:	0d df       	rcall	.-486    	; 0x4676 <add_background_function>
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	21 f0       	breq	.+8      	; 0x4868 <init_spi_master_service+0x46>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	03 c0       	rjmp	.+6      	; 0x486a <init_spi_master_service+0x48>
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	01 c0       	rjmp	.+2      	; 0x486a <init_spi_master_service+0x48>
    4868:	80 e0       	ldi	r24, 0x00	; 0
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	08 95       	ret

00004870 <spi_master_enqueue_internal>:
    4870:	6f 92       	push	r6
    4872:	7f 92       	push	r7
    4874:	8f 92       	push	r8
    4876:	9f 92       	push	r9
    4878:	af 92       	push	r10
    487a:	bf 92       	push	r11
    487c:	cf 92       	push	r12
    487e:	df 92       	push	r13
    4880:	ef 92       	push	r14
    4882:	ff 92       	push	r15
    4884:	0f 93       	push	r16
    4886:	1f 93       	push	r17
    4888:	cf 93       	push	r28
    488a:	df 93       	push	r29
    488c:	fc 01       	movw	r30, r24
    488e:	e1 55       	subi	r30, 0x51	; 81
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	b0 80       	ld	r11, Z
    4894:	dc 01       	movw	r26, r24
    4896:	a2 55       	subi	r26, 0x52	; 82
    4898:	bf 4f       	sbci	r27, 0xFF	; 255
    489a:	ac 91       	ld	r26, X
    489c:	f0 81       	ld	r31, Z
    489e:	e1 e0       	ldi	r30, 0x01	; 1
    48a0:	af 13       	cpse	r26, r31
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <spi_master_enqueue_internal+0x36>
    48a4:	e0 e0       	ldi	r30, 0x00	; 0
    48a6:	de 2f       	mov	r29, r30
    48a8:	db 0d       	add	r29, r11
    48aa:	da 30       	cpi	r29, 0x0A	; 10
    48ac:	09 f4       	brne	.+2      	; 0x48b0 <spi_master_enqueue_internal+0x40>
    48ae:	d0 e0       	ldi	r29, 0x00	; 0
    48b0:	ed 2f       	mov	r30, r29
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	c1 e1       	ldi	r28, 0x11	; 17
    48b6:	ce 9f       	mul	r28, r30
    48b8:	d0 01       	movw	r26, r0
    48ba:	cf 9f       	mul	r28, r31
    48bc:	b0 0d       	add	r27, r0
    48be:	11 24       	eor	r1, r1
    48c0:	a8 0f       	add	r26, r24
    48c2:	b9 1f       	adc	r27, r25
    48c4:	53 96       	adiw	r26, 0x13	; 19
    48c6:	ac 91       	ld	r26, X
    48c8:	a1 30       	cpi	r26, 0x01	; 1
    48ca:	51 f4       	brne	.+20     	; 0x48e0 <spi_master_enqueue_internal+0x70>
    48cc:	dc 01       	movw	r26, r24
    48ce:	a1 55       	subi	r26, 0x51	; 81
    48d0:	bf 4f       	sbci	r27, 0xFF	; 255
    48d2:	cc 91       	ld	r28, X
    48d4:	11 97       	sbiw	r26, 0x01	; 1
    48d6:	ac 91       	ld	r26, X
    48d8:	ca 17       	cp	r28, r26
    48da:	21 f0       	breq	.+8      	; 0x48e4 <spi_master_enqueue_internal+0x74>
    48dc:	c1 e0       	ldi	r28, 0x01	; 1
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <spi_master_enqueue_internal+0x76>
    48e0:	c1 e0       	ldi	r28, 0x01	; 1
    48e2:	01 c0       	rjmp	.+2      	; 0x48e6 <spi_master_enqueue_internal+0x76>
    48e4:	c0 e0       	ldi	r28, 0x00	; 0
    48e6:	c1 30       	cpi	r28, 0x01	; 1
    48e8:	09 f0       	breq	.+2      	; 0x48ec <spi_master_enqueue_internal+0x7c>
    48ea:	5f c0       	rjmp	.+190    	; 0x49aa <spi_master_enqueue_internal+0x13a>
    48ec:	db 01       	movw	r26, r22
    48ee:	6d 90       	ld	r6, X+
    48f0:	7c 90       	ld	r7, X
    48f2:	0f 2e       	mov	r0, r31
    48f4:	f1 e1       	ldi	r31, 0x11	; 17
    48f6:	8f 2e       	mov	r8, r31
    48f8:	f0 2d       	mov	r31, r0
    48fa:	8e 9e       	mul	r8, r30
    48fc:	d0 01       	movw	r26, r0
    48fe:	8f 9e       	mul	r8, r31
    4900:	b0 0d       	add	r27, r0
    4902:	11 24       	eor	r1, r1
    4904:	4d 01       	movw	r8, r26
    4906:	88 0e       	add	r8, r24
    4908:	99 1e       	adc	r9, r25
    490a:	d4 01       	movw	r26, r8
    490c:	14 96       	adiw	r26, 0x04	; 4
    490e:	6d 92       	st	X+, r6
    4910:	7c 92       	st	X, r7
    4912:	15 97       	sbiw	r26, 0x05	; 5
    4914:	db 01       	movw	r26, r22
    4916:	12 96       	adiw	r26, 0x02	; 2
    4918:	6c 91       	ld	r22, X
    491a:	d4 01       	movw	r26, r8
    491c:	16 96       	adiw	r26, 0x06	; 6
    491e:	6c 93       	st	X, r22
    4920:	aa 20       	and	r10, r10
    4922:	21 f0       	breq	.+8      	; 0x492c <spi_master_enqueue_internal+0xbc>
    4924:	d4 01       	movw	r26, r8
    4926:	54 96       	adiw	r26, 0x14	; 20
    4928:	1c 92       	st	X, r1
    492a:	0b c0       	rjmp	.+22     	; 0x4942 <spi_master_enqueue_internal+0xd2>
    492c:	61 e1       	ldi	r22, 0x11	; 17
    492e:	6e 9f       	mul	r22, r30
    4930:	d0 01       	movw	r26, r0
    4932:	6f 9f       	mul	r22, r31
    4934:	b0 0d       	add	r27, r0
    4936:	11 24       	eor	r1, r1
    4938:	a8 0f       	add	r26, r24
    493a:	b9 1f       	adc	r27, r25
    493c:	61 e0       	ldi	r22, 0x01	; 1
    493e:	54 96       	adiw	r26, 0x14	; 20
    4940:	6c 93       	st	X, r22
    4942:	61 e1       	ldi	r22, 0x11	; 17
    4944:	6e 9f       	mul	r22, r30
    4946:	d0 01       	movw	r26, r0
    4948:	6f 9f       	mul	r22, r31
    494a:	b0 0d       	add	r27, r0
    494c:	11 24       	eor	r1, r1
    494e:	a8 0f       	add	r26, r24
    4950:	b9 1f       	adc	r27, r25
    4952:	17 96       	adiw	r26, 0x07	; 7
    4954:	4d 93       	st	X+, r20
    4956:	5c 93       	st	X, r21
    4958:	18 97       	sbiw	r26, 0x08	; 8
    495a:	19 96       	adiw	r26, 0x09	; 9
    495c:	2d 93       	st	X+, r18
    495e:	3c 93       	st	X, r19
    4960:	1a 97       	sbiw	r26, 0x0a	; 10
    4962:	1b 96       	adiw	r26, 0x0b	; 11
    4964:	1c 92       	st	X, r1
    4966:	1b 97       	sbiw	r26, 0x0b	; 11
    4968:	1c 96       	adiw	r26, 0x0c	; 12
    496a:	0d 93       	st	X+, r16
    496c:	1c 93       	st	X, r17
    496e:	1d 97       	sbiw	r26, 0x0d	; 13
    4970:	1e 96       	adiw	r26, 0x0e	; 14
    4972:	ed 92       	st	X+, r14
    4974:	fc 92       	st	X, r15
    4976:	1f 97       	sbiw	r26, 0x0f	; 15
    4978:	50 96       	adiw	r26, 0x10	; 16
    497a:	1c 92       	st	X, r1
    497c:	50 97       	sbiw	r26, 0x10	; 16
    497e:	31 96       	adiw	r30, 0x01	; 1
    4980:	6e 9f       	mul	r22, r30
    4982:	90 01       	movw	r18, r0
    4984:	6f 9f       	mul	r22, r31
    4986:	30 0d       	add	r19, r0
    4988:	11 24       	eor	r1, r1
    498a:	fc 01       	movw	r30, r24
    498c:	e2 0f       	add	r30, r18
    498e:	f3 1f       	adc	r31, r19
    4990:	c0 82       	st	Z, r12
    4992:	d1 82       	std	Z+1, r13	; 0x01
    4994:	01 90       	ld	r0, Z+
    4996:	f0 81       	ld	r31, Z
    4998:	e0 2d       	mov	r30, r0
    499a:	10 82       	st	Z, r1
    499c:	21 e0       	ldi	r18, 0x01	; 1
    499e:	53 96       	adiw	r26, 0x13	; 19
    49a0:	2c 93       	st	X, r18
    49a2:	fc 01       	movw	r30, r24
    49a4:	e1 55       	subi	r30, 0x51	; 81
    49a6:	ff 4f       	sbci	r31, 0xFF	; 255
    49a8:	d0 83       	st	Z, r29
    49aa:	8c 2f       	mov	r24, r28
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	1f 91       	pop	r17
    49b2:	0f 91       	pop	r16
    49b4:	ff 90       	pop	r15
    49b6:	ef 90       	pop	r14
    49b8:	df 90       	pop	r13
    49ba:	cf 90       	pop	r12
    49bc:	bf 90       	pop	r11
    49be:	af 90       	pop	r10
    49c0:	9f 90       	pop	r9
    49c2:	8f 90       	pop	r8
    49c4:	7f 90       	pop	r7
    49c6:	6f 90       	pop	r6
    49c8:	08 95       	ret

000049ca <spi_master_enqueue>:
    49ca:	af 92       	push	r10
    49cc:	cf 92       	push	r12
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	a1 2c       	mov	r10, r1
    49da:	4a df       	rcall	.-364    	; 0x4870 <spi_master_enqueue_internal>
    49dc:	1f 91       	pop	r17
    49de:	0f 91       	pop	r16
    49e0:	ff 90       	pop	r15
    49e2:	ef 90       	pop	r14
    49e4:	df 90       	pop	r13
    49e6:	cf 90       	pop	r12
    49e8:	af 90       	pop	r10
    49ea:	08 95       	ret

000049ec <spi_master_dequeue>:
 * front and back indexes
*/
Bool spi_master_dequeue(spi_master_t *spi_interface)
{
    Bool popStatus = true;
    uint8_t oldFront = spi_interface->front;
    49ec:	fc 01       	movw	r30, r24
    49ee:	e2 55       	subi	r30, 0x52	; 82
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	20 81       	ld	r18, Z
    /* If front == back, there's one entry or no entries */
    uint8_t newFront = (oldFront == spi_interface->back) ? (oldFront) : (oldFront + 1);
    49f4:	31 96       	adiw	r30, 0x01	; 1
    49f6:	30 81       	ld	r19, Z
    49f8:	23 17       	cp	r18, r19
    49fa:	19 f0       	breq	.+6      	; 0x4a02 <spi_master_dequeue+0x16>
    49fc:	41 e0       	ldi	r20, 0x01	; 1
    49fe:	42 0f       	add	r20, r18
    4a00:	01 c0       	rjmp	.+2      	; 0x4a04 <spi_master_dequeue+0x18>
    4a02:	42 2f       	mov	r20, r18

    /* Handle wrap-around */
    if(newFront >= SPI_MASTER_QUEUE_DEPTH)
    4a04:	4a 30       	cpi	r20, 0x0A	; 10
    4a06:	08 f0       	brcs	.+2      	; 0x4a0a <spi_master_dequeue+0x1e>
    {
       newFront = 0;
    4a08:	40 e0       	ldi	r20, 0x00	; 0
    }

    /* If there wasn't an entry to pop */
    if(spi_interface->requestQueue[oldFront].valid == false)
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	51 e1       	ldi	r21, 0x11	; 17
    4a0e:	52 9f       	mul	r21, r18
    4a10:	f0 01       	movw	r30, r0
    4a12:	53 9f       	mul	r21, r19
    4a14:	f0 0d       	add	r31, r0
    4a16:	11 24       	eor	r1, r1
    4a18:	e8 0f       	add	r30, r24
    4a1a:	f9 1f       	adc	r31, r25
    4a1c:	53 89       	ldd	r21, Z+19	; 0x13
    4a1e:	55 23       	and	r21, r21
    4a20:	79 f0       	breq	.+30     	; 0x4a40 <spi_master_dequeue+0x54>
        popStatus = false;
    }
    else
    {
        /* Invalidate the old front */
        spi_interface->requestQueue[oldFront].valid = false;
    4a22:	51 e1       	ldi	r21, 0x11	; 17
    4a24:	52 9f       	mul	r21, r18
    4a26:	f0 01       	movw	r30, r0
    4a28:	53 9f       	mul	r21, r19
    4a2a:	f0 0d       	add	r31, r0
    4a2c:	11 24       	eor	r1, r1
    4a2e:	e8 0f       	add	r30, r24
    4a30:	f9 1f       	adc	r31, r25
    4a32:	13 8a       	std	Z+19, r1	; 0x13
        /* Change the new front index to be one further in the queue (assuming no wrapping, else 0) */
        spi_interface->front = newFront;
    4a34:	fc 01       	movw	r30, r24
    4a36:	e2 55       	subi	r30, 0x52	; 82
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	40 83       	st	Z, r20
 * Pop an item from the request queue by invalidating the entry, then fix up the
 * front and back indexes
*/
Bool spi_master_dequeue(spi_master_t *spi_interface)
{
    Bool popStatus = true;
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	08 95       	ret
    }

    /* If there wasn't an entry to pop */
    if(spi_interface->requestQueue[oldFront].valid == false)
    {
        popStatus = false;
    4a40:	80 e0       	ldi	r24, 0x00	; 0
        /* Change the new front index to be one further in the queue (assuming no wrapping, else 0) */
        spi_interface->front = newFront;
    }

    return popStatus;
}
    4a42:	08 95       	ret

00004a44 <spi_master_initate_request>:
 *
 * Instructs the SPI interface to start the request at the beginning of its queue.
 * Also pulls the chip select line low for the enqueued request.
 */
Bool spi_master_initate_request(spi_master_t *spi_interface)
{
    4a44:	cf 93       	push	r28
    4a46:	df 93       	push	r29
    Bool initiateSuccess = true;
    volatile spi_request_t *frontQueue = &spi_interface->requestQueue[spi_interface->front];
    4a48:	fc 01       	movw	r30, r24
    4a4a:	e2 55       	subi	r30, 0x52	; 82
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	20 81       	ld	r18, Z
    4a50:	30 e0       	ldi	r19, 0x00	; 0
    
    if(frontQueue->valid == false)
    4a52:	41 e1       	ldi	r20, 0x11	; 17
    4a54:	42 9f       	mul	r20, r18
    4a56:	f0 01       	movw	r30, r0
    4a58:	43 9f       	mul	r20, r19
    4a5a:	f0 0d       	add	r31, r0
    4a5c:	11 24       	eor	r1, r1
    4a5e:	e8 0f       	add	r30, r24
    4a60:	f9 1f       	adc	r31, r25
    4a62:	43 89       	ldd	r20, Z+19	; 0x13
    4a64:	44 23       	and	r20, r20
    4a66:	71 f1       	breq	.+92     	; 0x4ac4 <spi_master_initate_request+0x80>
        initiateSuccess = false;
    }
    else
    {
        /** Start the request */
        *(frontQueue->complete) = false;
    4a68:	b9 01       	movw	r22, r18
    4a6a:	6f 5f       	subi	r22, 0xFF	; 255
    4a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6e:	41 e1       	ldi	r20, 0x11	; 17
    4a70:	46 9f       	mul	r20, r22
    4a72:	f0 01       	movw	r30, r0
    4a74:	47 9f       	mul	r20, r23
    4a76:	f0 0d       	add	r31, r0
    4a78:	11 24       	eor	r1, r1
    4a7a:	e8 0f       	add	r30, r24
    4a7c:	f9 1f       	adc	r31, r25
    4a7e:	01 90       	ld	r0, Z+
    4a80:	f0 81       	ld	r31, Z
    4a82:	e0 2d       	mov	r30, r0
    4a84:	10 82       	st	Z, r1
        frontQueue->bytesRecv = 0;
    4a86:	42 9f       	mul	r20, r18
    4a88:	f0 01       	movw	r30, r0
    4a8a:	43 9f       	mul	r20, r19
    4a8c:	f0 0d       	add	r31, r0
    4a8e:	11 24       	eor	r1, r1
    4a90:	e8 0f       	add	r30, r24
    4a92:	f9 1f       	adc	r31, r25
    4a94:	10 8a       	std	Z+16, r1	; 0x10
        frontQueue->bytesSent = 0;
    4a96:	13 86       	std	Z+11, r1	; 0x0b
        
        /** Mark this device as "busy" */
        spi_interface->masterBusy = true;
    4a98:	dc 01       	movw	r26, r24
    4a9a:	a0 55       	subi	r26, 0x50	; 80
    4a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a9e:	21 e0       	ldi	r18, 0x01	; 1
    4aa0:	2c 93       	st	X, r18
        /** Enable chip select for the device in this request */
        frontQueue->csInfo.csPort->OUTCLR = frontQueue->csInfo.pinBitMask;
    4aa2:	a4 81       	ldd	r26, Z+4	; 0x04
    4aa4:	b5 81       	ldd	r27, Z+5	; 0x05
    4aa6:	26 81       	ldd	r18, Z+6	; 0x06
    4aa8:	16 96       	adiw	r26, 0x06	; 6
    4aaa:	2c 93       	st	X, r18

        /** Write to the spi master data. this will send the first byte. */
        spi_interface->master->DATA = ((uint8_t *)(frontQueue->sendBuff))[0];
    4aac:	ec 01       	movw	r28, r24
    4aae:	a8 81       	ld	r26, Y
    4ab0:	b9 81       	ldd	r27, Y+1	; 0x01
    4ab2:	c7 81       	ldd	r28, Z+7	; 0x07
    4ab4:	d0 85       	ldd	r29, Z+8	; 0x08
    4ab6:	88 81       	ld	r24, Y
    4ab8:	8c 93       	st	X, r24
        frontQueue->bytesSent++;
    4aba:	83 85       	ldd	r24, Z+11	; 0x0b
    4abc:	8f 5f       	subi	r24, 0xFF	; 255
    4abe:	83 87       	std	Z+11, r24	; 0x0b
 * Instructs the SPI interface to start the request at the beginning of its queue.
 * Also pulls the chip select line low for the enqueued request.
 */
Bool spi_master_initate_request(spi_master_t *spi_interface)
{
    Bool initiateSuccess = true;
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	01 c0       	rjmp	.+2      	; 0x4ac6 <spi_master_initate_request+0x82>
    volatile spi_request_t *frontQueue = &spi_interface->requestQueue[spi_interface->front];
    
    if(frontQueue->valid == false)
    {
        initiateSuccess = false;
    4ac4:	80 e0       	ldi	r24, 0x00	; 0
        spi_interface->master->DATA = ((uint8_t *)(frontQueue->sendBuff))[0];
        frontQueue->bytesSent++;

    }
    return initiateSuccess;
}
    4ac6:	df 91       	pop	r29
    4ac8:	cf 91       	pop	r28
    4aca:	08 95       	ret

00004acc <spi_master_ISR>:
 * NOTE: This function must be re-entrant from multiple iterrupts. If one
 * SPI interrupt is higher than another, it could pre-empt in the middle
 * Of processing. (But please don't do that, keep them the same level...)
 */
void spi_master_ISR(spi_master_t *spi_interface)
{
    4acc:	0f 93       	push	r16
    4ace:	1f 93       	push	r17
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    volatile uint8_t *dataSent, *dataRecv;
    uint16_t dataToSend, dataToRecv, dummyByte;
    Bool moreToDo;

    /** Look at the front of the queue */
    volatile spi_request_t *currRequest = &spi_interface->requestQueue[spi_interface->front];
    4ad4:	fc 01       	movw	r30, r24
    4ad6:	e2 55       	subi	r30, 0x52	; 82
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	20 81       	ld	r18, Z
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    dataSent = &(currRequest->bytesSent);
    dataRecv = &(currRequest->bytesRecv);
    dataToSend = currRequest->sendLen;
    4ade:	41 e1       	ldi	r20, 0x11	; 17
    4ae0:	42 9f       	mul	r20, r18
    4ae2:	f0 01       	movw	r30, r0
    4ae4:	43 9f       	mul	r20, r19
    4ae6:	f0 0d       	add	r31, r0
    4ae8:	11 24       	eor	r1, r1
    4aea:	e8 0f       	add	r30, r24
    4aec:	f9 1f       	adc	r31, r25
    4aee:	a1 85       	ldd	r26, Z+9	; 0x09
    4af0:	b2 85       	ldd	r27, Z+10	; 0x0a
    dataToRecv = currRequest->recvLen;
    4af2:	66 85       	ldd	r22, Z+14	; 0x0e
    4af4:	77 85       	ldd	r23, Z+15	; 0x0f

    /** If there's still bytes to receive, keep receiving them. */
    if ((*dataRecv) < dataToRecv)
    4af6:	40 89       	ldd	r20, Z+16	; 0x10
    4af8:	50 e0       	ldi	r21, 0x00	; 0
    4afa:	46 17       	cp	r20, r22
    4afc:	57 07       	cpc	r21, r23
    4afe:	c8 f4       	brcc	.+50     	; 0x4b32 <spi_master_ISR+0x66>
    {
        ((uint8_t *)(currRequest->recvBuff))[(*dataRecv)] = spi_interface->master->DATA;
    4b00:	41 e1       	ldi	r20, 0x11	; 17
    4b02:	42 9f       	mul	r20, r18
    4b04:	f0 01       	movw	r30, r0
    4b06:	43 9f       	mul	r20, r19
    4b08:	f0 0d       	add	r31, r0
    4b0a:	11 24       	eor	r1, r1
    4b0c:	e8 0f       	add	r30, r24
    4b0e:	f9 1f       	adc	r31, r25
    4b10:	c4 85       	ldd	r28, Z+12	; 0x0c
    4b12:	d5 85       	ldd	r29, Z+13	; 0x0d
    4b14:	40 89       	ldd	r20, Z+16	; 0x10
    4b16:	8e 01       	movw	r16, r28
    4b18:	04 0f       	add	r16, r20
    4b1a:	11 1d       	adc	r17, r1
    4b1c:	ec 01       	movw	r28, r24
    4b1e:	48 81       	ld	r20, Y
    4b20:	59 81       	ldd	r21, Y+1	; 0x01
    4b22:	ea 01       	movw	r28, r20
    4b24:	48 81       	ld	r20, Y
    4b26:	e8 01       	movw	r28, r16
    4b28:	48 83       	st	Y, r20
        (*dataRecv)++;
    4b2a:	40 89       	ldd	r20, Z+16	; 0x10
    4b2c:	4f 5f       	subi	r20, 0xFF	; 255
    4b2e:	40 8b       	std	Z+16, r20	; 0x10
    4b30:	04 c0       	rjmp	.+8      	; 0x4b3a <spi_master_ISR+0x6e>
    }
    /** If we don't care what's in the buffer, read the register then ignore the value. */
    /** NOTE AS WE ARE USING THE RXC INTERRUPT DATA MUST BE READ TO CLEAR THE INTERRUPT */
    else
    {
        dummyByte = spi_interface->master->DATA;
    4b32:	ec 01       	movw	r28, r24
    4b34:	e8 81       	ld	r30, Y
    4b36:	f9 81       	ldd	r31, Y+1	; 0x01
    4b38:	40 81       	ld	r20, Z
    }

    /** If there's still bytes to send, keep sending them*/
    if((*dataSent) < dataToSend)
    4b3a:	41 e1       	ldi	r20, 0x11	; 17
    4b3c:	42 9f       	mul	r20, r18
    4b3e:	f0 01       	movw	r30, r0
    4b40:	43 9f       	mul	r20, r19
    4b42:	f0 0d       	add	r31, r0
    4b44:	11 24       	eor	r1, r1
    4b46:	e8 0f       	add	r30, r24
    4b48:	f9 1f       	adc	r31, r25
    4b4a:	43 85       	ldd	r20, Z+11	; 0x0b
    4b4c:	50 e0       	ldi	r21, 0x00	; 0
    4b4e:	4a 17       	cp	r20, r26
    4b50:	5b 07       	cpc	r21, r27
    4b52:	b8 f4       	brcc	.+46     	; 0x4b82 <spi_master_ISR+0xb6>
    {
        spi_interface->master->DATA = ((uint8_t *)(currRequest->sendBuff))[(*dataSent)];
    4b54:	fc 01       	movw	r30, r24
    4b56:	40 81       	ld	r20, Z
    4b58:	51 81       	ldd	r21, Z+1	; 0x01
    4b5a:	c1 e1       	ldi	r28, 0x11	; 17
    4b5c:	c2 9f       	mul	r28, r18
    4b5e:	f0 01       	movw	r30, r0
    4b60:	c3 9f       	mul	r28, r19
    4b62:	f0 0d       	add	r31, r0
    4b64:	11 24       	eor	r1, r1
    4b66:	e8 0f       	add	r30, r24
    4b68:	f9 1f       	adc	r31, r25
    4b6a:	c7 81       	ldd	r28, Z+7	; 0x07
    4b6c:	d0 85       	ldd	r29, Z+8	; 0x08
    4b6e:	13 85       	ldd	r17, Z+11	; 0x0b
    4b70:	c1 0f       	add	r28, r17
    4b72:	d1 1d       	adc	r29, r1
    4b74:	18 81       	ld	r17, Y
    4b76:	ea 01       	movw	r28, r20
    4b78:	18 83       	st	Y, r17
        (*dataSent)++;
    4b7a:	43 85       	ldd	r20, Z+11	; 0x0b
    4b7c:	4f 5f       	subi	r20, 0xFF	; 255
    4b7e:	43 87       	std	Z+11, r20	; 0x0b
    4b80:	11 c0       	rjmp	.+34     	; 0x4ba4 <spi_master_ISR+0xd8>
    }
    /** Otherwise, if  want to recieve more data but we don't have any more to send... */
    else if((*dataRecv) < dataToRecv)
    4b82:	41 e1       	ldi	r20, 0x11	; 17
    4b84:	42 9f       	mul	r20, r18
    4b86:	f0 01       	movw	r30, r0
    4b88:	43 9f       	mul	r20, r19
    4b8a:	f0 0d       	add	r31, r0
    4b8c:	11 24       	eor	r1, r1
    4b8e:	e8 0f       	add	r30, r24
    4b90:	f9 1f       	adc	r31, r25
    4b92:	40 89       	ldd	r20, Z+16	; 0x10
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	46 17       	cp	r20, r22
    4b98:	57 07       	cpc	r21, r23
    4b9a:	20 f4       	brcc	.+8      	; 0x4ba4 <spi_master_ISR+0xd8>
    {
        dummyByte = 0x00;
        /** Send a dummy byte to clock out the next bits of data. */
        spi_interface->master->DATA = dummyByte;
    4b9c:	ec 01       	movw	r28, r24
    4b9e:	e8 81       	ld	r30, Y
    4ba0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ba2:	10 82       	st	Z, r1
    }

    /** Check if are we done */
    moreToDo = (*dataSent < dataToSend) ? true : false;
    4ba4:	41 e1       	ldi	r20, 0x11	; 17
    4ba6:	42 9f       	mul	r20, r18
    4ba8:	f0 01       	movw	r30, r0
    4baa:	43 9f       	mul	r20, r19
    4bac:	f0 0d       	add	r31, r0
    4bae:	11 24       	eor	r1, r1
    4bb0:	e8 0f       	add	r30, r24
    4bb2:	f9 1f       	adc	r31, r25
    4bb4:	43 85       	ldd	r20, Z+11	; 0x0b
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	c1 e0       	ldi	r28, 0x01	; 1
    4bba:	4a 17       	cp	r20, r26
    4bbc:	5b 07       	cpc	r21, r27
    4bbe:	08 f0       	brcs	.+2      	; 0x4bc2 <spi_master_ISR+0xf6>
    4bc0:	c0 e0       	ldi	r28, 0x00	; 0
    moreToDo |= (*dataRecv < dataToRecv) ? true : false;
    4bc2:	41 e1       	ldi	r20, 0x11	; 17
    4bc4:	42 9f       	mul	r20, r18
    4bc6:	f0 01       	movw	r30, r0
    4bc8:	43 9f       	mul	r20, r19
    4bca:	f0 0d       	add	r31, r0
    4bcc:	11 24       	eor	r1, r1
    4bce:	e8 0f       	add	r30, r24
    4bd0:	f9 1f       	adc	r31, r25
    4bd2:	40 89       	ldd	r20, Z+16	; 0x10
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	e1 e0       	ldi	r30, 0x01	; 1
    4bd8:	46 17       	cp	r20, r22
    4bda:	57 07       	cpc	r21, r23
    4bdc:	08 f0       	brcs	.+2      	; 0x4be0 <spi_master_ISR+0x114>
    4bde:	e0 e0       	ldi	r30, 0x00	; 0

    if(!moreToDo)
    4be0:	c1 11       	cpse	r28, r1
    4be2:	31 c0       	rjmp	.+98     	; 0x4c46 <spi_master_ISR+0x17a>
    4be4:	e1 11       	cpse	r30, r1
    4be6:	2f c0       	rjmp	.+94     	; 0x4c46 <spi_master_ISR+0x17a>
    {
        /** If we're done, raise chip select again. NOTE: This is enabled by default. 
         * There are a few special cases (i.e. Altimeter Reset procedure) that
         * require it to be held low.
        */
        if(currRequest->raise_cs){
    4be8:	41 e1       	ldi	r20, 0x11	; 17
    4bea:	42 9f       	mul	r20, r18
    4bec:	f0 01       	movw	r30, r0
    4bee:	43 9f       	mul	r20, r19
    4bf0:	f0 0d       	add	r31, r0
    4bf2:	11 24       	eor	r1, r1
    4bf4:	e8 0f       	add	r30, r24
    4bf6:	f9 1f       	adc	r31, r25
    4bf8:	44 89       	ldd	r20, Z+20	; 0x14
    4bfa:	44 23       	and	r20, r20
    4bfc:	69 f0       	breq	.+26     	; 0x4c18 <spi_master_ISR+0x14c>
            spi_master_finish_request(currRequest);
    4bfe:	41 e1       	ldi	r20, 0x11	; 17
    4c00:	42 9f       	mul	r20, r18
    4c02:	f0 01       	movw	r30, r0
    4c04:	43 9f       	mul	r20, r19
    4c06:	f0 0d       	add	r31, r0
    4c08:	11 24       	eor	r1, r1
    4c0a:	e8 0f       	add	r30, r24
    4c0c:	f9 1f       	adc	r31, r25
    4c0e:	a4 81       	ldd	r26, Z+4	; 0x04
    4c10:	b5 81       	ldd	r27, Z+5	; 0x05
    4c12:	26 81       	ldd	r18, Z+6	; 0x06
    4c14:	15 96       	adiw	r26, 0x05	; 5
    4c16:	2c 93       	st	X, r18
        }
        /** Inform the initiator that the request has completed*/
        spi_interface->masterBusy = false;
    4c18:	fc 01       	movw	r30, r24
    4c1a:	e0 55       	subi	r30, 0x50	; 80
    4c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1e:	10 82       	st	Z, r1
        spi_master_request_complete(spi_interface);
    4c20:	32 97       	sbiw	r30, 0x02	; 2
    4c22:	20 81       	ld	r18, Z
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	2f 5f       	subi	r18, 0xFF	; 255
    4c28:	3f 4f       	sbci	r19, 0xFF	; 255
    4c2a:	41 e1       	ldi	r20, 0x11	; 17
    4c2c:	42 9f       	mul	r20, r18
    4c2e:	f0 01       	movw	r30, r0
    4c30:	43 9f       	mul	r20, r19
    4c32:	f0 0d       	add	r31, r0
    4c34:	11 24       	eor	r1, r1
    4c36:	e8 0f       	add	r30, r24
    4c38:	f9 1f       	adc	r31, r25
    4c3a:	01 90       	ld	r0, Z+
    4c3c:	f0 81       	ld	r31, Z
    4c3e:	e0 2d       	mov	r30, r0
    4c40:	21 e0       	ldi	r18, 0x01	; 1
        /** Dequeue the request from the list*/
        spi_master_dequeue(spi_interface);
    4c42:	20 83       	st	Z, r18
    }
}
    4c44:	d3 de       	rcall	.-602    	; 0x49ec <spi_master_dequeue>
    4c46:	df 91       	pop	r29
    4c48:	cf 91       	pop	r28
    4c4a:	1f 91       	pop	r17
    4c4c:	0f 91       	pop	r16
    4c4e:	08 95       	ret

00004c50 <spi_master_blocking_send_request>:
                                 volatile void *sendBuff,
                                 uint16_t sendLen,
                                 volatile void *recvBuff,
                                 uint16_t recvLen,
                                 volatile Bool *complete)
{
    4c50:	8f 92       	push	r8
    4c52:	9f 92       	push	r9
    4c54:	af 92       	push	r10
    4c56:	cf 92       	push	r12
    4c58:	df 92       	push	r13
    4c5a:	ef 92       	push	r14
    4c5c:	ff 92       	push	r15
    4c5e:	0f 93       	push	r16
    4c60:	1f 93       	push	r17
    4c62:	cf 93       	push	r28
    4c64:	df 93       	push	r29
    4c66:	4c 01       	movw	r8, r24
    4c68:	e6 01       	movw	r28, r12
    /** In the future we might add a timeout..? */
    Bool retVal = true;

    spi_master_enqueue_internal(spi_interface, csInfo, sendBuff, sendLen, recvBuff, recvLen, complete, false);
    4c6a:	a1 2c       	mov	r10, r1
    spi_master_initate_request(spi_interface);
    4c6c:	01 de       	rcall	.-1022   	; 0x4870 <spi_master_enqueue_internal>
    4c6e:	c4 01       	movw	r24, r8

    while((*complete) != true)
    4c70:	e9 de       	rcall	.-558    	; 0x4a44 <spi_master_initate_request>
    4c72:	00 c0       	rjmp	.+0      	; 0x4c74 <spi_master_blocking_send_request+0x24>
    4c74:	88 81       	ld	r24, Y
    4c76:	81 30       	cpi	r24, 0x01	; 1
    }
    
    /** The ISR routine dequeues the request */

    return retVal;
}
    4c78:	e9 f7       	brne	.-6      	; 0x4c74 <spi_master_blocking_send_request+0x24>
    4c7a:	df 91       	pop	r29
    4c7c:	cf 91       	pop	r28
    4c7e:	1f 91       	pop	r17
    4c80:	0f 91       	pop	r16
    4c82:	ff 90       	pop	r15
    4c84:	ef 90       	pop	r14
    4c86:	df 90       	pop	r13
    4c88:	cf 90       	pop	r12
    4c8a:	af 90       	pop	r10
    4c8c:	9f 90       	pop	r9
    4c8e:	8f 90       	pop	r8
    4c90:	08 95       	ret

00004c92 <spi_master_blocking_send_req_cslow>:
                                 volatile void *sendBuff,
                                 uint16_t sendLen,
                                 volatile void *recvBuff,
                                 uint16_t recvLen,
                                 volatile Bool *complete)
{
    4c92:	8f 92       	push	r8
    4c94:	9f 92       	push	r9
    4c96:	af 92       	push	r10
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	4c 01       	movw	r8, r24
    4caa:	e6 01       	movw	r28, r12
    /** In the future we might add a timeout..? */
    Bool retVal = true;

    spi_master_enqueue_internal(spi_interface, csInfo, sendBuff, sendLen, recvBuff, recvLen, complete, true);
    4cac:	aa 24       	eor	r10, r10
    4cae:	a3 94       	inc	r10
    spi_master_initate_request(spi_interface);
    4cb0:	df dd       	rcall	.-1090   	; 0x4870 <spi_master_enqueue_internal>
    4cb2:	c4 01       	movw	r24, r8

    while((*complete) != true)
    4cb4:	c7 de       	rcall	.-626    	; 0x4a44 <spi_master_initate_request>
    4cb6:	00 c0       	rjmp	.+0      	; 0x4cb8 <spi_master_blocking_send_req_cslow+0x26>
    4cb8:	88 81       	ld	r24, Y
    4cba:	81 30       	cpi	r24, 0x01	; 1
    }
    
    /** The ISR routine dequeues the request */

    return retVal;
}
    4cbc:	e9 f7       	brne	.-6      	; 0x4cb8 <spi_master_blocking_send_req_cslow+0x26>
    4cbe:	df 91       	pop	r29
    4cc0:	cf 91       	pop	r28
    4cc2:	1f 91       	pop	r17
    4cc4:	0f 91       	pop	r16
    4cc6:	ff 90       	pop	r15
    4cc8:	ef 90       	pop	r14
    4cca:	df 90       	pop	r13
    4ccc:	cf 90       	pop	r12
    4cce:	af 90       	pop	r10
    4cd0:	9f 90       	pop	r9
    4cd2:	8f 90       	pop	r8
    4cd4:	08 95       	ret

00004cd6 <__udivmodhi4>:
    4cd6:	aa 1b       	sub	r26, r26
    4cd8:	bb 1b       	sub	r27, r27
    4cda:	51 e1       	ldi	r21, 0x11	; 17
    4cdc:	07 c0       	rjmp	.+14     	; 0x4cec <__udivmodhi4_ep>

00004cde <__udivmodhi4_loop>:
    4cde:	aa 1f       	adc	r26, r26
    4ce0:	bb 1f       	adc	r27, r27
    4ce2:	a6 17       	cp	r26, r22
    4ce4:	b7 07       	cpc	r27, r23
    4ce6:	10 f0       	brcs	.+4      	; 0x4cec <__udivmodhi4_ep>
    4ce8:	a6 1b       	sub	r26, r22
    4cea:	b7 0b       	sbc	r27, r23

00004cec <__udivmodhi4_ep>:
    4cec:	88 1f       	adc	r24, r24
    4cee:	99 1f       	adc	r25, r25
    4cf0:	5a 95       	dec	r21
    4cf2:	a9 f7       	brne	.-22     	; 0x4cde <__udivmodhi4_loop>
    4cf4:	80 95       	com	r24
    4cf6:	90 95       	com	r25
    4cf8:	bc 01       	movw	r22, r24
    4cfa:	cd 01       	movw	r24, r26
    4cfc:	08 95       	ret

00004cfe <__tablejump2__>:
    4cfe:	ee 0f       	add	r30, r30
    4d00:	ff 1f       	adc	r31, r31
    4d02:	88 1f       	adc	r24, r24
    4d04:	8b bf       	out	0x3b, r24	; 59
    4d06:	07 90       	elpm	r0, Z+
    4d08:	f6 91       	elpm	r31, Z
    4d0a:	e0 2d       	mov	r30, r0
    4d0c:	19 94       	eijmp

00004d0e <__muluhisi3>:
    4d0e:	a3 d0       	rcall	.+326    	; 0x4e56 <__umulhisi3>
    4d10:	a5 9f       	mul	r26, r21
    4d12:	90 0d       	add	r25, r0
    4d14:	b4 9f       	mul	r27, r20
    4d16:	90 0d       	add	r25, r0
    4d18:	a4 9f       	mul	r26, r20
    4d1a:	80 0d       	add	r24, r0
    4d1c:	91 1d       	adc	r25, r1
    4d1e:	11 24       	eor	r1, r1
    4d20:	08 95       	ret

00004d22 <__muldi3>:
    4d22:	df 93       	push	r29
    4d24:	cf 93       	push	r28
    4d26:	1f 93       	push	r17
    4d28:	0f 93       	push	r16
    4d2a:	9a 9d       	mul	r25, r10
    4d2c:	f0 2d       	mov	r31, r0
    4d2e:	21 9f       	mul	r18, r17
    4d30:	f0 0d       	add	r31, r0
    4d32:	8b 9d       	mul	r24, r11
    4d34:	f0 0d       	add	r31, r0
    4d36:	8a 9d       	mul	r24, r10
    4d38:	e0 2d       	mov	r30, r0
    4d3a:	f1 0d       	add	r31, r1
    4d3c:	03 9f       	mul	r16, r19
    4d3e:	f0 0d       	add	r31, r0
    4d40:	02 9f       	mul	r16, r18
    4d42:	e0 0d       	add	r30, r0
    4d44:	f1 1d       	adc	r31, r1
    4d46:	4e 9d       	mul	r20, r14
    4d48:	e0 0d       	add	r30, r0
    4d4a:	f1 1d       	adc	r31, r1
    4d4c:	5e 9d       	mul	r21, r14
    4d4e:	f0 0d       	add	r31, r0
    4d50:	4f 9d       	mul	r20, r15
    4d52:	f0 0d       	add	r31, r0
    4d54:	7f 93       	push	r23
    4d56:	6f 93       	push	r22
    4d58:	bf 92       	push	r11
    4d5a:	af 92       	push	r10
    4d5c:	5f 93       	push	r21
    4d5e:	4f 93       	push	r20
    4d60:	d5 01       	movw	r26, r10
    4d62:	79 d0       	rcall	.+242    	; 0x4e56 <__umulhisi3>
    4d64:	8b 01       	movw	r16, r22
    4d66:	ac 01       	movw	r20, r24
    4d68:	d7 01       	movw	r26, r14
    4d6a:	75 d0       	rcall	.+234    	; 0x4e56 <__umulhisi3>
    4d6c:	eb 01       	movw	r28, r22
    4d6e:	e8 0f       	add	r30, r24
    4d70:	f9 1f       	adc	r31, r25
    4d72:	d6 01       	movw	r26, r12
    4d74:	1f d0       	rcall	.+62     	; 0x4db4 <__muldi3_6>
    4d76:	2f 91       	pop	r18
    4d78:	3f 91       	pop	r19
    4d7a:	d6 01       	movw	r26, r12
    4d7c:	6c d0       	rcall	.+216    	; 0x4e56 <__umulhisi3>
    4d7e:	c6 0f       	add	r28, r22
    4d80:	d7 1f       	adc	r29, r23
    4d82:	e8 1f       	adc	r30, r24
    4d84:	f9 1f       	adc	r31, r25
    4d86:	af 91       	pop	r26
    4d88:	bf 91       	pop	r27
    4d8a:	14 d0       	rcall	.+40     	; 0x4db4 <__muldi3_6>
    4d8c:	2f 91       	pop	r18
    4d8e:	3f 91       	pop	r19
    4d90:	62 d0       	rcall	.+196    	; 0x4e56 <__umulhisi3>
    4d92:	c6 0f       	add	r28, r22
    4d94:	d7 1f       	adc	r29, r23
    4d96:	e8 1f       	adc	r30, r24
    4d98:	f9 1f       	adc	r31, r25
    4d9a:	d6 01       	movw	r26, r12
    4d9c:	5c d0       	rcall	.+184    	; 0x4e56 <__umulhisi3>
    4d9e:	e6 0f       	add	r30, r22
    4da0:	f7 1f       	adc	r31, r23
    4da2:	98 01       	movw	r18, r16
    4da4:	be 01       	movw	r22, r28
    4da6:	cf 01       	movw	r24, r30
    4da8:	11 24       	eor	r1, r1
    4daa:	0f 91       	pop	r16
    4dac:	1f 91       	pop	r17
    4dae:	cf 91       	pop	r28
    4db0:	df 91       	pop	r29
    4db2:	08 95       	ret

00004db4 <__muldi3_6>:
    4db4:	50 d0       	rcall	.+160    	; 0x4e56 <__umulhisi3>
    4db6:	46 0f       	add	r20, r22
    4db8:	57 1f       	adc	r21, r23
    4dba:	c8 1f       	adc	r28, r24
    4dbc:	d9 1f       	adc	r29, r25
    4dbe:	08 f4       	brcc	.+2      	; 0x4dc2 <__muldi3_6+0xe>
    4dc0:	31 96       	adiw	r30, 0x01	; 1
    4dc2:	08 95       	ret

00004dc4 <__ashldi3>:
    4dc4:	0f 93       	push	r16
    4dc6:	08 30       	cpi	r16, 0x08	; 8
    4dc8:	90 f0       	brcs	.+36     	; 0x4dee <__ashldi3+0x2a>
    4dca:	98 2f       	mov	r25, r24
    4dcc:	87 2f       	mov	r24, r23
    4dce:	76 2f       	mov	r23, r22
    4dd0:	65 2f       	mov	r22, r21
    4dd2:	54 2f       	mov	r21, r20
    4dd4:	43 2f       	mov	r20, r19
    4dd6:	32 2f       	mov	r19, r18
    4dd8:	22 27       	eor	r18, r18
    4dda:	08 50       	subi	r16, 0x08	; 8
    4ddc:	f4 cf       	rjmp	.-24     	; 0x4dc6 <__ashldi3+0x2>
    4dde:	22 0f       	add	r18, r18
    4de0:	33 1f       	adc	r19, r19
    4de2:	44 1f       	adc	r20, r20
    4de4:	55 1f       	adc	r21, r21
    4de6:	66 1f       	adc	r22, r22
    4de8:	77 1f       	adc	r23, r23
    4dea:	88 1f       	adc	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	0a 95       	dec	r16
    4df0:	b2 f7       	brpl	.-20     	; 0x4dde <__ashldi3+0x1a>
    4df2:	0f 91       	pop	r16
    4df4:	08 95       	ret

00004df6 <__ashrdi3>:
    4df6:	97 fb       	bst	r25, 7
    4df8:	10 f8       	bld	r1, 0

00004dfa <__lshrdi3>:
    4dfa:	16 94       	lsr	r1
    4dfc:	00 08       	sbc	r0, r0
    4dfe:	0f 93       	push	r16
    4e00:	08 30       	cpi	r16, 0x08	; 8
    4e02:	98 f0       	brcs	.+38     	; 0x4e2a <__lshrdi3+0x30>
    4e04:	08 50       	subi	r16, 0x08	; 8
    4e06:	23 2f       	mov	r18, r19
    4e08:	34 2f       	mov	r19, r20
    4e0a:	45 2f       	mov	r20, r21
    4e0c:	56 2f       	mov	r21, r22
    4e0e:	67 2f       	mov	r22, r23
    4e10:	78 2f       	mov	r23, r24
    4e12:	89 2f       	mov	r24, r25
    4e14:	90 2d       	mov	r25, r0
    4e16:	f4 cf       	rjmp	.-24     	; 0x4e00 <__lshrdi3+0x6>
    4e18:	05 94       	asr	r0
    4e1a:	97 95       	ror	r25
    4e1c:	87 95       	ror	r24
    4e1e:	77 95       	ror	r23
    4e20:	67 95       	ror	r22
    4e22:	57 95       	ror	r21
    4e24:	47 95       	ror	r20
    4e26:	37 95       	ror	r19
    4e28:	27 95       	ror	r18
    4e2a:	0a 95       	dec	r16
    4e2c:	aa f7       	brpl	.-22     	; 0x4e18 <__lshrdi3+0x1e>
    4e2e:	0f 91       	pop	r16
    4e30:	08 95       	ret

00004e32 <__adddi3>:
    4e32:	2a 0d       	add	r18, r10
    4e34:	3b 1d       	adc	r19, r11
    4e36:	4c 1d       	adc	r20, r12
    4e38:	5d 1d       	adc	r21, r13
    4e3a:	6e 1d       	adc	r22, r14
    4e3c:	7f 1d       	adc	r23, r15
    4e3e:	80 1f       	adc	r24, r16
    4e40:	91 1f       	adc	r25, r17
    4e42:	08 95       	ret

00004e44 <__subdi3>:
    4e44:	2a 19       	sub	r18, r10
    4e46:	3b 09       	sbc	r19, r11
    4e48:	4c 09       	sbc	r20, r12
    4e4a:	5d 09       	sbc	r21, r13
    4e4c:	6e 09       	sbc	r22, r14
    4e4e:	7f 09       	sbc	r23, r15
    4e50:	80 0b       	sbc	r24, r16
    4e52:	91 0b       	sbc	r25, r17
    4e54:	08 95       	ret

00004e56 <__umulhisi3>:
    4e56:	a2 9f       	mul	r26, r18
    4e58:	b0 01       	movw	r22, r0
    4e5a:	b3 9f       	mul	r27, r19
    4e5c:	c0 01       	movw	r24, r0
    4e5e:	a3 9f       	mul	r26, r19
    4e60:	70 0d       	add	r23, r0
    4e62:	81 1d       	adc	r24, r1
    4e64:	11 24       	eor	r1, r1
    4e66:	91 1d       	adc	r25, r1
    4e68:	b2 9f       	mul	r27, r18
    4e6a:	70 0d       	add	r23, r0
    4e6c:	81 1d       	adc	r24, r1
    4e6e:	11 24       	eor	r1, r1
    4e70:	91 1d       	adc	r25, r1
    4e72:	08 95       	ret

00004e74 <setjmp>:
    4e74:	dc 01       	movw	r26, r24
    4e76:	2d 92       	st	X+, r2
    4e78:	3d 92       	st	X+, r3
    4e7a:	4d 92       	st	X+, r4
    4e7c:	5d 92       	st	X+, r5
    4e7e:	6d 92       	st	X+, r6
    4e80:	7d 92       	st	X+, r7
    4e82:	8d 92       	st	X+, r8
    4e84:	9d 92       	st	X+, r9
    4e86:	ad 92       	st	X+, r10
    4e88:	bd 92       	st	X+, r11
    4e8a:	cd 92       	st	X+, r12
    4e8c:	dd 92       	st	X+, r13
    4e8e:	ed 92       	st	X+, r14
    4e90:	fd 92       	st	X+, r15
    4e92:	0d 93       	st	X+, r16
    4e94:	1d 93       	st	X+, r17
    4e96:	cd 93       	st	X+, r28
    4e98:	dd 93       	st	X+, r29
    4e9a:	0f 90       	pop	r0
    4e9c:	ff 91       	pop	r31
    4e9e:	ef 91       	pop	r30
    4ea0:	8d b7       	in	r24, 0x3d	; 61
    4ea2:	8d 93       	st	X+, r24
    4ea4:	8e b7       	in	r24, 0x3e	; 62
    4ea6:	8d 93       	st	X+, r24
    4ea8:	8f b7       	in	r24, 0x3f	; 63
    4eaa:	8d 93       	st	X+, r24
    4eac:	ed 93       	st	X+, r30
    4eae:	fd 93       	st	X+, r31
    4eb0:	88 27       	eor	r24, r24
    4eb2:	99 27       	eor	r25, r25
    4eb4:	0d 92       	st	X+, r0
    4eb6:	20 c0       	rjmp	.+64     	; 0x4ef8 <longjmp+0x40>

00004eb8 <longjmp>:
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	81 30       	cpi	r24, 0x01	; 1
    4ebe:	91 05       	cpc	r25, r1
    4ec0:	81 1d       	adc	r24, r1
    4ec2:	2d 90       	ld	r2, X+
    4ec4:	3d 90       	ld	r3, X+
    4ec6:	4d 90       	ld	r4, X+
    4ec8:	5d 90       	ld	r5, X+
    4eca:	6d 90       	ld	r6, X+
    4ecc:	7d 90       	ld	r7, X+
    4ece:	8d 90       	ld	r8, X+
    4ed0:	9d 90       	ld	r9, X+
    4ed2:	ad 90       	ld	r10, X+
    4ed4:	bd 90       	ld	r11, X+
    4ed6:	cd 90       	ld	r12, X+
    4ed8:	dd 90       	ld	r13, X+
    4eda:	ed 90       	ld	r14, X+
    4edc:	fd 90       	ld	r15, X+
    4ede:	0d 91       	ld	r16, X+
    4ee0:	1d 91       	ld	r17, X+
    4ee2:	cd 91       	ld	r28, X+
    4ee4:	dd 91       	ld	r29, X+
    4ee6:	ed 91       	ld	r30, X+
    4ee8:	fd 91       	ld	r31, X+
    4eea:	0d 90       	ld	r0, X+
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	ed bf       	out	0x3d, r30	; 61
    4ef0:	fe bf       	out	0x3e, r31	; 62
    4ef2:	ed 91       	ld	r30, X+
    4ef4:	fd 91       	ld	r31, X+
    4ef6:	0d 90       	ld	r0, X+
    4ef8:	ef 93       	push	r30
    4efa:	ff 93       	push	r31
    4efc:	0f 92       	push	r0
    4efe:	08 95       	ret

00004f00 <memcpy>:
    4f00:	fb 01       	movw	r30, r22
    4f02:	dc 01       	movw	r26, r24
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <memcpy+0xa>
    4f06:	01 90       	ld	r0, Z+
    4f08:	0d 92       	st	X+, r0
    4f0a:	41 50       	subi	r20, 0x01	; 1
    4f0c:	50 40       	sbci	r21, 0x00	; 0
    4f0e:	d8 f7       	brcc	.-10     	; 0x4f06 <memcpy+0x6>
    4f10:	08 95       	ret

00004f12 <fputc>:
    4f12:	0f 93       	push	r16
    4f14:	1f 93       	push	r17
    4f16:	cf 93       	push	r28
    4f18:	df 93       	push	r29
    4f1a:	fb 01       	movw	r30, r22
    4f1c:	23 81       	ldd	r18, Z+3	; 0x03
    4f1e:	21 fd       	sbrc	r18, 1
    4f20:	03 c0       	rjmp	.+6      	; 0x4f28 <fputc+0x16>
    4f22:	8f ef       	ldi	r24, 0xFF	; 255
    4f24:	9f ef       	ldi	r25, 0xFF	; 255
    4f26:	2c c0       	rjmp	.+88     	; 0x4f80 <fputc+0x6e>
    4f28:	22 ff       	sbrs	r18, 2
    4f2a:	16 c0       	rjmp	.+44     	; 0x4f58 <fputc+0x46>
    4f2c:	46 81       	ldd	r20, Z+6	; 0x06
    4f2e:	57 81       	ldd	r21, Z+7	; 0x07
    4f30:	24 81       	ldd	r18, Z+4	; 0x04
    4f32:	35 81       	ldd	r19, Z+5	; 0x05
    4f34:	42 17       	cp	r20, r18
    4f36:	53 07       	cpc	r21, r19
    4f38:	44 f4       	brge	.+16     	; 0x4f4a <fputc+0x38>
    4f3a:	a0 81       	ld	r26, Z
    4f3c:	b1 81       	ldd	r27, Z+1	; 0x01
    4f3e:	9d 01       	movw	r18, r26
    4f40:	2f 5f       	subi	r18, 0xFF	; 255
    4f42:	3f 4f       	sbci	r19, 0xFF	; 255
    4f44:	20 83       	st	Z, r18
    4f46:	31 83       	std	Z+1, r19	; 0x01
    4f48:	8c 93       	st	X, r24
    4f4a:	26 81       	ldd	r18, Z+6	; 0x06
    4f4c:	37 81       	ldd	r19, Z+7	; 0x07
    4f4e:	2f 5f       	subi	r18, 0xFF	; 255
    4f50:	3f 4f       	sbci	r19, 0xFF	; 255
    4f52:	26 83       	std	Z+6, r18	; 0x06
    4f54:	37 83       	std	Z+7, r19	; 0x07
    4f56:	14 c0       	rjmp	.+40     	; 0x4f80 <fputc+0x6e>
    4f58:	8b 01       	movw	r16, r22
    4f5a:	ec 01       	movw	r28, r24
    4f5c:	fb 01       	movw	r30, r22
    4f5e:	00 84       	ldd	r0, Z+8	; 0x08
    4f60:	f1 85       	ldd	r31, Z+9	; 0x09
    4f62:	e0 2d       	mov	r30, r0
    4f64:	19 95       	eicall
    4f66:	89 2b       	or	r24, r25
    4f68:	e1 f6       	brne	.-72     	; 0x4f22 <fputc+0x10>
    4f6a:	d8 01       	movw	r26, r16
    4f6c:	16 96       	adiw	r26, 0x06	; 6
    4f6e:	8d 91       	ld	r24, X+
    4f70:	9c 91       	ld	r25, X
    4f72:	17 97       	sbiw	r26, 0x07	; 7
    4f74:	01 96       	adiw	r24, 0x01	; 1
    4f76:	16 96       	adiw	r26, 0x06	; 6
    4f78:	8d 93       	st	X+, r24
    4f7a:	9c 93       	st	X, r25
    4f7c:	17 97       	sbiw	r26, 0x07	; 7
    4f7e:	ce 01       	movw	r24, r28
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	1f 91       	pop	r17
    4f86:	0f 91       	pop	r16
    4f88:	08 95       	ret

00004f8a <printf_P>:
    4f8a:	0f 93       	push	r16
    4f8c:	1f 93       	push	r17
    4f8e:	cf 93       	push	r28
    4f90:	df 93       	push	r29
    4f92:	cd b7       	in	r28, 0x3d	; 61
    4f94:	de b7       	in	r29, 0x3e	; 62
    4f96:	ae 01       	movw	r20, r28
    4f98:	48 5f       	subi	r20, 0xF8	; 248
    4f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f9c:	da 01       	movw	r26, r20
    4f9e:	6d 91       	ld	r22, X+
    4fa0:	7d 91       	ld	r23, X+
    4fa2:	ad 01       	movw	r20, r26
    4fa4:	0f e1       	ldi	r16, 0x1F	; 31
    4fa6:	1b e2       	ldi	r17, 0x2B	; 43
    4fa8:	f8 01       	movw	r30, r16
    4faa:	82 81       	ldd	r24, Z+2	; 0x02
    4fac:	93 81       	ldd	r25, Z+3	; 0x03
    4fae:	dc 01       	movw	r26, r24
    4fb0:	13 96       	adiw	r26, 0x03	; 3
    4fb2:	2c 91       	ld	r18, X
    4fb4:	13 97       	sbiw	r26, 0x03	; 3
    4fb6:	28 60       	ori	r18, 0x08	; 8
    4fb8:	13 96       	adiw	r26, 0x03	; 3
    4fba:	2c 93       	st	X, r18
    4fbc:	1b d0       	rcall	.+54     	; 0x4ff4 <vfprintf>
    4fbe:	d8 01       	movw	r26, r16
    4fc0:	12 96       	adiw	r26, 0x02	; 2
    4fc2:	ed 91       	ld	r30, X+
    4fc4:	fc 91       	ld	r31, X
    4fc6:	13 97       	sbiw	r26, 0x03	; 3
    4fc8:	23 81       	ldd	r18, Z+3	; 0x03
    4fca:	27 7f       	andi	r18, 0xF7	; 247
    4fcc:	23 83       	std	Z+3, r18	; 0x03
    4fce:	df 91       	pop	r29
    4fd0:	cf 91       	pop	r28
    4fd2:	1f 91       	pop	r17
    4fd4:	0f 91       	pop	r16
    4fd6:	08 95       	ret

00004fd8 <vfprintf_P>:
    4fd8:	cf 93       	push	r28
    4fda:	df 93       	push	r29
    4fdc:	ec 01       	movw	r28, r24
    4fde:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe0:	88 60       	ori	r24, 0x08	; 8
    4fe2:	8b 83       	std	Y+3, r24	; 0x03
    4fe4:	ce 01       	movw	r24, r28
    4fe6:	06 d0       	rcall	.+12     	; 0x4ff4 <vfprintf>
    4fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    4fea:	27 7f       	andi	r18, 0xF7	; 247
    4fec:	2b 83       	std	Y+3, r18	; 0x03
    4fee:	df 91       	pop	r29
    4ff0:	cf 91       	pop	r28
    4ff2:	08 95       	ret

00004ff4 <vfprintf>:
    4ff4:	2f 92       	push	r2
    4ff6:	3f 92       	push	r3
    4ff8:	4f 92       	push	r4
    4ffa:	5f 92       	push	r5
    4ffc:	6f 92       	push	r6
    4ffe:	7f 92       	push	r7
    5000:	8f 92       	push	r8
    5002:	9f 92       	push	r9
    5004:	af 92       	push	r10
    5006:	bf 92       	push	r11
    5008:	cf 92       	push	r12
    500a:	df 92       	push	r13
    500c:	ef 92       	push	r14
    500e:	ff 92       	push	r15
    5010:	0f 93       	push	r16
    5012:	1f 93       	push	r17
    5014:	cf 93       	push	r28
    5016:	df 93       	push	r29
    5018:	cd b7       	in	r28, 0x3d	; 61
    501a:	de b7       	in	r29, 0x3e	; 62
    501c:	2b 97       	sbiw	r28, 0x0b	; 11
    501e:	cd bf       	out	0x3d, r28	; 61
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	6c 01       	movw	r12, r24
    5024:	7b 01       	movw	r14, r22
    5026:	8a 01       	movw	r16, r20
    5028:	fc 01       	movw	r30, r24
    502a:	16 82       	std	Z+6, r1	; 0x06
    502c:	17 82       	std	Z+7, r1	; 0x07
    502e:	83 81       	ldd	r24, Z+3	; 0x03
    5030:	81 ff       	sbrs	r24, 1
    5032:	bf c1       	rjmp	.+894    	; 0x53b2 <vfprintf+0x3be>
    5034:	ce 01       	movw	r24, r28
    5036:	01 96       	adiw	r24, 0x01	; 1
    5038:	3c 01       	movw	r6, r24
    503a:	f6 01       	movw	r30, r12
    503c:	93 81       	ldd	r25, Z+3	; 0x03
    503e:	f7 01       	movw	r30, r14
    5040:	93 fd       	sbrc	r25, 3
    5042:	85 91       	lpm	r24, Z+
    5044:	93 ff       	sbrs	r25, 3
    5046:	81 91       	ld	r24, Z+
    5048:	7f 01       	movw	r14, r30
    504a:	88 23       	and	r24, r24
    504c:	09 f4       	brne	.+2      	; 0x5050 <vfprintf+0x5c>
    504e:	ad c1       	rjmp	.+858    	; 0x53aa <vfprintf+0x3b6>
    5050:	85 32       	cpi	r24, 0x25	; 37
    5052:	39 f4       	brne	.+14     	; 0x5062 <vfprintf+0x6e>
    5054:	93 fd       	sbrc	r25, 3
    5056:	85 91       	lpm	r24, Z+
    5058:	93 ff       	sbrs	r25, 3
    505a:	81 91       	ld	r24, Z+
    505c:	7f 01       	movw	r14, r30
    505e:	85 32       	cpi	r24, 0x25	; 37
    5060:	21 f4       	brne	.+8      	; 0x506a <vfprintf+0x76>
    5062:	b6 01       	movw	r22, r12
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	55 df       	rcall	.-342    	; 0x4f12 <fputc>
    5068:	e8 cf       	rjmp	.-48     	; 0x503a <vfprintf+0x46>
    506a:	91 2c       	mov	r9, r1
    506c:	21 2c       	mov	r2, r1
    506e:	31 2c       	mov	r3, r1
    5070:	ff e1       	ldi	r31, 0x1F	; 31
    5072:	f3 15       	cp	r31, r3
    5074:	d8 f0       	brcs	.+54     	; 0x50ac <vfprintf+0xb8>
    5076:	8b 32       	cpi	r24, 0x2B	; 43
    5078:	79 f0       	breq	.+30     	; 0x5098 <vfprintf+0xa4>
    507a:	38 f4       	brcc	.+14     	; 0x508a <vfprintf+0x96>
    507c:	80 32       	cpi	r24, 0x20	; 32
    507e:	79 f0       	breq	.+30     	; 0x509e <vfprintf+0xaa>
    5080:	83 32       	cpi	r24, 0x23	; 35
    5082:	a1 f4       	brne	.+40     	; 0x50ac <vfprintf+0xb8>
    5084:	23 2d       	mov	r18, r3
    5086:	20 61       	ori	r18, 0x10	; 16
    5088:	1d c0       	rjmp	.+58     	; 0x50c4 <vfprintf+0xd0>
    508a:	8d 32       	cpi	r24, 0x2D	; 45
    508c:	61 f0       	breq	.+24     	; 0x50a6 <vfprintf+0xb2>
    508e:	80 33       	cpi	r24, 0x30	; 48
    5090:	69 f4       	brne	.+26     	; 0x50ac <vfprintf+0xb8>
    5092:	23 2d       	mov	r18, r3
    5094:	21 60       	ori	r18, 0x01	; 1
    5096:	16 c0       	rjmp	.+44     	; 0x50c4 <vfprintf+0xd0>
    5098:	83 2d       	mov	r24, r3
    509a:	82 60       	ori	r24, 0x02	; 2
    509c:	38 2e       	mov	r3, r24
    509e:	e3 2d       	mov	r30, r3
    50a0:	e4 60       	ori	r30, 0x04	; 4
    50a2:	3e 2e       	mov	r3, r30
    50a4:	2a c0       	rjmp	.+84     	; 0x50fa <vfprintf+0x106>
    50a6:	f3 2d       	mov	r31, r3
    50a8:	f8 60       	ori	r31, 0x08	; 8
    50aa:	1d c0       	rjmp	.+58     	; 0x50e6 <vfprintf+0xf2>
    50ac:	37 fc       	sbrc	r3, 7
    50ae:	2d c0       	rjmp	.+90     	; 0x510a <vfprintf+0x116>
    50b0:	20 ed       	ldi	r18, 0xD0	; 208
    50b2:	28 0f       	add	r18, r24
    50b4:	2a 30       	cpi	r18, 0x0A	; 10
    50b6:	40 f0       	brcs	.+16     	; 0x50c8 <vfprintf+0xd4>
    50b8:	8e 32       	cpi	r24, 0x2E	; 46
    50ba:	b9 f4       	brne	.+46     	; 0x50ea <vfprintf+0xf6>
    50bc:	36 fc       	sbrc	r3, 6
    50be:	75 c1       	rjmp	.+746    	; 0x53aa <vfprintf+0x3b6>
    50c0:	23 2d       	mov	r18, r3
    50c2:	20 64       	ori	r18, 0x40	; 64
    50c4:	32 2e       	mov	r3, r18
    50c6:	19 c0       	rjmp	.+50     	; 0x50fa <vfprintf+0x106>
    50c8:	36 fe       	sbrs	r3, 6
    50ca:	06 c0       	rjmp	.+12     	; 0x50d8 <vfprintf+0xe4>
    50cc:	8a e0       	ldi	r24, 0x0A	; 10
    50ce:	98 9e       	mul	r9, r24
    50d0:	20 0d       	add	r18, r0
    50d2:	11 24       	eor	r1, r1
    50d4:	92 2e       	mov	r9, r18
    50d6:	11 c0       	rjmp	.+34     	; 0x50fa <vfprintf+0x106>
    50d8:	ea e0       	ldi	r30, 0x0A	; 10
    50da:	2e 9e       	mul	r2, r30
    50dc:	20 0d       	add	r18, r0
    50de:	11 24       	eor	r1, r1
    50e0:	22 2e       	mov	r2, r18
    50e2:	f3 2d       	mov	r31, r3
    50e4:	f0 62       	ori	r31, 0x20	; 32
    50e6:	3f 2e       	mov	r3, r31
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <vfprintf+0x106>
    50ea:	8c 36       	cpi	r24, 0x6C	; 108
    50ec:	21 f4       	brne	.+8      	; 0x50f6 <vfprintf+0x102>
    50ee:	83 2d       	mov	r24, r3
    50f0:	80 68       	ori	r24, 0x80	; 128
    50f2:	38 2e       	mov	r3, r24
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <vfprintf+0x106>
    50f6:	88 36       	cpi	r24, 0x68	; 104
    50f8:	41 f4       	brne	.+16     	; 0x510a <vfprintf+0x116>
    50fa:	f7 01       	movw	r30, r14
    50fc:	93 fd       	sbrc	r25, 3
    50fe:	85 91       	lpm	r24, Z+
    5100:	93 ff       	sbrs	r25, 3
    5102:	81 91       	ld	r24, Z+
    5104:	7f 01       	movw	r14, r30
    5106:	81 11       	cpse	r24, r1
    5108:	b3 cf       	rjmp	.-154    	; 0x5070 <vfprintf+0x7c>
    510a:	98 2f       	mov	r25, r24
    510c:	9f 7d       	andi	r25, 0xDF	; 223
    510e:	95 54       	subi	r25, 0x45	; 69
    5110:	93 30       	cpi	r25, 0x03	; 3
    5112:	28 f4       	brcc	.+10     	; 0x511e <vfprintf+0x12a>
    5114:	0c 5f       	subi	r16, 0xFC	; 252
    5116:	1f 4f       	sbci	r17, 0xFF	; 255
    5118:	9f e3       	ldi	r25, 0x3F	; 63
    511a:	99 83       	std	Y+1, r25	; 0x01
    511c:	0d c0       	rjmp	.+26     	; 0x5138 <vfprintf+0x144>
    511e:	83 36       	cpi	r24, 0x63	; 99
    5120:	31 f0       	breq	.+12     	; 0x512e <vfprintf+0x13a>
    5122:	83 37       	cpi	r24, 0x73	; 115
    5124:	71 f0       	breq	.+28     	; 0x5142 <vfprintf+0x14e>
    5126:	83 35       	cpi	r24, 0x53	; 83
    5128:	09 f0       	breq	.+2      	; 0x512c <vfprintf+0x138>
    512a:	55 c0       	rjmp	.+170    	; 0x51d6 <vfprintf+0x1e2>
    512c:	20 c0       	rjmp	.+64     	; 0x516e <vfprintf+0x17a>
    512e:	f8 01       	movw	r30, r16
    5130:	80 81       	ld	r24, Z
    5132:	89 83       	std	Y+1, r24	; 0x01
    5134:	0e 5f       	subi	r16, 0xFE	; 254
    5136:	1f 4f       	sbci	r17, 0xFF	; 255
    5138:	88 24       	eor	r8, r8
    513a:	83 94       	inc	r8
    513c:	91 2c       	mov	r9, r1
    513e:	53 01       	movw	r10, r6
    5140:	12 c0       	rjmp	.+36     	; 0x5166 <vfprintf+0x172>
    5142:	28 01       	movw	r4, r16
    5144:	f2 e0       	ldi	r31, 0x02	; 2
    5146:	4f 0e       	add	r4, r31
    5148:	51 1c       	adc	r5, r1
    514a:	f8 01       	movw	r30, r16
    514c:	a0 80       	ld	r10, Z
    514e:	b1 80       	ldd	r11, Z+1	; 0x01
    5150:	36 fe       	sbrs	r3, 6
    5152:	03 c0       	rjmp	.+6      	; 0x515a <vfprintf+0x166>
    5154:	69 2d       	mov	r22, r9
    5156:	70 e0       	ldi	r23, 0x00	; 0
    5158:	02 c0       	rjmp	.+4      	; 0x515e <vfprintf+0x16a>
    515a:	6f ef       	ldi	r22, 0xFF	; 255
    515c:	7f ef       	ldi	r23, 0xFF	; 255
    515e:	c5 01       	movw	r24, r10
    5160:	4b d1       	rcall	.+662    	; 0x53f8 <strnlen>
    5162:	4c 01       	movw	r8, r24
    5164:	82 01       	movw	r16, r4
    5166:	f3 2d       	mov	r31, r3
    5168:	ff 77       	andi	r31, 0x7F	; 127
    516a:	3f 2e       	mov	r3, r31
    516c:	15 c0       	rjmp	.+42     	; 0x5198 <vfprintf+0x1a4>
    516e:	28 01       	movw	r4, r16
    5170:	22 e0       	ldi	r18, 0x02	; 2
    5172:	42 0e       	add	r4, r18
    5174:	51 1c       	adc	r5, r1
    5176:	f8 01       	movw	r30, r16
    5178:	a0 80       	ld	r10, Z
    517a:	b1 80       	ldd	r11, Z+1	; 0x01
    517c:	36 fe       	sbrs	r3, 6
    517e:	03 c0       	rjmp	.+6      	; 0x5186 <vfprintf+0x192>
    5180:	69 2d       	mov	r22, r9
    5182:	70 e0       	ldi	r23, 0x00	; 0
    5184:	02 c0       	rjmp	.+4      	; 0x518a <vfprintf+0x196>
    5186:	6f ef       	ldi	r22, 0xFF	; 255
    5188:	7f ef       	ldi	r23, 0xFF	; 255
    518a:	c5 01       	movw	r24, r10
    518c:	2a d1       	rcall	.+596    	; 0x53e2 <strnlen_P>
    518e:	4c 01       	movw	r8, r24
    5190:	f3 2d       	mov	r31, r3
    5192:	f0 68       	ori	r31, 0x80	; 128
    5194:	3f 2e       	mov	r3, r31
    5196:	82 01       	movw	r16, r4
    5198:	33 fc       	sbrc	r3, 3
    519a:	19 c0       	rjmp	.+50     	; 0x51ce <vfprintf+0x1da>
    519c:	82 2d       	mov	r24, r2
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	88 16       	cp	r8, r24
    51a2:	99 06       	cpc	r9, r25
    51a4:	a0 f4       	brcc	.+40     	; 0x51ce <vfprintf+0x1da>
    51a6:	b6 01       	movw	r22, r12
    51a8:	80 e2       	ldi	r24, 0x20	; 32
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	b2 de       	rcall	.-668    	; 0x4f12 <fputc>
    51ae:	2a 94       	dec	r2
    51b0:	f5 cf       	rjmp	.-22     	; 0x519c <vfprintf+0x1a8>
    51b2:	f5 01       	movw	r30, r10
    51b4:	37 fc       	sbrc	r3, 7
    51b6:	85 91       	lpm	r24, Z+
    51b8:	37 fe       	sbrs	r3, 7
    51ba:	81 91       	ld	r24, Z+
    51bc:	5f 01       	movw	r10, r30
    51be:	b6 01       	movw	r22, r12
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	a7 de       	rcall	.-690    	; 0x4f12 <fputc>
    51c4:	21 10       	cpse	r2, r1
    51c6:	2a 94       	dec	r2
    51c8:	21 e0       	ldi	r18, 0x01	; 1
    51ca:	82 1a       	sub	r8, r18
    51cc:	91 08       	sbc	r9, r1
    51ce:	81 14       	cp	r8, r1
    51d0:	91 04       	cpc	r9, r1
    51d2:	79 f7       	brne	.-34     	; 0x51b2 <vfprintf+0x1be>
    51d4:	e1 c0       	rjmp	.+450    	; 0x5398 <vfprintf+0x3a4>
    51d6:	84 36       	cpi	r24, 0x64	; 100
    51d8:	11 f0       	breq	.+4      	; 0x51de <vfprintf+0x1ea>
    51da:	89 36       	cpi	r24, 0x69	; 105
    51dc:	39 f5       	brne	.+78     	; 0x522c <vfprintf+0x238>
    51de:	f8 01       	movw	r30, r16
    51e0:	37 fe       	sbrs	r3, 7
    51e2:	07 c0       	rjmp	.+14     	; 0x51f2 <vfprintf+0x1fe>
    51e4:	60 81       	ld	r22, Z
    51e6:	71 81       	ldd	r23, Z+1	; 0x01
    51e8:	82 81       	ldd	r24, Z+2	; 0x02
    51ea:	93 81       	ldd	r25, Z+3	; 0x03
    51ec:	0c 5f       	subi	r16, 0xFC	; 252
    51ee:	1f 4f       	sbci	r17, 0xFF	; 255
    51f0:	08 c0       	rjmp	.+16     	; 0x5202 <vfprintf+0x20e>
    51f2:	60 81       	ld	r22, Z
    51f4:	71 81       	ldd	r23, Z+1	; 0x01
    51f6:	07 2e       	mov	r0, r23
    51f8:	00 0c       	add	r0, r0
    51fa:	88 0b       	sbc	r24, r24
    51fc:	99 0b       	sbc	r25, r25
    51fe:	0e 5f       	subi	r16, 0xFE	; 254
    5200:	1f 4f       	sbci	r17, 0xFF	; 255
    5202:	f3 2d       	mov	r31, r3
    5204:	ff 76       	andi	r31, 0x6F	; 111
    5206:	3f 2e       	mov	r3, r31
    5208:	97 ff       	sbrs	r25, 7
    520a:	09 c0       	rjmp	.+18     	; 0x521e <vfprintf+0x22a>
    520c:	90 95       	com	r25
    520e:	80 95       	com	r24
    5210:	70 95       	com	r23
    5212:	61 95       	neg	r22
    5214:	7f 4f       	sbci	r23, 0xFF	; 255
    5216:	8f 4f       	sbci	r24, 0xFF	; 255
    5218:	9f 4f       	sbci	r25, 0xFF	; 255
    521a:	f0 68       	ori	r31, 0x80	; 128
    521c:	3f 2e       	mov	r3, r31
    521e:	2a e0       	ldi	r18, 0x0A	; 10
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	a3 01       	movw	r20, r6
    5224:	f4 d0       	rcall	.+488    	; 0x540e <__ultoa_invert>
    5226:	88 2e       	mov	r8, r24
    5228:	86 18       	sub	r8, r6
    522a:	44 c0       	rjmp	.+136    	; 0x52b4 <vfprintf+0x2c0>
    522c:	85 37       	cpi	r24, 0x75	; 117
    522e:	31 f4       	brne	.+12     	; 0x523c <vfprintf+0x248>
    5230:	23 2d       	mov	r18, r3
    5232:	2f 7e       	andi	r18, 0xEF	; 239
    5234:	b2 2e       	mov	r11, r18
    5236:	2a e0       	ldi	r18, 0x0A	; 10
    5238:	30 e0       	ldi	r19, 0x00	; 0
    523a:	25 c0       	rjmp	.+74     	; 0x5286 <vfprintf+0x292>
    523c:	93 2d       	mov	r25, r3
    523e:	99 7f       	andi	r25, 0xF9	; 249
    5240:	b9 2e       	mov	r11, r25
    5242:	8f 36       	cpi	r24, 0x6F	; 111
    5244:	c1 f0       	breq	.+48     	; 0x5276 <vfprintf+0x282>
    5246:	18 f4       	brcc	.+6      	; 0x524e <vfprintf+0x25a>
    5248:	88 35       	cpi	r24, 0x58	; 88
    524a:	79 f0       	breq	.+30     	; 0x526a <vfprintf+0x276>
    524c:	ae c0       	rjmp	.+348    	; 0x53aa <vfprintf+0x3b6>
    524e:	80 37       	cpi	r24, 0x70	; 112
    5250:	19 f0       	breq	.+6      	; 0x5258 <vfprintf+0x264>
    5252:	88 37       	cpi	r24, 0x78	; 120
    5254:	21 f0       	breq	.+8      	; 0x525e <vfprintf+0x26a>
    5256:	a9 c0       	rjmp	.+338    	; 0x53aa <vfprintf+0x3b6>
    5258:	e9 2f       	mov	r30, r25
    525a:	e0 61       	ori	r30, 0x10	; 16
    525c:	be 2e       	mov	r11, r30
    525e:	b4 fe       	sbrs	r11, 4
    5260:	0d c0       	rjmp	.+26     	; 0x527c <vfprintf+0x288>
    5262:	fb 2d       	mov	r31, r11
    5264:	f4 60       	ori	r31, 0x04	; 4
    5266:	bf 2e       	mov	r11, r31
    5268:	09 c0       	rjmp	.+18     	; 0x527c <vfprintf+0x288>
    526a:	34 fe       	sbrs	r3, 4
    526c:	0a c0       	rjmp	.+20     	; 0x5282 <vfprintf+0x28e>
    526e:	29 2f       	mov	r18, r25
    5270:	26 60       	ori	r18, 0x06	; 6
    5272:	b2 2e       	mov	r11, r18
    5274:	06 c0       	rjmp	.+12     	; 0x5282 <vfprintf+0x28e>
    5276:	28 e0       	ldi	r18, 0x08	; 8
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	05 c0       	rjmp	.+10     	; 0x5286 <vfprintf+0x292>
    527c:	20 e1       	ldi	r18, 0x10	; 16
    527e:	30 e0       	ldi	r19, 0x00	; 0
    5280:	02 c0       	rjmp	.+4      	; 0x5286 <vfprintf+0x292>
    5282:	20 e1       	ldi	r18, 0x10	; 16
    5284:	32 e0       	ldi	r19, 0x02	; 2
    5286:	f8 01       	movw	r30, r16
    5288:	b7 fe       	sbrs	r11, 7
    528a:	07 c0       	rjmp	.+14     	; 0x529a <vfprintf+0x2a6>
    528c:	60 81       	ld	r22, Z
    528e:	71 81       	ldd	r23, Z+1	; 0x01
    5290:	82 81       	ldd	r24, Z+2	; 0x02
    5292:	93 81       	ldd	r25, Z+3	; 0x03
    5294:	0c 5f       	subi	r16, 0xFC	; 252
    5296:	1f 4f       	sbci	r17, 0xFF	; 255
    5298:	06 c0       	rjmp	.+12     	; 0x52a6 <vfprintf+0x2b2>
    529a:	60 81       	ld	r22, Z
    529c:	71 81       	ldd	r23, Z+1	; 0x01
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	0e 5f       	subi	r16, 0xFE	; 254
    52a4:	1f 4f       	sbci	r17, 0xFF	; 255
    52a6:	a3 01       	movw	r20, r6
    52a8:	b2 d0       	rcall	.+356    	; 0x540e <__ultoa_invert>
    52aa:	88 2e       	mov	r8, r24
    52ac:	86 18       	sub	r8, r6
    52ae:	fb 2d       	mov	r31, r11
    52b0:	ff 77       	andi	r31, 0x7F	; 127
    52b2:	3f 2e       	mov	r3, r31
    52b4:	36 fe       	sbrs	r3, 6
    52b6:	0d c0       	rjmp	.+26     	; 0x52d2 <vfprintf+0x2de>
    52b8:	23 2d       	mov	r18, r3
    52ba:	2e 7f       	andi	r18, 0xFE	; 254
    52bc:	a2 2e       	mov	r10, r18
    52be:	89 14       	cp	r8, r9
    52c0:	58 f4       	brcc	.+22     	; 0x52d8 <vfprintf+0x2e4>
    52c2:	34 fe       	sbrs	r3, 4
    52c4:	0b c0       	rjmp	.+22     	; 0x52dc <vfprintf+0x2e8>
    52c6:	32 fc       	sbrc	r3, 2
    52c8:	09 c0       	rjmp	.+18     	; 0x52dc <vfprintf+0x2e8>
    52ca:	83 2d       	mov	r24, r3
    52cc:	8e 7e       	andi	r24, 0xEE	; 238
    52ce:	a8 2e       	mov	r10, r24
    52d0:	05 c0       	rjmp	.+10     	; 0x52dc <vfprintf+0x2e8>
    52d2:	b8 2c       	mov	r11, r8
    52d4:	a3 2c       	mov	r10, r3
    52d6:	03 c0       	rjmp	.+6      	; 0x52de <vfprintf+0x2ea>
    52d8:	b8 2c       	mov	r11, r8
    52da:	01 c0       	rjmp	.+2      	; 0x52de <vfprintf+0x2ea>
    52dc:	b9 2c       	mov	r11, r9
    52de:	a4 fe       	sbrs	r10, 4
    52e0:	0f c0       	rjmp	.+30     	; 0x5300 <vfprintf+0x30c>
    52e2:	fe 01       	movw	r30, r28
    52e4:	e8 0d       	add	r30, r8
    52e6:	f1 1d       	adc	r31, r1
    52e8:	80 81       	ld	r24, Z
    52ea:	80 33       	cpi	r24, 0x30	; 48
    52ec:	21 f4       	brne	.+8      	; 0x52f6 <vfprintf+0x302>
    52ee:	9a 2d       	mov	r25, r10
    52f0:	99 7e       	andi	r25, 0xE9	; 233
    52f2:	a9 2e       	mov	r10, r25
    52f4:	09 c0       	rjmp	.+18     	; 0x5308 <vfprintf+0x314>
    52f6:	a2 fe       	sbrs	r10, 2
    52f8:	06 c0       	rjmp	.+12     	; 0x5306 <vfprintf+0x312>
    52fa:	b3 94       	inc	r11
    52fc:	b3 94       	inc	r11
    52fe:	04 c0       	rjmp	.+8      	; 0x5308 <vfprintf+0x314>
    5300:	8a 2d       	mov	r24, r10
    5302:	86 78       	andi	r24, 0x86	; 134
    5304:	09 f0       	breq	.+2      	; 0x5308 <vfprintf+0x314>
    5306:	b3 94       	inc	r11
    5308:	a3 fc       	sbrc	r10, 3
    530a:	10 c0       	rjmp	.+32     	; 0x532c <vfprintf+0x338>
    530c:	a0 fe       	sbrs	r10, 0
    530e:	06 c0       	rjmp	.+12     	; 0x531c <vfprintf+0x328>
    5310:	b2 14       	cp	r11, r2
    5312:	80 f4       	brcc	.+32     	; 0x5334 <vfprintf+0x340>
    5314:	28 0c       	add	r2, r8
    5316:	92 2c       	mov	r9, r2
    5318:	9b 18       	sub	r9, r11
    531a:	0d c0       	rjmp	.+26     	; 0x5336 <vfprintf+0x342>
    531c:	b2 14       	cp	r11, r2
    531e:	58 f4       	brcc	.+22     	; 0x5336 <vfprintf+0x342>
    5320:	b6 01       	movw	r22, r12
    5322:	80 e2       	ldi	r24, 0x20	; 32
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	f5 dd       	rcall	.-1046   	; 0x4f12 <fputc>
    5328:	b3 94       	inc	r11
    532a:	f8 cf       	rjmp	.-16     	; 0x531c <vfprintf+0x328>
    532c:	b2 14       	cp	r11, r2
    532e:	18 f4       	brcc	.+6      	; 0x5336 <vfprintf+0x342>
    5330:	2b 18       	sub	r2, r11
    5332:	02 c0       	rjmp	.+4      	; 0x5338 <vfprintf+0x344>
    5334:	98 2c       	mov	r9, r8
    5336:	21 2c       	mov	r2, r1
    5338:	a4 fe       	sbrs	r10, 4
    533a:	0f c0       	rjmp	.+30     	; 0x535a <vfprintf+0x366>
    533c:	b6 01       	movw	r22, r12
    533e:	80 e3       	ldi	r24, 0x30	; 48
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	e7 dd       	rcall	.-1074   	; 0x4f12 <fputc>
    5344:	a2 fe       	sbrs	r10, 2
    5346:	16 c0       	rjmp	.+44     	; 0x5374 <vfprintf+0x380>
    5348:	a1 fc       	sbrc	r10, 1
    534a:	03 c0       	rjmp	.+6      	; 0x5352 <vfprintf+0x35e>
    534c:	88 e7       	ldi	r24, 0x78	; 120
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	02 c0       	rjmp	.+4      	; 0x5356 <vfprintf+0x362>
    5352:	88 e5       	ldi	r24, 0x58	; 88
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	b6 01       	movw	r22, r12
    5358:	0c c0       	rjmp	.+24     	; 0x5372 <vfprintf+0x37e>
    535a:	8a 2d       	mov	r24, r10
    535c:	86 78       	andi	r24, 0x86	; 134
    535e:	51 f0       	breq	.+20     	; 0x5374 <vfprintf+0x380>
    5360:	a1 fe       	sbrs	r10, 1
    5362:	02 c0       	rjmp	.+4      	; 0x5368 <vfprintf+0x374>
    5364:	8b e2       	ldi	r24, 0x2B	; 43
    5366:	01 c0       	rjmp	.+2      	; 0x536a <vfprintf+0x376>
    5368:	80 e2       	ldi	r24, 0x20	; 32
    536a:	a7 fc       	sbrc	r10, 7
    536c:	8d e2       	ldi	r24, 0x2D	; 45
    536e:	b6 01       	movw	r22, r12
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	cf dd       	rcall	.-1122   	; 0x4f12 <fputc>
    5374:	89 14       	cp	r8, r9
    5376:	30 f4       	brcc	.+12     	; 0x5384 <vfprintf+0x390>
    5378:	b6 01       	movw	r22, r12
    537a:	80 e3       	ldi	r24, 0x30	; 48
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	c9 dd       	rcall	.-1134   	; 0x4f12 <fputc>
    5380:	9a 94       	dec	r9
    5382:	f8 cf       	rjmp	.-16     	; 0x5374 <vfprintf+0x380>
    5384:	8a 94       	dec	r8
    5386:	f3 01       	movw	r30, r6
    5388:	e8 0d       	add	r30, r8
    538a:	f1 1d       	adc	r31, r1
    538c:	80 81       	ld	r24, Z
    538e:	b6 01       	movw	r22, r12
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	bf dd       	rcall	.-1154   	; 0x4f12 <fputc>
    5394:	81 10       	cpse	r8, r1
    5396:	f6 cf       	rjmp	.-20     	; 0x5384 <vfprintf+0x390>
    5398:	22 20       	and	r2, r2
    539a:	09 f4       	brne	.+2      	; 0x539e <vfprintf+0x3aa>
    539c:	4e ce       	rjmp	.-868    	; 0x503a <vfprintf+0x46>
    539e:	b6 01       	movw	r22, r12
    53a0:	80 e2       	ldi	r24, 0x20	; 32
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	b6 dd       	rcall	.-1172   	; 0x4f12 <fputc>
    53a6:	2a 94       	dec	r2
    53a8:	f7 cf       	rjmp	.-18     	; 0x5398 <vfprintf+0x3a4>
    53aa:	f6 01       	movw	r30, r12
    53ac:	86 81       	ldd	r24, Z+6	; 0x06
    53ae:	97 81       	ldd	r25, Z+7	; 0x07
    53b0:	02 c0       	rjmp	.+4      	; 0x53b6 <vfprintf+0x3c2>
    53b2:	8f ef       	ldi	r24, 0xFF	; 255
    53b4:	9f ef       	ldi	r25, 0xFF	; 255
    53b6:	2b 96       	adiw	r28, 0x0b	; 11
    53b8:	cd bf       	out	0x3d, r28	; 61
    53ba:	de bf       	out	0x3e, r29	; 62
    53bc:	df 91       	pop	r29
    53be:	cf 91       	pop	r28
    53c0:	1f 91       	pop	r17
    53c2:	0f 91       	pop	r16
    53c4:	ff 90       	pop	r15
    53c6:	ef 90       	pop	r14
    53c8:	df 90       	pop	r13
    53ca:	cf 90       	pop	r12
    53cc:	bf 90       	pop	r11
    53ce:	af 90       	pop	r10
    53d0:	9f 90       	pop	r9
    53d2:	8f 90       	pop	r8
    53d4:	7f 90       	pop	r7
    53d6:	6f 90       	pop	r6
    53d8:	5f 90       	pop	r5
    53da:	4f 90       	pop	r4
    53dc:	3f 90       	pop	r3
    53de:	2f 90       	pop	r2
    53e0:	08 95       	ret

000053e2 <strnlen_P>:
    53e2:	fc 01       	movw	r30, r24
    53e4:	05 90       	lpm	r0, Z+
    53e6:	61 50       	subi	r22, 0x01	; 1
    53e8:	70 40       	sbci	r23, 0x00	; 0
    53ea:	01 10       	cpse	r0, r1
    53ec:	d8 f7       	brcc	.-10     	; 0x53e4 <strnlen_P+0x2>
    53ee:	80 95       	com	r24
    53f0:	90 95       	com	r25
    53f2:	8e 0f       	add	r24, r30
    53f4:	9f 1f       	adc	r25, r31
    53f6:	08 95       	ret

000053f8 <strnlen>:
    53f8:	fc 01       	movw	r30, r24
    53fa:	61 50       	subi	r22, 0x01	; 1
    53fc:	70 40       	sbci	r23, 0x00	; 0
    53fe:	01 90       	ld	r0, Z+
    5400:	01 10       	cpse	r0, r1
    5402:	d8 f7       	brcc	.-10     	; 0x53fa <strnlen+0x2>
    5404:	80 95       	com	r24
    5406:	90 95       	com	r25
    5408:	8e 0f       	add	r24, r30
    540a:	9f 1f       	adc	r25, r31
    540c:	08 95       	ret

0000540e <__ultoa_invert>:
    540e:	fa 01       	movw	r30, r20
    5410:	aa 27       	eor	r26, r26
    5412:	28 30       	cpi	r18, 0x08	; 8
    5414:	51 f1       	breq	.+84     	; 0x546a <__ultoa_invert+0x5c>
    5416:	20 31       	cpi	r18, 0x10	; 16
    5418:	81 f1       	breq	.+96     	; 0x547a <__ultoa_invert+0x6c>
    541a:	e8 94       	clt
    541c:	6f 93       	push	r22
    541e:	6e 7f       	andi	r22, 0xFE	; 254
    5420:	6e 5f       	subi	r22, 0xFE	; 254
    5422:	7f 4f       	sbci	r23, 0xFF	; 255
    5424:	8f 4f       	sbci	r24, 0xFF	; 255
    5426:	9f 4f       	sbci	r25, 0xFF	; 255
    5428:	af 4f       	sbci	r26, 0xFF	; 255
    542a:	b1 e0       	ldi	r27, 0x01	; 1
    542c:	3e d0       	rcall	.+124    	; 0x54aa <__ultoa_invert+0x9c>
    542e:	b4 e0       	ldi	r27, 0x04	; 4
    5430:	3c d0       	rcall	.+120    	; 0x54aa <__ultoa_invert+0x9c>
    5432:	67 0f       	add	r22, r23
    5434:	78 1f       	adc	r23, r24
    5436:	89 1f       	adc	r24, r25
    5438:	9a 1f       	adc	r25, r26
    543a:	a1 1d       	adc	r26, r1
    543c:	68 0f       	add	r22, r24
    543e:	79 1f       	adc	r23, r25
    5440:	8a 1f       	adc	r24, r26
    5442:	91 1d       	adc	r25, r1
    5444:	a1 1d       	adc	r26, r1
    5446:	6a 0f       	add	r22, r26
    5448:	71 1d       	adc	r23, r1
    544a:	81 1d       	adc	r24, r1
    544c:	91 1d       	adc	r25, r1
    544e:	a1 1d       	adc	r26, r1
    5450:	20 d0       	rcall	.+64     	; 0x5492 <__ultoa_invert+0x84>
    5452:	09 f4       	brne	.+2      	; 0x5456 <__ultoa_invert+0x48>
    5454:	68 94       	set
    5456:	3f 91       	pop	r19
    5458:	2a e0       	ldi	r18, 0x0A	; 10
    545a:	26 9f       	mul	r18, r22
    545c:	11 24       	eor	r1, r1
    545e:	30 19       	sub	r19, r0
    5460:	30 5d       	subi	r19, 0xD0	; 208
    5462:	31 93       	st	Z+, r19
    5464:	de f6       	brtc	.-74     	; 0x541c <__ultoa_invert+0xe>
    5466:	cf 01       	movw	r24, r30
    5468:	08 95       	ret
    546a:	46 2f       	mov	r20, r22
    546c:	47 70       	andi	r20, 0x07	; 7
    546e:	40 5d       	subi	r20, 0xD0	; 208
    5470:	41 93       	st	Z+, r20
    5472:	b3 e0       	ldi	r27, 0x03	; 3
    5474:	0f d0       	rcall	.+30     	; 0x5494 <__ultoa_invert+0x86>
    5476:	c9 f7       	brne	.-14     	; 0x546a <__ultoa_invert+0x5c>
    5478:	f6 cf       	rjmp	.-20     	; 0x5466 <__ultoa_invert+0x58>
    547a:	46 2f       	mov	r20, r22
    547c:	4f 70       	andi	r20, 0x0F	; 15
    547e:	40 5d       	subi	r20, 0xD0	; 208
    5480:	4a 33       	cpi	r20, 0x3A	; 58
    5482:	18 f0       	brcs	.+6      	; 0x548a <__ultoa_invert+0x7c>
    5484:	49 5d       	subi	r20, 0xD9	; 217
    5486:	31 fd       	sbrc	r19, 1
    5488:	40 52       	subi	r20, 0x20	; 32
    548a:	41 93       	st	Z+, r20
    548c:	02 d0       	rcall	.+4      	; 0x5492 <__ultoa_invert+0x84>
    548e:	a9 f7       	brne	.-22     	; 0x547a <__ultoa_invert+0x6c>
    5490:	ea cf       	rjmp	.-44     	; 0x5466 <__ultoa_invert+0x58>
    5492:	b4 e0       	ldi	r27, 0x04	; 4
    5494:	a6 95       	lsr	r26
    5496:	97 95       	ror	r25
    5498:	87 95       	ror	r24
    549a:	77 95       	ror	r23
    549c:	67 95       	ror	r22
    549e:	ba 95       	dec	r27
    54a0:	c9 f7       	brne	.-14     	; 0x5494 <__ultoa_invert+0x86>
    54a2:	00 97       	sbiw	r24, 0x00	; 0
    54a4:	61 05       	cpc	r22, r1
    54a6:	71 05       	cpc	r23, r1
    54a8:	08 95       	ret
    54aa:	9b 01       	movw	r18, r22
    54ac:	ac 01       	movw	r20, r24
    54ae:	0a 2e       	mov	r0, r26
    54b0:	06 94       	lsr	r0
    54b2:	57 95       	ror	r21
    54b4:	47 95       	ror	r20
    54b6:	37 95       	ror	r19
    54b8:	27 95       	ror	r18
    54ba:	ba 95       	dec	r27
    54bc:	c9 f7       	brne	.-14     	; 0x54b0 <__ultoa_invert+0xa2>
    54be:	62 0f       	add	r22, r18
    54c0:	73 1f       	adc	r23, r19
    54c2:	84 1f       	adc	r24, r20
    54c4:	95 1f       	adc	r25, r21
    54c6:	a0 1d       	adc	r26, r0
    54c8:	08 95       	ret

000054ca <_exit>:
    54ca:	f8 94       	cli

000054cc <__stop_program>:
    54cc:	ff cf       	rjmp	.-2      	; 0x54cc <__stop_program>
